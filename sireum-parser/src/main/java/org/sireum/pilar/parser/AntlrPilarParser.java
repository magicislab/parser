// $ANTLR 3.3 Nov 30, 2010 12:45:30 /sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g 2014-02-09 10:11:23

/*
Copyright (c) 2011 Robby, Kansas State University.        
All rights reserved. This program and the accompanying materials      
are made available under the terms of the Eclipse Public License v1.0 
which accompanies this distribution, and is available at              
http://www.eclipse.org/legal/epl-v10.html                             
*/

package org.sireum.pilar.parser;

import org.antlr.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

@SuppressWarnings("all")
public class AntlrPilarParser extends Parser {
  public static final String[] tokenNames = new String[] { "<invalid>",
      "<EOR>", "<DOWN>", "<UP>", "OPTION", "LIST", "MODEL", "ANNOTATION",
      "ANNOTATION_PARAM_IDED", "PACKAGE", "CONST", "CONST_ELEMENT", "ENUM",
      "ENUM_ELEMENT", "TYPEALIAS", "RECORD", "EXTENDCLAUSE_ELEMENT",
      "ATTRIBUTE", "ATTRIBUTE_FRAGMENT", "GLOBAL", "GLOBAL_FRAGMENT",
      "PROCEDURE", "PARAM", "PARAM_VARIABLE", "VSET", "VSET_ELEMENT",
      "EXTENSION", "TYPEVAR", "TYPE_EXT", "TYPE_EXT_ATTRIBUTE_BINDING",
      "ACTION_EXT", "EXP_EXT", "PROC_EXT", "EXT_PARAM", "EXT_PARAM_VARIABLE",
      "BODY", "LOCAL", "LOCAL_FRAGMENT", "LOCATION", "EXP_GUARD", "ELSE_GUARD",
      "TRANSFORMATION", "ASSIGN", "LHS", "RHS", "ASSERT", "ASSUME", "ASSERTM",
      "ASSUMEM", "THROW", "START", "ACTION_EXT_CALL", "GOTO", "RETURN",
      "IF_JUMP", "IF_THEN_JUMP", "IF_ELSE_JUMP", "SWITCH_JUMP",
      "SWITCH_CASE_JUMP", "SWITCH_DEFAULT_JUMP", "CALL_JUMP", "CATCH_CLAUSE",
      "IF_EXP", "IF_THEN_EXP", "IF_ELSE_EXP", "SWITCH_EXP", "SWITCH_CASE_EXP",
      "SWITCH_DEFAULT_EXP", "BINARY", "UNARY", "CAST", "INDEXING", "ACCESS",
      "CALL", "TRUE", "FALSE", "NULL", "HEX_LIT", "DEC_LIT", "OCT_LIT",
      "STRING", "TUPLE", "NAME_EXP", "NAME", "TYPEVARID_TYPE", "FLOAT",
      "RATIONAL", "CHAR", "SYMBOL", "TYPE_EXP", "NLIST_RANGE", "NLIST",
      "NMULTI_ARRAY", "NMULTI_ARRAY_FRAGMENT", "NRECORD", "ATTR_INIT", "NSET",
      "NFUNCTION", "FUN_EXP", "FUN", "MAPPING", "MATCHING", "ANN_EXP", "INT",
      "NAME_TYPE", "TYPE_TUPLE", "TUPLE_TYPE", "FUN_TYPE", "PROCEDURE_TYPE",
      "TYPE_PARAM", "ANNOTATED_TYPE", "PROCEDURE_TYPE_PARAM_VARIABLE",
      "FUNCTION_TYPE", "RELATION_TYPE", "LET_EXP", "LET_BINDING", "NEW_EXP",
      "NEW_MULTI_ARRAY_FRAGMENT", "TYPE", "ARRAY_FRAGMENT", "LIST_FRAGMENT",
      "MULTIARRAY_FRAGMENT", "SET_FRAGMENT", "TYPEVAR_TUPLE", "RAW",
      "ANN_TYPE", "ID", "TYPEVARID", "GLOBALID", "LOCID", "ACTION_EXT_OP",
      "COND_OR_OP", "COND_AND_OP", "OR_OP", "XOR_OP", "AND_OP", "EQ_OP",
      "COLON_OP", "REL_OP", "SHIFT_OP", "ADD_OP", "MUL_OP", "UN_OP",
      "CHAR_LIT", "STRING_LIT", "SYMBOL_LIT", "RAW_LIT", "BIN_LIT",
      "FLOAT_LIT", "RATIONAL_LIT", "TX_BASICID", "TX_HexDigit",
      "TX_IntTypeSuffix", "TX_Exponent", "TX_FloatTypeSuffix",
      "TX_EscapeSequence", "TX_OPID_SUFFIX", "TX_OPID_CHAR", "TX_OPID_CHARMLT",
      "TX_OPID_CHARMGT", "TX_Letter", "TX_JavaIDDigit", "TX_UnicodeEscape",
      "TX_OctalEscape", "WS", "COMMENT", "LINE_COMMENT", "'<'", "'>'", "'('",
      "')'", "'@'", "','", "'='", "'package'", "';'", "'const'", "'{'", "'}'",
      "'enum'", "'typealias'", "'record'", "'extends'", "'global'",
      "'procedure'", "'...'", "'vset'", "'fun'", "'extension'", "'typedef'",
      "'actiondef'", "'expdef'", "'procdef'", "'local'", "'|'", "'+>'",
      "'else'", "'assert'", "'assume'", "'throw'", "':='", "'start'", "'['",
      "']'", "'switch'", "'call'", "'goto'", "'return'", "'if'", "'then'",
      "'=>'", "'catch'", "'..'", "'==>'", "'<=='", "'*'", "'.'", "'`'",
      "'true'", "'false'", "'null'", "'new'", "'->'", "'let'", "'in'", "'::'",
      "'-!>'" };
  public static final int EOF = -1;
  public static final int T__167 = 167;
  public static final int T__168 = 168;
  public static final int T__169 = 169;
  public static final int T__170 = 170;
  public static final int T__171 = 171;
  public static final int T__172 = 172;
  public static final int T__173 = 173;
  public static final int T__174 = 174;
  public static final int T__175 = 175;
  public static final int T__176 = 176;
  public static final int T__177 = 177;
  public static final int T__178 = 178;
  public static final int T__179 = 179;
  public static final int T__180 = 180;
  public static final int T__181 = 181;
  public static final int T__182 = 182;
  public static final int T__183 = 183;
  public static final int T__184 = 184;
  public static final int T__185 = 185;
  public static final int T__186 = 186;
  public static final int T__187 = 187;
  public static final int T__188 = 188;
  public static final int T__189 = 189;
  public static final int T__190 = 190;
  public static final int T__191 = 191;
  public static final int T__192 = 192;
  public static final int T__193 = 193;
  public static final int T__194 = 194;
  public static final int T__195 = 195;
  public static final int T__196 = 196;
  public static final int T__197 = 197;
  public static final int T__198 = 198;
  public static final int T__199 = 199;
  public static final int T__200 = 200;
  public static final int T__201 = 201;
  public static final int T__202 = 202;
  public static final int T__203 = 203;
  public static final int T__204 = 204;
  public static final int T__205 = 205;
  public static final int T__206 = 206;
  public static final int T__207 = 207;
  public static final int T__208 = 208;
  public static final int T__209 = 209;
  public static final int T__210 = 210;
  public static final int T__211 = 211;
  public static final int T__212 = 212;
  public static final int T__213 = 213;
  public static final int T__214 = 214;
  public static final int T__215 = 215;
  public static final int T__216 = 216;
  public static final int T__217 = 217;
  public static final int T__218 = 218;
  public static final int T__219 = 219;
  public static final int T__220 = 220;
  public static final int T__221 = 221;
  public static final int T__222 = 222;
  public static final int T__223 = 223;
  public static final int T__224 = 224;
  public static final int T__225 = 225;
  public static final int T__226 = 226;
  public static final int OPTION = 4;
  public static final int LIST = 5;
  public static final int MODEL = 6;
  public static final int ANNOTATION = 7;
  public static final int ANNOTATION_PARAM_IDED = 8;
  public static final int PACKAGE = 9;
  public static final int CONST = 10;
  public static final int CONST_ELEMENT = 11;
  public static final int ENUM = 12;
  public static final int ENUM_ELEMENT = 13;
  public static final int TYPEALIAS = 14;
  public static final int RECORD = 15;
  public static final int EXTENDCLAUSE_ELEMENT = 16;
  public static final int ATTRIBUTE = 17;
  public static final int ATTRIBUTE_FRAGMENT = 18;
  public static final int GLOBAL = 19;
  public static final int GLOBAL_FRAGMENT = 20;
  public static final int PROCEDURE = 21;
  public static final int PARAM = 22;
  public static final int PARAM_VARIABLE = 23;
  public static final int VSET = 24;
  public static final int VSET_ELEMENT = 25;
  public static final int EXTENSION = 26;
  public static final int TYPEVAR = 27;
  public static final int TYPE_EXT = 28;
  public static final int TYPE_EXT_ATTRIBUTE_BINDING = 29;
  public static final int ACTION_EXT = 30;
  public static final int EXP_EXT = 31;
  public static final int PROC_EXT = 32;
  public static final int EXT_PARAM = 33;
  public static final int EXT_PARAM_VARIABLE = 34;
  public static final int BODY = 35;
  public static final int LOCAL = 36;
  public static final int LOCAL_FRAGMENT = 37;
  public static final int LOCATION = 38;
  public static final int EXP_GUARD = 39;
  public static final int ELSE_GUARD = 40;
  public static final int TRANSFORMATION = 41;
  public static final int ASSIGN = 42;
  public static final int LHS = 43;
  public static final int RHS = 44;
  public static final int ASSERT = 45;
  public static final int ASSUME = 46;
  public static final int ASSERTM = 47;
  public static final int ASSUMEM = 48;
  public static final int THROW = 49;
  public static final int START = 50;
  public static final int ACTION_EXT_CALL = 51;
  public static final int GOTO = 52;
  public static final int RETURN = 53;
  public static final int IF_JUMP = 54;
  public static final int IF_THEN_JUMP = 55;
  public static final int IF_ELSE_JUMP = 56;
  public static final int SWITCH_JUMP = 57;
  public static final int SWITCH_CASE_JUMP = 58;
  public static final int SWITCH_DEFAULT_JUMP = 59;
  public static final int CALL_JUMP = 60;
  public static final int CATCH_CLAUSE = 61;
  public static final int IF_EXP = 62;
  public static final int IF_THEN_EXP = 63;
  public static final int IF_ELSE_EXP = 64;
  public static final int SWITCH_EXP = 65;
  public static final int SWITCH_CASE_EXP = 66;
  public static final int SWITCH_DEFAULT_EXP = 67;
  public static final int BINARY = 68;
  public static final int UNARY = 69;
  public static final int CAST = 70;
  public static final int INDEXING = 71;
  public static final int ACCESS = 72;
  public static final int CALL = 73;
  public static final int TRUE = 74;
  public static final int FALSE = 75;
  public static final int NULL = 76;
  public static final int HEX_LIT = 77;
  public static final int DEC_LIT = 78;
  public static final int OCT_LIT = 79;
  public static final int STRING = 80;
  public static final int TUPLE = 81;
  public static final int NAME_EXP = 82;
  public static final int NAME = 83;
  public static final int TYPEVARID_TYPE = 84;
  public static final int FLOAT = 85;
  public static final int RATIONAL = 86;
  public static final int CHAR = 87;
  public static final int SYMBOL = 88;
  public static final int TYPE_EXP = 89;
  public static final int NLIST_RANGE = 90;
  public static final int NLIST = 91;
  public static final int NMULTI_ARRAY = 92;
  public static final int NMULTI_ARRAY_FRAGMENT = 93;
  public static final int NRECORD = 94;
  public static final int ATTR_INIT = 95;
  public static final int NSET = 96;
  public static final int NFUNCTION = 97;
  public static final int FUN_EXP = 98;
  public static final int FUN = 99;
  public static final int MAPPING = 100;
  public static final int MATCHING = 101;
  public static final int ANN_EXP = 102;
  public static final int INT = 103;
  public static final int NAME_TYPE = 104;
  public static final int TYPE_TUPLE = 105;
  public static final int TUPLE_TYPE = 106;
  public static final int FUN_TYPE = 107;
  public static final int PROCEDURE_TYPE = 108;
  public static final int TYPE_PARAM = 109;
  public static final int ANNOTATED_TYPE = 110;
  public static final int PROCEDURE_TYPE_PARAM_VARIABLE = 111;
  public static final int FUNCTION_TYPE = 112;
  public static final int RELATION_TYPE = 113;
  public static final int LET_EXP = 114;
  public static final int LET_BINDING = 115;
  public static final int NEW_EXP = 116;
  public static final int NEW_MULTI_ARRAY_FRAGMENT = 117;
  public static final int TYPE = 118;
  public static final int ARRAY_FRAGMENT = 119;
  public static final int LIST_FRAGMENT = 120;
  public static final int MULTIARRAY_FRAGMENT = 121;
  public static final int SET_FRAGMENT = 122;
  public static final int TYPEVAR_TUPLE = 123;
  public static final int RAW = 124;
  public static final int ANN_TYPE = 125;
  public static final int ID = 126;
  public static final int TYPEVARID = 127;
  public static final int GLOBALID = 128;
  public static final int LOCID = 129;
  public static final int ACTION_EXT_OP = 130;
  public static final int COND_OR_OP = 131;
  public static final int COND_AND_OP = 132;
  public static final int OR_OP = 133;
  public static final int XOR_OP = 134;
  public static final int AND_OP = 135;
  public static final int EQ_OP = 136;
  public static final int COLON_OP = 137;
  public static final int REL_OP = 138;
  public static final int SHIFT_OP = 139;
  public static final int ADD_OP = 140;
  public static final int MUL_OP = 141;
  public static final int UN_OP = 142;
  public static final int CHAR_LIT = 143;
  public static final int STRING_LIT = 144;
  public static final int SYMBOL_LIT = 145;
  public static final int RAW_LIT = 146;
  public static final int BIN_LIT = 147;
  public static final int FLOAT_LIT = 148;
  public static final int RATIONAL_LIT = 149;
  public static final int TX_BASICID = 150;
  public static final int TX_HexDigit = 151;
  public static final int TX_IntTypeSuffix = 152;
  public static final int TX_Exponent = 153;
  public static final int TX_FloatTypeSuffix = 154;
  public static final int TX_EscapeSequence = 155;
  public static final int TX_OPID_SUFFIX = 156;
  public static final int TX_OPID_CHAR = 157;
  public static final int TX_OPID_CHARMLT = 158;
  public static final int TX_OPID_CHARMGT = 159;
  public static final int TX_Letter = 160;
  public static final int TX_JavaIDDigit = 161;
  public static final int TX_UnicodeEscape = 162;
  public static final int TX_OctalEscape = 163;
  public static final int WS = 164;
  public static final int COMMENT = 165;
  public static final int LINE_COMMENT = 166;

  // delegates
  // delegators

  public AntlrPilarParser(TokenStream input) {
    this(input, new RecognizerSharedState());
  }

  public AntlrPilarParser(TokenStream input, RecognizerSharedState state) {
    super(input, state);
    this.state.ruleMemo = new HashMap[354 + 1];

  }

  protected TreeAdaptor adaptor = new CommonTreeAdaptor();

  public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
  }

  public TreeAdaptor getTreeAdaptor() {
    return adaptor;
  }

  public String[] getTokenNames() {
    return AntlrPilarParser.tokenNames;
  }

  public String getGrammarFileName() {
    return "/Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g";
  }

  public static class modelFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "modelFile"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:165:1: modelFile : model EOF -> model ;
  public final AntlrPilarParser.modelFile_return modelFile()
      throws RecognitionException {
    AntlrPilarParser.modelFile_return retval = new AntlrPilarParser.modelFile_return();
    retval.start = input.LT(1);
    int modelFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF2 = null;
    AntlrPilarParser.model_return model1 = null;

    Object EOF2_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_model = new RewriteRuleSubtreeStream(
        adaptor, "rule model");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 1)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:166:2: ( model EOF -> model )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:166:4: model EOF
      {
        pushFollow(FOLLOW_model_in_modelFile668);
        model1 = model();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_model.add(model1.getTree());
        EOF2 = (Token) match(input, EOF, FOLLOW_EOF_in_modelFile670);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF2);

        // AST REWRITE
        // elements: model
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 166:41: -> model
          {
            adaptor.addChild(root_0, stream_model.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 1, modelFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "modelFile"

  public static class annotationFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotationFile"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:169:1: annotationFile : annotation EOF -> annotation ;
  public final AntlrPilarParser.annotationFile_return annotationFile()
      throws RecognitionException {
    AntlrPilarParser.annotationFile_return retval = new AntlrPilarParser.annotationFile_return();
    retval.start = input.LT(1);
    int annotationFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF4 = null;
    AntlrPilarParser.annotation_return annotation3 = null;

    Object EOF4_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(
        adaptor, "rule annotation");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 2)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:170:2: ( annotation EOF -> annotation )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:170:4: annotation EOF
      {
        pushFollow(FOLLOW_annotation_in_annotationFile712);
        annotation3 = annotation();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotation.add(annotation3.getTree());
        EOF4 = (Token) match(input, EOF, FOLLOW_EOF_in_annotationFile714);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF4);

        // AST REWRITE
        // elements: annotation
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 170:41: -> annotation
          {
            adaptor.addChild(root_0, stream_annotation.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 2, annotationFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotationFile"

  public static class packageDeclarationFile_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "packageDeclarationFile"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:173:1: packageDeclarationFile : packageDeclaration EOF -> packageDeclaration ;
  public final AntlrPilarParser.packageDeclarationFile_return packageDeclarationFile()
      throws RecognitionException {
    AntlrPilarParser.packageDeclarationFile_return retval = new AntlrPilarParser.packageDeclarationFile_return();
    retval.start = input.LT(1);
    int packageDeclarationFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF6 = null;
    AntlrPilarParser.packageDeclaration_return packageDeclaration5 = null;

    Object EOF6_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_packageDeclaration = new RewriteRuleSubtreeStream(
        adaptor, "rule packageDeclaration");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 3)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:174:2: ( packageDeclaration EOF -> packageDeclaration )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:174:4: packageDeclaration EOF
      {
        pushFollow(FOLLOW_packageDeclaration_in_packageDeclarationFile755);
        packageDeclaration5 = packageDeclaration();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_packageDeclaration.add(packageDeclaration5.getTree());
        EOF6 = (Token) match(
            input,
            EOF,
            FOLLOW_EOF_in_packageDeclarationFile757);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF6);

        // AST REWRITE
        // elements: packageDeclaration
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 174:41: -> packageDeclaration
          {
            adaptor.addChild(root_0, stream_packageDeclaration.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 3, packageDeclarationFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "packageDeclarationFile"

  public static class packageElementFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "packageElementFile"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:177:1: packageElementFile : packageElement EOF -> packageElement ;
  public final AntlrPilarParser.packageElementFile_return packageElementFile()
      throws RecognitionException {
    AntlrPilarParser.packageElementFile_return retval = new AntlrPilarParser.packageElementFile_return();
    retval.start = input.LT(1);
    int packageElementFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF8 = null;
    AntlrPilarParser.packageElement_return packageElement7 = null;

    Object EOF8_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_packageElement = new RewriteRuleSubtreeStream(
        adaptor, "rule packageElement");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 4)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:178:2: ( packageElement EOF -> packageElement )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:178:4: packageElement EOF
      {
        pushFollow(FOLLOW_packageElement_in_packageElementFile786);
        packageElement7 = packageElement();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_packageElement.add(packageElement7.getTree());
        EOF8 = (Token) match(input, EOF, FOLLOW_EOF_in_packageElementFile788);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF8);

        // AST REWRITE
        // elements: packageElement
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 178:41: -> packageElement
          {
            adaptor.addChild(root_0, stream_packageElement.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 4, packageElementFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "packageElementFile"

  public static class locationFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "locationFile"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:181:1: locationFile : location EOF -> location ;
  public final AntlrPilarParser.locationFile_return locationFile()
      throws RecognitionException {
    AntlrPilarParser.locationFile_return retval = new AntlrPilarParser.locationFile_return();
    retval.start = input.LT(1);
    int locationFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF10 = null;
    AntlrPilarParser.location_return location9 = null;

    Object EOF10_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_location = new RewriteRuleSubtreeStream(
        adaptor, "rule location");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 5)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:182:2: ( location EOF -> location )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:182:4: location EOF
      {
        pushFollow(FOLLOW_location_in_locationFile821);
        location9 = location();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_location.add(location9.getTree());
        EOF10 = (Token) match(input, EOF, FOLLOW_EOF_in_locationFile823);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF10);

        // AST REWRITE
        // elements: location
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 182:41: -> location
          {
            adaptor.addChild(root_0, stream_location.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 5, locationFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "locationFile"

  public static class transformationFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "transformationFile"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:185:1: transformationFile : transformation EOF -> transformation ;
  public final AntlrPilarParser.transformationFile_return transformationFile()
      throws RecognitionException {
    AntlrPilarParser.transformationFile_return retval = new AntlrPilarParser.transformationFile_return();
    retval.start = input.LT(1);
    int transformationFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF12 = null;
    AntlrPilarParser.transformation_return transformation11 = null;

    Object EOF12_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_transformation = new RewriteRuleSubtreeStream(
        adaptor, "rule transformation");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 6)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:186:2: ( transformation EOF -> transformation )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:186:4: transformation EOF
      {
        pushFollow(FOLLOW_transformation_in_transformationFile862);
        transformation11 = transformation();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_transformation.add(transformation11.getTree());
        EOF12 = (Token) match(input, EOF, FOLLOW_EOF_in_transformationFile864);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF12);

        // AST REWRITE
        // elements: transformation
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 186:41: -> transformation
          {
            adaptor.addChild(root_0, stream_transformation.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 6, transformationFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "transformationFile"

  public static class actionFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "actionFile"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:189:1: actionFile : action EOF -> action ;
  public final AntlrPilarParser.actionFile_return actionFile()
      throws RecognitionException {
    AntlrPilarParser.actionFile_return retval = new AntlrPilarParser.actionFile_return();
    retval.start = input.LT(1);
    int actionFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF14 = null;
    AntlrPilarParser.action_return action13 = null;

    Object EOF14_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_action = new RewriteRuleSubtreeStream(
        adaptor, "rule action");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 7)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:190:2: ( action EOF -> action )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:190:4: action EOF
      {
        pushFollow(FOLLOW_action_in_actionFile897);
        action13 = action();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_action.add(action13.getTree());
        EOF14 = (Token) match(input, EOF, FOLLOW_EOF_in_actionFile899);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF14);

        // AST REWRITE
        // elements: action
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 190:41: -> action
          {
            adaptor.addChild(root_0, stream_action.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 7, actionFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "actionFile"

  public static class jumpFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "jumpFile"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:193:1: jumpFile : jump EOF -> jump ;
  public final AntlrPilarParser.jumpFile_return jumpFile()
      throws RecognitionException {
    AntlrPilarParser.jumpFile_return retval = new AntlrPilarParser.jumpFile_return();
    retval.start = input.LT(1);
    int jumpFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF16 = null;
    AntlrPilarParser.jump_return jump15 = null;

    Object EOF16_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_jump = new RewriteRuleSubtreeStream(
        adaptor, "rule jump");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 8)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:194:2: ( jump EOF -> jump )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:194:4: jump EOF
      {
        pushFollow(FOLLOW_jump_in_jumpFile940);
        jump15 = jump();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_jump.add(jump15.getTree());
        EOF16 = (Token) match(input, EOF, FOLLOW_EOF_in_jumpFile942);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF16);

        // AST REWRITE
        // elements: jump
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 194:41: -> jump
          {
            adaptor.addChild(root_0, stream_jump.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 8, jumpFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "jumpFile"

  public static class expFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "expFile"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:197:1: expFile : exp EOF -> exp ;
  public final AntlrPilarParser.expFile_return expFile()
      throws RecognitionException {
    AntlrPilarParser.expFile_return retval = new AntlrPilarParser.expFile_return();
    retval.start = input.LT(1);
    int expFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF18 = null;
    AntlrPilarParser.exp_return exp17 = null;

    Object EOF18_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 9)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:198:2: ( exp EOF -> exp )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:198:4: exp EOF
      {
        pushFollow(FOLLOW_exp_in_expFile985);
        exp17 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp17.getTree());
        EOF18 = (Token) match(input, EOF, FOLLOW_EOF_in_expFile987);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF18);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 198:41: -> exp
          {
            adaptor.addChild(root_0, stream_exp.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 9, expFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "expFile"

  public static class typeFile_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeFile"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:201:1: typeFile : type EOF -> type ;
  public final AntlrPilarParser.typeFile_return typeFile()
      throws RecognitionException {
    AntlrPilarParser.typeFile_return retval = new AntlrPilarParser.typeFile_return();
    retval.start = input.LT(1);
    int typeFile_StartIndex = input.index();
    Object root_0 = null;

    Token EOF20 = null;
    AntlrPilarParser.type_return type19 = null;

    Object EOF20_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 10)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:202:2: ( type EOF -> type )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:202:4: type EOF
      {
        pushFollow(FOLLOW_type_in_typeFile1031);
        type19 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type19.getTree());
        EOF20 = (Token) match(input, EOF, FOLLOW_EOF_in_typeFile1033);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF20);

        // AST REWRITE
        // elements: type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 202:41: -> type
          {
            adaptor.addChild(root_0, stream_type.nextTree());

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 10, typeFile_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeFile"

  public static class model_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "model"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:205:1: model : annotationList ( packageElement )* ( packageDeclaration )* EOF -> ^( MODEL annotationList ^( LIST ( packageElement )* ) ^( LIST ( packageDeclaration )* ) ) ;
  public final AntlrPilarParser.model_return model()
      throws RecognitionException {
    AntlrPilarParser.model_return retval = new AntlrPilarParser.model_return();
    retval.start = input.LT(1);
    int model_StartIndex = input.index();
    Object root_0 = null;

    Token EOF24 = null;
    AntlrPilarParser.annotationList_return annotationList21 = null;

    AntlrPilarParser.packageElement_return packageElement22 = null;

    AntlrPilarParser.packageDeclaration_return packageDeclaration23 = null;

    Object EOF24_tree = null;
    RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
        "token EOF");
    RewriteRuleSubtreeStream stream_packageElement = new RewriteRuleSubtreeStream(
        adaptor, "rule packageElement");
    RewriteRuleSubtreeStream stream_packageDeclaration = new RewriteRuleSubtreeStream(
        adaptor, "rule packageDeclaration");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 11)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:206:2: ( annotationList ( packageElement )* ( packageDeclaration )* EOF -> ^( MODEL annotationList ^( LIST ( packageElement )* ) ^( LIST ( packageDeclaration )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:206:4: annotationList ( packageElement )* ( packageDeclaration )* EOF
      {
        pushFollow(FOLLOW_annotationList_in_model1076);
        annotationList21 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList21.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:207:4: ( packageElement )*
        loop1: do {
          int alt1 = 2;
          int LA1_0 = input.LA(1);

          if ((LA1_0 == 176 || (LA1_0 >= 179 && LA1_0 <= 181)
              || (LA1_0 >= 183 && LA1_0 <= 184) || (LA1_0 >= 186 && LA1_0 <= 188))) {
            alt1 = 1;
          }

          switch (alt1) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: packageElement
            {
              pushFollow(FOLLOW_packageElement_in_model1081);
              packageElement22 = packageElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_packageElement.add(packageElement22.getTree());

            }
              break;

            default:
              break loop1;
          }
        } while (true);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:208:4: ( packageDeclaration )*
        loop2: do {
          int alt2 = 2;
          int LA2_0 = input.LA(1);

          if ((LA2_0 == 174)) {
            alt2 = 1;
          }

          switch (alt2) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: packageDeclaration
            {
              pushFollow(FOLLOW_packageDeclaration_in_model1087);
              packageDeclaration23 = packageDeclaration();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_packageDeclaration.add(packageDeclaration23.getTree());

            }
              break;

            default:
              break loop2;
          }
        } while (true);

        EOF24 = (Token) match(input, EOF, FOLLOW_EOF_in_model1111);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EOF.add(EOF24);

        // AST REWRITE
        // elements: annotationList, packageDeclaration, packageElement
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 209:41: -> ^( MODEL annotationList ^( LIST ( packageElement )* ) ^( LIST ( packageDeclaration )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:209:44: ^( MODEL annotationList ^( LIST ( packageElement )* ) ^( LIST ( packageDeclaration )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(MODEL, "MODEL"),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:209:67: ^( LIST ( packageElement )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:209:74: ( packageElement )*
                while (stream_packageElement.hasNext()) {
                  adaptor.addChild(root_2, stream_packageElement.nextTree());

                }
                stream_packageElement.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:209:91: ^( LIST ( packageDeclaration )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:209:98: ( packageDeclaration )*
                while (stream_packageDeclaration.hasNext()) {
                  adaptor
                      .addChild(root_2, stream_packageDeclaration.nextTree());

                }
                stream_packageDeclaration.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 11, model_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "model"

  public static class annotationList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotationList"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:212:1: annotationList : ( -> ^( LIST ) | ( annotation )+ -> ^( LIST ( annotation )+ ) );
  public final AntlrPilarParser.annotationList_return annotationList()
      throws RecognitionException {
    AntlrPilarParser.annotationList_return retval = new AntlrPilarParser.annotationList_return();
    retval.start = input.LT(1);
    int annotationList_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.annotation_return annotation25 = null;

    RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(
        adaptor, "rule annotation");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 12)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:213:2: ( -> ^( LIST ) | ( annotation )+ -> ^( LIST ( annotation )+ ) )
      int alt4 = 2;
      int LA4_0 = input.LA(1);

      if ((LA4_0 == EOF || (LA4_0 >= HEX_LIT && LA4_0 <= OCT_LIT)
          || (LA4_0 >= ID && LA4_0 <= ACTION_EXT_OP)
          || (LA4_0 >= ADD_OP && LA4_0 <= RATIONAL_LIT)
          || (LA4_0 >= 168 && LA4_0 <= 170) || (LA4_0 >= 172 && LA4_0 <= 188)
          || (LA4_0 >= 194 && LA4_0 <= 195) || (LA4_0 >= 197 && LA4_0 <= 201)
          || (LA4_0 >= 204 && LA4_0 <= 208) || (LA4_0 >= 210 && LA4_0 <= 211)
          || LA4_0 == 215 || (LA4_0 >= 217 && LA4_0 <= 223) || LA4_0 == 226)) {
        alt4 = 1;
      } else if ((LA4_0 == 171)) {
        int LA4_2 = input.LA(2);

        if ((LA4_2 == 202)) {
          alt4 = 1;
        } else if ((LA4_2 == ID)) {
          alt4 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 4, 2, input);

          throw nvae;
        }
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 4, 0, input);

        throw nvae;
      }
      switch (alt4) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:213:41: 
        {

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 213:41: -> ^( LIST )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:213:44: ^( LIST )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:214:4: ( annotation )+
        {
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:214:4: ( annotation )+
          int cnt3 = 0;
          loop3: do {
            int alt3 = 2;
            int LA3_0 = input.LA(1);

            if ((LA3_0 == 171)) {
              int LA3_2 = input.LA(2);

              if ((LA3_2 == ID)) {
                alt3 = 1;
              }

            }

            switch (alt3) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotation
              {
                pushFollow(FOLLOW_annotation_in_annotationList1223);
                annotation25 = annotation();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotation.add(annotation25.getTree());

              }
                break;

              default:
                if (cnt3 >= 1) break loop3;
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                EarlyExitException eee = new EarlyExitException(3, input);
                throw eee;
            }
            cnt3++;
          } while (true);

          // AST REWRITE
          // elements: annotation
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 214:41: -> ^( LIST ( annotation )+ )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:214:44: ^( LIST ( annotation )+ )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                if (!(stream_annotation.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_annotation.hasNext()) {
                  adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 12, annotationList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotationList"

  public static class angleGroupedAnnotationList_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "angleGroupedAnnotationList"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:217:1: angleGroupedAnnotationList : ( -> ^( LIST ) | '<' ( annotation )+ '>' -> ^( LIST ( annotation )+ ) );
  public final AntlrPilarParser.angleGroupedAnnotationList_return angleGroupedAnnotationList()
      throws RecognitionException {
    AntlrPilarParser.angleGroupedAnnotationList_return retval = new AntlrPilarParser.angleGroupedAnnotationList_return();
    retval.start = input.LT(1);
    int angleGroupedAnnotationList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal26 = null;
    Token char_literal28 = null;
    AntlrPilarParser.annotation_return annotation27 = null;

    Object char_literal26_tree = null;
    Object char_literal28_tree = null;
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(
        adaptor, "rule annotation");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 13)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:218:2: ( -> ^( LIST ) | '<' ( annotation )+ '>' -> ^( LIST ( annotation )+ ) )
      int alt6 = 2;
      int LA6_0 = input.LA(1);

      if ((LA6_0 == EOF || (LA6_0 >= HEX_LIT && LA6_0 <= OCT_LIT)
          || LA6_0 == ID || (LA6_0 >= GLOBALID && LA6_0 <= LOCID)
          || (LA6_0 >= ADD_OP && LA6_0 <= RATIONAL_LIT) || LA6_0 == 169
          || (LA6_0 >= 177 && LA6_0 <= 178) || LA6_0 == 194
          || (LA6_0 >= 196 && LA6_0 <= 199) || LA6_0 == 201
          || (LA6_0 >= 204 && LA6_0 <= 208) || LA6_0 == 211 || LA6_0 == 215
          || (LA6_0 >= 217 && LA6_0 <= 221) || LA6_0 == 223)) {
        alt6 = 1;
      } else if ((LA6_0 == 167)) {
        alt6 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 6, 0, input);

        throw nvae;
      }
      switch (alt6) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:218:41: 
        {

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 218:41: -> ^( LIST )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:218:44: ^( LIST )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:219:4: '<' ( annotation )+ '>'
        {
          char_literal26 = (Token) match(
              input,
              167,
              FOLLOW_167_in_angleGroupedAnnotationList1315);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_167.add(char_literal26);

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:219:8: ( annotation )+
          int cnt5 = 0;
          loop5: do {
            int alt5 = 2;
            int LA5_0 = input.LA(1);

            if ((LA5_0 == 171)) {
              alt5 = 1;
            }

            switch (alt5) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotation
              {
                pushFollow(FOLLOW_annotation_in_angleGroupedAnnotationList1317);
                annotation27 = annotation();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotation.add(annotation27.getTree());

              }
                break;

              default:
                if (cnt5 >= 1) break loop5;
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                EarlyExitException eee = new EarlyExitException(5, input);
                throw eee;
            }
            cnt5++;
          } while (true);

          char_literal28 = (Token) match(
              input,
              168,
              FOLLOW_168_in_angleGroupedAnnotationList1320);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_168.add(char_literal28);

          // AST REWRITE
          // elements: annotation
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 219:41: -> ^( LIST ( annotation )+ )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:219:44: ^( LIST ( annotation )+ )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                if (!(stream_annotation.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_annotation.hasNext()) {
                  adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 13, angleGroupedAnnotationList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "angleGroupedAnnotationList"

  public static class parenGroupedAnnotationList_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "parenGroupedAnnotationList"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:222:1: parenGroupedAnnotationList : ( -> ^( LIST ) | '(' ( annotation )+ ')' -> ^( LIST ( annotation )+ ) );
  public final AntlrPilarParser.parenGroupedAnnotationList_return parenGroupedAnnotationList()
      throws RecognitionException {
    AntlrPilarParser.parenGroupedAnnotationList_return retval = new AntlrPilarParser.parenGroupedAnnotationList_return();
    retval.start = input.LT(1);
    int parenGroupedAnnotationList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal29 = null;
    Token char_literal31 = null;
    AntlrPilarParser.annotation_return annotation30 = null;

    Object char_literal29_tree = null;
    Object char_literal31_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(
        adaptor, "rule annotation");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 14)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:223:2: ( -> ^( LIST ) | '(' ( annotation )+ ')' -> ^( LIST ( annotation )+ ) )
      int alt8 = 2;
      int LA8_0 = input.LA(1);

      if ((LA8_0 == EOF || (LA8_0 >= HEX_LIT && LA8_0 <= OCT_LIT)
          || LA8_0 == ID || (LA8_0 >= GLOBALID && LA8_0 <= LOCID)
          || (LA8_0 >= ADD_OP && LA8_0 <= RATIONAL_LIT)
          || (LA8_0 >= 177 && LA8_0 <= 178) || LA8_0 == 194
          || (LA8_0 >= 196 && LA8_0 <= 199) || LA8_0 == 201
          || (LA8_0 >= 204 && LA8_0 <= 208) || LA8_0 == 211 || LA8_0 == 215
          || (LA8_0 >= 217 && LA8_0 <= 221) || LA8_0 == 223)) {
        alt8 = 1;
      } else if ((LA8_0 == 169)) {
        int LA8_2 = input.LA(2);

        if (((LA8_2 >= HEX_LIT && LA8_2 <= OCT_LIT)
            || (LA8_2 >= ID && LA8_2 <= GLOBALID)
            || (LA8_2 >= ADD_OP && LA8_2 <= RATIONAL_LIT)
            || (LA8_2 >= 169 && LA8_2 <= 170) || LA8_2 == 177 || LA8_2 == 204
            || LA8_2 == 208 || LA8_2 == 215 || (LA8_2 >= 217 && LA8_2 <= 221) || LA8_2 == 223)) {
          alt8 = 1;
        } else if ((LA8_2 == 171)) {
          alt8 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 8, 2, input);

          throw nvae;
        }
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 8, 0, input);

        throw nvae;
      }
      switch (alt8) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:223:41: 
        {

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 223:41: -> ^( LIST )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:223:44: ^( LIST )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:224:4: '(' ( annotation )+ ')'
        {
          char_literal29 = (Token) match(
              input,
              169,
              FOLLOW_169_in_parenGroupedAnnotationList1403);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_169.add(char_literal29);

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:224:8: ( annotation )+
          int cnt7 = 0;
          loop7: do {
            int alt7 = 2;
            int LA7_0 = input.LA(1);

            if ((LA7_0 == 171)) {
              alt7 = 1;
            }

            switch (alt7) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotation
              {
                pushFollow(FOLLOW_annotation_in_parenGroupedAnnotationList1405);
                annotation30 = annotation();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotation.add(annotation30.getTree());

              }
                break;

              default:
                if (cnt7 >= 1) break loop7;
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                EarlyExitException eee = new EarlyExitException(7, input);
                throw eee;
            }
            cnt7++;
          } while (true);

          char_literal31 = (Token) match(
              input,
              170,
              FOLLOW_170_in_parenGroupedAnnotationList1408);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_170.add(char_literal31);

          // AST REWRITE
          // elements: annotation
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 224:41: -> ^( LIST ( annotation )+ )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:224:44: ^( LIST ( annotation )+ )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                if (!(stream_annotation.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_annotation.hasNext()) {
                  adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 14, parenGroupedAnnotationList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "parenGroupedAnnotationList"

  public static class annotation_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotation"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:227:1: annotation : t= '@' ID ( annotationParams )? -> ^( ANNOTATION[$t] ID ^( OPTION ( annotationParams )? ) ) ;
  public final AntlrPilarParser.annotation_return annotation()
      throws RecognitionException {
    AntlrPilarParser.annotation_return retval = new AntlrPilarParser.annotation_return();
    retval.start = input.LT(1);
    int annotation_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID32 = null;
    AntlrPilarParser.annotationParams_return annotationParams33 = null;

    Object t_tree = null;
    Object ID32_tree = null;
    RewriteRuleTokenStream stream_171 = new RewriteRuleTokenStream(adaptor,
        "token 171");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationParams = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationParams");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 15)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:228:2: (t= '@' ID ( annotationParams )? -> ^( ANNOTATION[$t] ID ^( OPTION ( annotationParams )? ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:228:4: t= '@' ID ( annotationParams )?
      {
        t = (Token) match(input, 171, FOLLOW_171_in_annotation1447);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_171.add(t);

        ID32 = (Token) match(input, ID, FOLLOW_ID_in_annotation1449);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID32);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:228:13: ( annotationParams )?
        int alt9 = 2;
        alt9 = dfa9.predict(input);
        switch (alt9) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotationParams
          {
            pushFollow(FOLLOW_annotationParams_in_annotation1451);
            annotationParams33 = annotationParams();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_annotationParams.add(annotationParams33.getTree());

          }
            break;

        }

        // AST REWRITE
        // elements: ID, annotationParams
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 228:41: -> ^( ANNOTATION[$t] ID ^( OPTION ( annotationParams )? ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:228:44: ^( ANNOTATION[$t] ID ^( OPTION ( annotationParams )? ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ANNOTATION, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:228:64: ^( OPTION ( annotationParams )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:228:73: ( annotationParams )?
                if (stream_annotationParams.hasNext()) {
                  adaptor.addChild(root_2, stream_annotationParams.nextTree());

                }
                stream_annotationParams.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 15, annotation_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotation"

  public static class annotationParams_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotationParams"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:231:1: annotationParams : (t= '(' annotationParam ( ',' annotationParam )* ')' -> ^( LIST[$t] ( annotationParam )+ ) | exp ( ',' exp )* -> ^( LIST ( exp )+ ) );
  public final AntlrPilarParser.annotationParams_return annotationParams()
      throws RecognitionException {
    AntlrPilarParser.annotationParams_return retval = new AntlrPilarParser.annotationParams_return();
    retval.start = input.LT(1);
    int annotationParams_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal35 = null;
    Token char_literal37 = null;
    Token char_literal39 = null;
    AntlrPilarParser.annotationParam_return annotationParam34 = null;

    AntlrPilarParser.annotationParam_return annotationParam36 = null;

    AntlrPilarParser.exp_return exp38 = null;

    AntlrPilarParser.exp_return exp40 = null;

    Object t_tree = null;
    Object char_literal35_tree = null;
    Object char_literal37_tree = null;
    Object char_literal39_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationParam = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 16)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:232:2: (t= '(' annotationParam ( ',' annotationParam )* ')' -> ^( LIST[$t] ( annotationParam )+ ) | exp ( ',' exp )* -> ^( LIST ( exp )+ ) )
      int alt12 = 2;
      alt12 = dfa12.predict(input);
      switch (alt12) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:232:4: t= '(' annotationParam ( ',' annotationParam )* ')'
        {
          t = (Token) match(input, 169, FOLLOW_169_in_annotationParams1495);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_169.add(t);

          pushFollow(FOLLOW_annotationParam_in_annotationParams1497);
          annotationParam34 = annotationParam();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationParam.add(annotationParam34.getTree());
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:233:8: ( ',' annotationParam )*
          loop10: do {
            int alt10 = 2;
            int LA10_0 = input.LA(1);

            if ((LA10_0 == 172)) {
              alt10 = 1;
            }

            switch (alt10) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:233:10: ',' annotationParam
              {
                char_literal35 = (Token) match(
                    input,
                    172,
                    FOLLOW_172_in_annotationParams1508);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_172.add(char_literal35);

                pushFollow(FOLLOW_annotationParam_in_annotationParams1510);
                annotationParam36 = annotationParam();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotationParam.add(annotationParam36.getTree());

              }
                break;

              default:
                break loop10;
            }
          } while (true);

          char_literal37 = (Token) match(
              input,
              170,
              FOLLOW_170_in_annotationParams1515);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_170.add(char_literal37);

          // AST REWRITE
          // elements: annotationParam
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 233:41: -> ^( LIST[$t] ( annotationParam )+ )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:233:44: ^( LIST[$t] ( annotationParam )+ )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, t),
                    root_1);

                if (!(stream_annotationParam.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_annotationParam.hasNext()) {
                  adaptor.addChild(root_1, stream_annotationParam.nextTree());

                }
                stream_annotationParam.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:234:4: exp ( ',' exp )*
        {
          pushFollow(FOLLOW_exp_in_annotationParams1534);
          exp38 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp38.getTree());
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:234:8: ( ',' exp )*
          loop11: do {
            int alt11 = 2;
            alt11 = dfa11.predict(input);
            switch (alt11) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:234:10: ',' exp
              {
                char_literal39 = (Token) match(
                    input,
                    172,
                    FOLLOW_172_in_annotationParams1538);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_172.add(char_literal39);

                pushFollow(FOLLOW_exp_in_annotationParams1540);
                exp40 = exp();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_exp.add(exp40.getTree());

              }
                break;

              default:
                break loop11;
            }
          } while (true);

          // AST REWRITE
          // elements: exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 234:41: -> ^( LIST ( exp )+ )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:234:44: ^( LIST ( exp )+ )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                if (!(stream_exp.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_exp.hasNext()) {
                  adaptor.addChild(root_1, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 16, annotationParams_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotationParams"

  public static class annotationParam_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotationParam"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:237:1: annotationParam : (t= ID '=' ( annotation | exp ) -> ^( ANNOTATION_PARAM_IDED[$t] ^( OPTION ( ID )? ) ( annotation )? ( exp )? ) | annotation -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) annotation ) | exp -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) exp ) );
  public final AntlrPilarParser.annotationParam_return annotationParam()
      throws RecognitionException {
    AntlrPilarParser.annotationParam_return retval = new AntlrPilarParser.annotationParam_return();
    retval.start = input.LT(1);
    int annotationParam_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal41 = null;
    AntlrPilarParser.annotation_return annotation42 = null;

    AntlrPilarParser.exp_return exp43 = null;

    AntlrPilarParser.annotation_return annotation44 = null;

    AntlrPilarParser.exp_return exp45 = null;

    Object t_tree = null;
    Object char_literal41_tree = null;
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(
        adaptor, "rule annotation");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 17)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:2: (t= ID '=' ( annotation | exp ) -> ^( ANNOTATION_PARAM_IDED[$t] ^( OPTION ( ID )? ) ( annotation )? ( exp )? ) | annotation -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) annotation ) | exp -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) exp ) )
      int alt14 = 3;
      switch (input.LA(1)) {
        case ID: {
          int LA14_1 = input.LA(2);

          if ((LA14_1 == 173)) {
            alt14 = 1;
          } else if ((LA14_1 == EOF || (LA14_1 >= HEX_LIT && LA14_1 <= OCT_LIT)
              || LA14_1 == ID || LA14_1 == GLOBALID
              || (LA14_1 >= COND_OR_OP && LA14_1 <= MUL_OP)
              || (LA14_1 >= CHAR_LIT && LA14_1 <= RATIONAL_LIT)
              || (LA14_1 >= 167 && LA14_1 <= 170) || LA14_1 == 172
              || LA14_1 == 177 || LA14_1 == 202
              || (LA14_1 >= 213 && LA14_1 <= 221) || LA14_1 == 223 || LA14_1 == 225)) {
            alt14 = 3;
          } else {
            if (state.backtracking > 0) {
              state.failed = true;
              return retval;
            }
            NoViableAltException nvae = new NoViableAltException("", 14, 1,
                input);

            throw nvae;
          }
        }
          break;
        case 171: {
          alt14 = 2;
        }
          break;
        case HEX_LIT:
        case DEC_LIT:
        case OCT_LIT:
        case GLOBALID:
        case ADD_OP:
        case MUL_OP:
        case UN_OP:
        case CHAR_LIT:
        case STRING_LIT:
        case SYMBOL_LIT:
        case RAW_LIT:
        case BIN_LIT:
        case FLOAT_LIT:
        case RATIONAL_LIT:
        case 169:
        case 177:
        case 204:
        case 208:
        case 215:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 223: {
          alt14 = 3;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 14, 0, input);

          throw nvae;
      }

      switch (alt14) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:4: t= ID '=' ( annotation | exp )
        {
          t = (Token) match(input, ID, FOLLOW_ID_in_annotationParam1586);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_ID.add(t);

          char_literal41 = (Token) match(
              input,
              173,
              FOLLOW_173_in_annotationParam1588);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_173.add(char_literal41);

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:13: ( annotation | exp )
          int alt13 = 2;
          int LA13_0 = input.LA(1);

          if ((LA13_0 == 171)) {
            alt13 = 1;
          } else if (((LA13_0 >= HEX_LIT && LA13_0 <= OCT_LIT) || LA13_0 == ID
              || LA13_0 == GLOBALID
              || (LA13_0 >= ADD_OP && LA13_0 <= RATIONAL_LIT) || LA13_0 == 169
              || LA13_0 == 177 || LA13_0 == 204 || LA13_0 == 208
              || LA13_0 == 215 || (LA13_0 >= 217 && LA13_0 <= 221) || LA13_0 == 223)) {
            alt13 = 2;
          } else {
            if (state.backtracking > 0) {
              state.failed = true;
              return retval;
            }
            NoViableAltException nvae = new NoViableAltException("", 13, 0,
                input);

            throw nvae;
          }
          switch (alt13) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:15: annotation
            {
              pushFollow(FOLLOW_annotation_in_annotationParam1592);
              annotation42 = annotation();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_annotation.add(annotation42.getTree());

            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:28: exp
            {
              pushFollow(FOLLOW_exp_in_annotationParam1596);
              exp43 = exp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_exp.add(exp43.getTree());

            }
              break;

          }

          // AST REWRITE
          // elements: exp, ID, annotation
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 238:41: -> ^( ANNOTATION_PARAM_IDED[$t] ^( OPTION ( ID )? ) ( annotation )? ( exp )? )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:44: ^( ANNOTATION_PARAM_IDED[$t] ^( OPTION ( ID )? ) ( annotation )? ( exp )? )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ANNOTATION_PARAM_IDED, t),
                    root_1);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:72: ^( OPTION ( ID )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:81: ( ID )?
                  if (stream_ID.hasNext()) {
                    adaptor.addChild(root_2, stream_ID.nextNode());

                  }
                  stream_ID.reset();

                  adaptor.addChild(root_1, root_2);
                }
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:86: ( annotation )?
                if (stream_annotation.hasNext()) {
                  adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:238:98: ( exp )?
                if (stream_exp.hasNext()) {
                  adaptor.addChild(root_1, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:239:4: annotation
        {
          pushFollow(FOLLOW_annotation_in_annotationParam1630);
          annotation44 = annotation();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotation.add(annotation44.getTree());

          // AST REWRITE
          // elements: annotation
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 239:41: -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) annotation )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:239:44: ^( ANNOTATION_PARAM_IDED ^( OPTION ) annotation )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(
                    ANNOTATION_PARAM_IDED,
                    "ANNOTATION_PARAM_IDED"), root_1);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:239:68: ^( OPTION )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_annotation.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:240:4: exp
        {
          pushFollow(FOLLOW_exp_in_annotationParam1673);
          exp45 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp45.getTree());

          // AST REWRITE
          // elements: exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 240:41: -> ^( ANNOTATION_PARAM_IDED ^( OPTION ) exp )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:240:44: ^( ANNOTATION_PARAM_IDED ^( OPTION ) exp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(
                    ANNOTATION_PARAM_IDED,
                    "ANNOTATION_PARAM_IDED"), root_1);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:240:68: ^( OPTION )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_exp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 17, annotationParam_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotationParam"

  public static class packageDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "packageDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:243:1: packageDeclaration : t= 'package' name annotationList ';' ( packageElement )* -> ^( PACKAGE[$t] name annotationList ^( LIST ( packageElement )* ) ) ;
  public final AntlrPilarParser.packageDeclaration_return packageDeclaration()
      throws RecognitionException {
    AntlrPilarParser.packageDeclaration_return retval = new AntlrPilarParser.packageDeclaration_return();
    retval.start = input.LT(1);
    int packageDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal48 = null;
    AntlrPilarParser.name_return name46 = null;

    AntlrPilarParser.annotationList_return annotationList47 = null;

    AntlrPilarParser.packageElement_return packageElement49 = null;

    Object t_tree = null;
    Object char_literal48_tree = null;
    RewriteRuleTokenStream stream_174 = new RewriteRuleTokenStream(adaptor,
        "token 174");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleSubtreeStream stream_packageElement = new RewriteRuleSubtreeStream(
        adaptor, "rule packageElement");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 18)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:244:2: (t= 'package' name annotationList ';' ( packageElement )* -> ^( PACKAGE[$t] name annotationList ^( LIST ( packageElement )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:244:4: t= 'package' name annotationList ';' ( packageElement )*
      {
        t = (Token) match(input, 174, FOLLOW_174_in_packageDeclaration1731);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_174.add(t);

        pushFollow(FOLLOW_name_in_packageDeclaration1733);
        name46 = name();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_name.add(name46.getTree());
        pushFollow(FOLLOW_annotationList_in_packageDeclaration1735);
        annotationList47 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList47.getTree());
        char_literal48 = (Token) match(
            input,
            175,
            FOLLOW_175_in_packageDeclaration1737);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal48);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:245:4: ( packageElement )*
        loop15: do {
          int alt15 = 2;
          int LA15_0 = input.LA(1);

          if ((LA15_0 == 176 || (LA15_0 >= 179 && LA15_0 <= 181)
              || (LA15_0 >= 183 && LA15_0 <= 184) || (LA15_0 >= 186 && LA15_0 <= 188))) {
            alt15 = 1;
          }

          switch (alt15) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: packageElement
            {
              pushFollow(FOLLOW_packageElement_in_packageDeclaration1742);
              packageElement49 = packageElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_packageElement.add(packageElement49.getTree());

            }
              break;

            default:
              break loop15;
          }
        } while (true);

        // AST REWRITE
        // elements: packageElement, annotationList, name
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 245:41: -> ^( PACKAGE[$t] name annotationList ^( LIST ( packageElement )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:245:44: ^( PACKAGE[$t] name annotationList ^( LIST ( packageElement )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(PACKAGE, t),
                  root_1);

              adaptor.addChild(root_1, stream_name.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:245:78: ^( LIST ( packageElement )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:245:85: ( packageElement )*
                while (stream_packageElement.hasNext()) {
                  adaptor.addChild(root_2, stream_packageElement.nextTree());

                }
                stream_packageElement.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 18, packageDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "packageDeclaration"

  public static class packageElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "packageElement"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:248:1: packageElement : ( constDeclaration | enumDeclaration | typealiasDeclaration | recordDeclaration | globalVarsDeclaration | procedureDeclaration | virtualSetDeclaration | funexpDeclaration | extDeclaration );
  public final AntlrPilarParser.packageElement_return packageElement()
      throws RecognitionException {
    AntlrPilarParser.packageElement_return retval = new AntlrPilarParser.packageElement_return();
    retval.start = input.LT(1);
    int packageElement_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.constDeclaration_return constDeclaration50 = null;

    AntlrPilarParser.enumDeclaration_return enumDeclaration51 = null;

    AntlrPilarParser.typealiasDeclaration_return typealiasDeclaration52 = null;

    AntlrPilarParser.recordDeclaration_return recordDeclaration53 = null;

    AntlrPilarParser.globalVarsDeclaration_return globalVarsDeclaration54 = null;

    AntlrPilarParser.procedureDeclaration_return procedureDeclaration55 = null;

    AntlrPilarParser.virtualSetDeclaration_return virtualSetDeclaration56 = null;

    AntlrPilarParser.funexpDeclaration_return funexpDeclaration57 = null;

    AntlrPilarParser.extDeclaration_return extDeclaration58 = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 19)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:249:2: ( constDeclaration | enumDeclaration | typealiasDeclaration | recordDeclaration | globalVarsDeclaration | procedureDeclaration | virtualSetDeclaration | funexpDeclaration | extDeclaration )
      int alt16 = 9;
      switch (input.LA(1)) {
        case 176: {
          alt16 = 1;
        }
          break;
        case 179: {
          alt16 = 2;
        }
          break;
        case 180: {
          alt16 = 3;
        }
          break;
        case 181: {
          alt16 = 4;
        }
          break;
        case 183: {
          alt16 = 5;
        }
          break;
        case 184: {
          alt16 = 6;
        }
          break;
        case 186: {
          alt16 = 7;
        }
          break;
        case 187: {
          alt16 = 8;
        }
          break;
        case 188: {
          alt16 = 9;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 16, 0, input);

          throw nvae;
      }

      switch (alt16) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:249:4: constDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_constDeclaration_in_packageElement1794);
          constDeclaration50 = constDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, constDeclaration50.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:250:4: enumDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_enumDeclaration_in_packageElement1799);
          enumDeclaration51 = enumDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, enumDeclaration51.getTree());

        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:251:4: typealiasDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_typealiasDeclaration_in_packageElement1804);
          typealiasDeclaration52 = typealiasDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, typealiasDeclaration52.getTree());

        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:252:4: recordDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_recordDeclaration_in_packageElement1809);
          recordDeclaration53 = recordDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, recordDeclaration53.getTree());

        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:253:4: globalVarsDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_globalVarsDeclaration_in_packageElement1814);
          globalVarsDeclaration54 = globalVarsDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, globalVarsDeclaration54.getTree());

        }
          break;
        case 6:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:254:4: procedureDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_procedureDeclaration_in_packageElement1819);
          procedureDeclaration55 = procedureDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, procedureDeclaration55.getTree());

        }
          break;
        case 7:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:255:4: virtualSetDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_virtualSetDeclaration_in_packageElement1824);
          virtualSetDeclaration56 = virtualSetDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, virtualSetDeclaration56.getTree());

        }
          break;
        case 8:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:256:4: funexpDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_funexpDeclaration_in_packageElement1829);
          funexpDeclaration57 = funexpDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, funexpDeclaration57.getTree());

        }
          break;
        case 9:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:257:4: extDeclaration
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_extDeclaration_in_packageElement1834);
          extDeclaration58 = extDeclaration();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, extDeclaration58.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 19, packageElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "packageElement"

  public static class constDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "constDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:260:1: constDeclaration : t= 'const' ID annotationList '{' ( constElement )+ '}' -> ^( CONST[$t] ID annotationList ^( LIST ( constElement )+ ) ) ;
  public final AntlrPilarParser.constDeclaration_return constDeclaration()
      throws RecognitionException {
    AntlrPilarParser.constDeclaration_return retval = new AntlrPilarParser.constDeclaration_return();
    retval.start = input.LT(1);
    int constDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID59 = null;
    Token char_literal61 = null;
    Token char_literal63 = null;
    AntlrPilarParser.annotationList_return annotationList60 = null;

    AntlrPilarParser.constElement_return constElement62 = null;

    Object t_tree = null;
    Object ID59_tree = null;
    Object char_literal61_tree = null;
    Object char_literal63_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleTokenStream stream_176 = new RewriteRuleTokenStream(adaptor,
        "token 176");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_constElement = new RewriteRuleSubtreeStream(
        adaptor, "rule constElement");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 20)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:261:2: (t= 'const' ID annotationList '{' ( constElement )+ '}' -> ^( CONST[$t] ID annotationList ^( LIST ( constElement )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:261:4: t= 'const' ID annotationList '{' ( constElement )+ '}'
      {
        t = (Token) match(input, 176, FOLLOW_176_in_constDeclaration1847);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_176.add(t);

        ID59 = (Token) match(input, ID, FOLLOW_ID_in_constDeclaration1849);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID59);

        pushFollow(FOLLOW_annotationList_in_constDeclaration1851);
        annotationList60 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList60.getTree());
        char_literal61 = (Token) match(
            input,
            177,
            FOLLOW_177_in_constDeclaration1856);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(char_literal61);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:262:8: ( constElement )+
        int cnt17 = 0;
        loop17: do {
          int alt17 = 2;
          int LA17_0 = input.LA(1);

          if ((LA17_0 == ID)) {
            alt17 = 1;
          }

          switch (alt17) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: constElement
            {
              pushFollow(FOLLOW_constElement_in_constDeclaration1858);
              constElement62 = constElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_constElement.add(constElement62.getTree());

            }
              break;

            default:
              if (cnt17 >= 1) break loop17;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(17, input);
              throw eee;
          }
          cnt17++;
        } while (true);

        char_literal63 = (Token) match(
            input,
            178,
            FOLLOW_178_in_constDeclaration1861);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal63);

        // AST REWRITE
        // elements: annotationList, ID, constElement
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 262:41: -> ^( CONST[$t] ID annotationList ^( LIST ( constElement )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:262:44: ^( CONST[$t] ID annotationList ^( LIST ( constElement )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(CONST, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:262:74: ^( LIST ( constElement )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_constElement.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_constElement.hasNext()) {
                  adaptor.addChild(root_2, stream_constElement.nextTree());

                }
                stream_constElement.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 20, constDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "constDeclaration"

  public static class constElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "constElement"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:265:1: constElement : t= ID '=' exp annotationList ';' -> ^( CONST_ELEMENT[$t] ID exp annotationList ) ;
  public final AntlrPilarParser.constElement_return constElement()
      throws RecognitionException {
    AntlrPilarParser.constElement_return retval = new AntlrPilarParser.constElement_return();
    retval.start = input.LT(1);
    int constElement_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal64 = null;
    Token char_literal67 = null;
    AntlrPilarParser.exp_return exp65 = null;

    AntlrPilarParser.annotationList_return annotationList66 = null;

    Object t_tree = null;
    Object char_literal64_tree = null;
    Object char_literal67_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 21)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:266:2: (t= ID '=' exp annotationList ';' -> ^( CONST_ELEMENT[$t] ID exp annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:266:4: t= ID '=' exp annotationList ';'
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_constElement1907);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        char_literal64 = (Token) match(
            input,
            173,
            FOLLOW_173_in_constElement1909);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal64);

        pushFollow(FOLLOW_exp_in_constElement1914);
        exp65 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp65.getTree());
        pushFollow(FOLLOW_annotationList_in_constElement1916);
        annotationList66 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList66.getTree());
        char_literal67 = (Token) match(
            input,
            175,
            FOLLOW_175_in_constElement1918);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal67);

        // AST REWRITE
        // elements: exp, annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 267:41: -> ^( CONST_ELEMENT[$t] ID exp annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:267:44: ^( CONST_ELEMENT[$t] ID exp annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(CONST_ELEMENT, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 21, constElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "constElement"

  public static class enumDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "enumDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:270:1: enumDeclaration : t= 'enum' ID annotationList '{' enumElement ( ',' enumElement )* '}' -> ^( ENUM[$t] ID annotationList ^( LIST ( enumElement )+ ) ) ;
  public final AntlrPilarParser.enumDeclaration_return enumDeclaration()
      throws RecognitionException {
    AntlrPilarParser.enumDeclaration_return retval = new AntlrPilarParser.enumDeclaration_return();
    retval.start = input.LT(1);
    int enumDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID68 = null;
    Token char_literal70 = null;
    Token char_literal72 = null;
    Token char_literal74 = null;
    AntlrPilarParser.annotationList_return annotationList69 = null;

    AntlrPilarParser.enumElement_return enumElement71 = null;

    AntlrPilarParser.enumElement_return enumElement73 = null;

    Object t_tree = null;
    Object ID68_tree = null;
    Object char_literal70_tree = null;
    Object char_literal72_tree = null;
    Object char_literal74_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_179 = new RewriteRuleTokenStream(adaptor,
        "token 179");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_enumElement = new RewriteRuleSubtreeStream(
        adaptor, "rule enumElement");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 22)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:271:2: (t= 'enum' ID annotationList '{' enumElement ( ',' enumElement )* '}' -> ^( ENUM[$t] ID annotationList ^( LIST ( enumElement )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:271:4: t= 'enum' ID annotationList '{' enumElement ( ',' enumElement )* '}'
      {
        t = (Token) match(input, 179, FOLLOW_179_in_enumDeclaration1959);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_179.add(t);

        ID68 = (Token) match(input, ID, FOLLOW_ID_in_enumDeclaration1961);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID68);

        pushFollow(FOLLOW_annotationList_in_enumDeclaration1963);
        annotationList69 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList69.getTree());
        char_literal70 = (Token) match(
            input,
            177,
            FOLLOW_177_in_enumDeclaration1968);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(char_literal70);

        pushFollow(FOLLOW_enumElement_in_enumDeclaration1970);
        enumElement71 = enumElement();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_enumElement.add(enumElement71.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:273:4: ( ',' enumElement )*
        loop18: do {
          int alt18 = 2;
          int LA18_0 = input.LA(1);

          if ((LA18_0 == 172)) {
            alt18 = 1;
          }

          switch (alt18) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:273:6: ',' enumElement
            {
              char_literal72 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_enumDeclaration1977);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal72);

              pushFollow(FOLLOW_enumElement_in_enumDeclaration1979);
              enumElement73 = enumElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_enumElement.add(enumElement73.getTree());

            }
              break;

            default:
              break loop18;
          }
        } while (true);

        char_literal74 = (Token) match(
            input,
            178,
            FOLLOW_178_in_enumDeclaration1984);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal74);

        // AST REWRITE
        // elements: annotationList, ID, enumElement
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 273:41: -> ^( ENUM[$t] ID annotationList ^( LIST ( enumElement )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:273:44: ^( ENUM[$t] ID annotationList ^( LIST ( enumElement )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ENUM, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:273:73: ^( LIST ( enumElement )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_enumElement.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_enumElement.hasNext()) {
                  adaptor.addChild(root_2, stream_enumElement.nextTree());

                }
                stream_enumElement.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 22, enumDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "enumDeclaration"

  public static class enumElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "enumElement"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:276:1: enumElement : t= ID annotationList -> ^( ENUM_ELEMENT[$t] ID annotationList ) ;
  public final AntlrPilarParser.enumElement_return enumElement()
      throws RecognitionException {
    AntlrPilarParser.enumElement_return retval = new AntlrPilarParser.enumElement_return();
    retval.start = input.LT(1);
    int enumElement_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.annotationList_return annotationList75 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 23)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:277:2: (t= ID annotationList -> ^( ENUM_ELEMENT[$t] ID annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:277:4: t= ID annotationList
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_enumElement2027);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        pushFollow(FOLLOW_annotationList_in_enumElement2029);
        annotationList75 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList75.getTree());

        // AST REWRITE
        // elements: ID, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 277:41: -> ^( ENUM_ELEMENT[$t] ID annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:277:44: ^( ENUM_ELEMENT[$t] ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ENUM_ELEMENT, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 23, enumElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "enumElement"

  public static class typealiasDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typealiasDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:280:1: typealiasDeclaration : t= 'typealias' type ID annotationList ';' -> ^( TYPEALIAS[$t] type ID annotationList ) ;
  public final AntlrPilarParser.typealiasDeclaration_return typealiasDeclaration()
      throws RecognitionException {
    AntlrPilarParser.typealiasDeclaration_return retval = new AntlrPilarParser.typealiasDeclaration_return();
    retval.start = input.LT(1);
    int typealiasDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID77 = null;
    Token char_literal79 = null;
    AntlrPilarParser.type_return type76 = null;

    AntlrPilarParser.annotationList_return annotationList78 = null;

    Object t_tree = null;
    Object ID77_tree = null;
    Object char_literal79_tree = null;
    RewriteRuleTokenStream stream_180 = new RewriteRuleTokenStream(adaptor,
        "token 180");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 24)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:281:2: (t= 'typealias' type ID annotationList ';' -> ^( TYPEALIAS[$t] type ID annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:281:4: t= 'typealias' type ID annotationList ';'
      {
        t = (Token) match(input, 180, FOLLOW_180_in_typealiasDeclaration2070);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_180.add(t);

        pushFollow(FOLLOW_type_in_typealiasDeclaration2072);
        type76 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type76.getTree());
        ID77 = (Token) match(input, ID, FOLLOW_ID_in_typealiasDeclaration2074);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID77);

        pushFollow(FOLLOW_annotationList_in_typealiasDeclaration2082);
        annotationList78 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList78.getTree());
        char_literal79 = (Token) match(
            input,
            175,
            FOLLOW_175_in_typealiasDeclaration2084);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal79);

        // AST REWRITE
        // elements: type, annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 282:41: -> ^( TYPEALIAS[$t] type ID annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:282:44: ^( TYPEALIAS[$t] type ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPEALIAS, t),
                  root_1);

              adaptor.addChild(root_1, stream_type.nextTree());
              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 24, typealiasDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typealiasDeclaration"

  public static class recordDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "recordDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:285:1: recordDeclaration : t= 'record' ID ( typeVarTuple )? annotationList ( extendClause )? '{' ( attribute )* '}' -> ^( RECORD[$t] ID ^( OPTION ( typeVarTuple )? ) annotationList ^( OPTION ( extendClause )? ) ^( LIST ( attribute )* ) ) ;
  public final AntlrPilarParser.recordDeclaration_return recordDeclaration()
      throws RecognitionException {
    AntlrPilarParser.recordDeclaration_return retval = new AntlrPilarParser.recordDeclaration_return();
    retval.start = input.LT(1);
    int recordDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID80 = null;
    Token char_literal84 = null;
    Token char_literal86 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple81 = null;

    AntlrPilarParser.annotationList_return annotationList82 = null;

    AntlrPilarParser.extendClause_return extendClause83 = null;

    AntlrPilarParser.attribute_return attribute85 = null;

    Object t_tree = null;
    Object ID80_tree = null;
    Object char_literal84_tree = null;
    Object char_literal86_tree = null;
    RewriteRuleTokenStream stream_181 = new RewriteRuleTokenStream(adaptor,
        "token 181");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleSubtreeStream stream_extendClause = new RewriteRuleSubtreeStream(
        adaptor, "rule extendClause");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_attribute = new RewriteRuleSubtreeStream(
        adaptor, "rule attribute");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 25)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:286:2: (t= 'record' ID ( typeVarTuple )? annotationList ( extendClause )? '{' ( attribute )* '}' -> ^( RECORD[$t] ID ^( OPTION ( typeVarTuple )? ) annotationList ^( OPTION ( extendClause )? ) ^( LIST ( attribute )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:286:4: t= 'record' ID ( typeVarTuple )? annotationList ( extendClause )? '{' ( attribute )* '}'
      {
        t = (Token) match(input, 181, FOLLOW_181_in_recordDeclaration2127);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_181.add(t);

        ID80 = (Token) match(input, ID, FOLLOW_ID_in_recordDeclaration2132);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID80);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:287:7: ( typeVarTuple )?
        int alt19 = 2;
        int LA19_0 = input.LA(1);

        if ((LA19_0 == 167)) {
          alt19 = 1;
        }
        switch (alt19) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_recordDeclaration2134);
            typeVarTuple81 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple81.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_recordDeclaration2137);
        annotationList82 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList82.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:288:4: ( extendClause )?
        int alt20 = 2;
        int LA20_0 = input.LA(1);

        if ((LA20_0 == 182)) {
          alt20 = 1;
        }
        switch (alt20) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: extendClause
          {
            pushFollow(FOLLOW_extendClause_in_recordDeclaration2142);
            extendClause83 = extendClause();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_extendClause.add(extendClause83.getTree());

          }
            break;

        }

        char_literal84 = (Token) match(
            input,
            177,
            FOLLOW_177_in_recordDeclaration2148);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(char_literal84);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:289:8: ( attribute )*
        loop21: do {
          int alt21 = 2;
          int LA21_0 = input.LA(1);

          if (((LA21_0 >= ID && LA21_0 <= TYPEVARID) || LA21_0 == 169 || LA21_0 == 177)) {
            alt21 = 1;
          }

          switch (alt21) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: attribute
            {
              pushFollow(FOLLOW_attribute_in_recordDeclaration2150);
              attribute85 = attribute();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_attribute.add(attribute85.getTree());

            }
              break;

            default:
              break loop21;
          }
        } while (true);

        char_literal86 = (Token) match(
            input,
            178,
            FOLLOW_178_in_recordDeclaration2153);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal86);

        // AST REWRITE
        // elements: annotationList, extendClause, attribute, ID, typeVarTuple
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 289:41: -> ^( RECORD[$t] ID ^( OPTION ( typeVarTuple )? ) annotationList ^( OPTION ( extendClause )? ) ^( LIST ( attribute )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:289:44: ^( RECORD[$t] ID ^( OPTION ( typeVarTuple )? ) annotationList ^( OPTION ( extendClause )? ) ^( LIST ( attribute )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(RECORD, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:289:60: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:289:69: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:289:99: ^( OPTION ( extendClause )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:289:108: ( extendClause )?
                if (stream_extendClause.hasNext()) {
                  adaptor.addChild(root_2, stream_extendClause.nextTree());

                }
                stream_extendClause.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:289:123: ^( LIST ( attribute )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:289:130: ( attribute )*
                while (stream_attribute.hasNext()) {
                  adaptor.addChild(root_2, stream_attribute.nextTree());

                }
                stream_attribute.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 25, recordDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "recordDeclaration"

  public static class typeVarTuple_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeVarTuple"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:292:1: typeVarTuple : t= '<' typeVar ( ',' typeVar )* '>' -> ^( TYPEVAR_TUPLE[$t] ^( LIST ( typeVar )+ ) ) ;
  public final AntlrPilarParser.typeVarTuple_return typeVarTuple()
      throws RecognitionException {
    AntlrPilarParser.typeVarTuple_return retval = new AntlrPilarParser.typeVarTuple_return();
    retval.start = input.LT(1);
    int typeVarTuple_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal88 = null;
    Token char_literal90 = null;
    AntlrPilarParser.typeVar_return typeVar87 = null;

    AntlrPilarParser.typeVar_return typeVar89 = null;

    Object t_tree = null;
    Object char_literal88_tree = null;
    Object char_literal90_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_typeVar = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVar");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 26)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:293:2: (t= '<' typeVar ( ',' typeVar )* '>' -> ^( TYPEVAR_TUPLE[$t] ^( LIST ( typeVar )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:293:4: t= '<' typeVar ( ',' typeVar )* '>'
      {
        t = (Token) match(input, 167, FOLLOW_167_in_typeVarTuple2217);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_167.add(t);

        pushFollow(FOLLOW_typeVar_in_typeVarTuple2219);
        typeVar87 = typeVar();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_typeVar.add(typeVar87.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:293:18: ( ',' typeVar )*
        loop22: do {
          int alt22 = 2;
          int LA22_0 = input.LA(1);

          if ((LA22_0 == 172)) {
            alt22 = 1;
          }

          switch (alt22) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:293:20: ',' typeVar
            {
              char_literal88 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_typeVarTuple2223);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal88);

              pushFollow(FOLLOW_typeVar_in_typeVarTuple2225);
              typeVar89 = typeVar();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeVar.add(typeVar89.getTree());

            }
              break;

            default:
              break loop22;
          }
        } while (true);

        char_literal90 = (Token) match(
            input,
            168,
            FOLLOW_168_in_typeVarTuple2230);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_168.add(char_literal90);

        // AST REWRITE
        // elements: typeVar
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 293:41: -> ^( TYPEVAR_TUPLE[$t] ^( LIST ( typeVar )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:293:44: ^( TYPEVAR_TUPLE[$t] ^( LIST ( typeVar )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPEVAR_TUPLE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:293:64: ^( LIST ( typeVar )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_typeVar.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_typeVar.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVar.nextTree());

                }
                stream_typeVar.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 26, typeVarTuple_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeVarTuple"

  public static class typeVar_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeVar"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:296:1: typeVar : t= TYPEVARID annotationList -> ^( TYPEVAR[$t] TYPEVARID annotationList ) ;
  public final AntlrPilarParser.typeVar_return typeVar()
      throws RecognitionException {
    AntlrPilarParser.typeVar_return retval = new AntlrPilarParser.typeVar_return();
    retval.start = input.LT(1);
    int typeVar_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.annotationList_return annotationList91 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_TYPEVARID = new RewriteRuleTokenStream(
        adaptor, "token TYPEVARID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 27)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:297:2: (t= TYPEVARID annotationList -> ^( TYPEVAR[$t] TYPEVARID annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:297:4: t= TYPEVARID annotationList
      {
        t = (Token) match(input, TYPEVARID, FOLLOW_TYPEVARID_in_typeVar2259);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_TYPEVARID.add(t);

        pushFollow(FOLLOW_annotationList_in_typeVar2261);
        annotationList91 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList91.getTree());

        // AST REWRITE
        // elements: TYPEVARID, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 297:41: -> ^( TYPEVAR[$t] TYPEVARID annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:297:44: ^( TYPEVAR[$t] TYPEVARID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPEVAR, t),
                  root_1);

              adaptor.addChild(root_1, stream_TYPEVARID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 27, typeVar_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeVar"

  public static class extendClause_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extendClause"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:300:1: extendClause : t= 'extends' extendClauseElement ( ',' extendClauseElement )* -> ^( LIST[$t] ( extendClauseElement )+ ) ;
  public final AntlrPilarParser.extendClause_return extendClause()
      throws RecognitionException {
    AntlrPilarParser.extendClause_return retval = new AntlrPilarParser.extendClause_return();
    retval.start = input.LT(1);
    int extendClause_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal93 = null;
    AntlrPilarParser.extendClauseElement_return extendClauseElement92 = null;

    AntlrPilarParser.extendClauseElement_return extendClauseElement94 = null;

    Object t_tree = null;
    Object char_literal93_tree = null;
    RewriteRuleTokenStream stream_182 = new RewriteRuleTokenStream(adaptor,
        "token 182");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleSubtreeStream stream_extendClauseElement = new RewriteRuleSubtreeStream(
        adaptor, "rule extendClauseElement");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 28)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:301:2: (t= 'extends' extendClauseElement ( ',' extendClauseElement )* -> ^( LIST[$t] ( extendClauseElement )+ ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:301:4: t= 'extends' extendClauseElement ( ',' extendClauseElement )*
      {
        t = (Token) match(input, 182, FOLLOW_182_in_extendClause2295);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_182.add(t);

        pushFollow(FOLLOW_extendClauseElement_in_extendClause2297);
        extendClauseElement92 = extendClauseElement();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_extendClauseElement.add(extendClauseElement92.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:302:4: ( ',' extendClauseElement )*
        loop23: do {
          int alt23 = 2;
          int LA23_0 = input.LA(1);

          if ((LA23_0 == 172)) {
            alt23 = 1;
          }

          switch (alt23) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:302:6: ',' extendClauseElement
            {
              char_literal93 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_extendClause2304);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal93);

              pushFollow(FOLLOW_extendClauseElement_in_extendClause2306);
              extendClauseElement94 = extendClauseElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_extendClauseElement.add(extendClauseElement94.getTree());

            }
              break;

            default:
              break loop23;
          }
        } while (true);

        // AST REWRITE
        // elements: extendClauseElement
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 302:41: -> ^( LIST[$t] ( extendClauseElement )+ )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:302:44: ^( LIST[$t] ( extendClauseElement )+ )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LIST, t),
                  root_1);

              if (!(stream_extendClauseElement.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_extendClauseElement.hasNext()) {
                adaptor.addChild(root_1, stream_extendClauseElement.nextTree());

              }
              stream_extendClauseElement.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 28, extendClause_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extendClause"

  public static class extendClauseElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extendClauseElement"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:305:1: extendClauseElement : name ( typeTuple )? annotationList -> ^( EXTENDCLAUSE_ELEMENT name ^( OPTION ( typeTuple )? ) annotationList ) ;
  public final AntlrPilarParser.extendClauseElement_return extendClauseElement()
      throws RecognitionException {
    AntlrPilarParser.extendClauseElement_return retval = new AntlrPilarParser.extendClauseElement_return();
    retval.start = input.LT(1);
    int extendClauseElement_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.name_return name95 = null;

    AntlrPilarParser.typeTuple_return typeTuple96 = null;

    AntlrPilarParser.annotationList_return annotationList97 = null;

    RewriteRuleSubtreeStream stream_typeTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeTuple");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 29)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:306:2: ( name ( typeTuple )? annotationList -> ^( EXTENDCLAUSE_ELEMENT name ^( OPTION ( typeTuple )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:306:4: name ( typeTuple )? annotationList
      {
        pushFollow(FOLLOW_name_in_extendClauseElement2338);
        name95 = name();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_name.add(name95.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:306:9: ( typeTuple )?
        int alt24 = 2;
        int LA24_0 = input.LA(1);

        if ((LA24_0 == 167)) {
          alt24 = 1;
        }
        switch (alt24) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeTuple
          {
            pushFollow(FOLLOW_typeTuple_in_extendClauseElement2340);
            typeTuple96 = typeTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeTuple.add(typeTuple96.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_extendClauseElement2343);
        annotationList97 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList97.getTree());

        // AST REWRITE
        // elements: typeTuple, annotationList, name
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 306:41: -> ^( EXTENDCLAUSE_ELEMENT name ^( OPTION ( typeTuple )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:306:44: ^( EXTENDCLAUSE_ELEMENT name ^( OPTION ( typeTuple )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(
                  EXTENDCLAUSE_ELEMENT,
                  "EXTENDCLAUSE_ELEMENT"), root_1);

              adaptor.addChild(root_1, stream_name.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:306:72: ^( OPTION ( typeTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:306:81: ( typeTuple )?
                if (stream_typeTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeTuple.nextTree());

                }
                stream_typeTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 29, extendClauseElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extendClauseElement"

  public static class typeTuple_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeTuple"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:309:1: typeTuple : t= '<' type ( ',' type )* '>' -> ^( TYPE_TUPLE[$t] ^( LIST ( type )+ ) ) ;
  public final AntlrPilarParser.typeTuple_return typeTuple()
      throws RecognitionException {
    AntlrPilarParser.typeTuple_return retval = new AntlrPilarParser.typeTuple_return();
    retval.start = input.LT(1);
    int typeTuple_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal99 = null;
    Token char_literal101 = null;
    AntlrPilarParser.type_return type98 = null;

    AntlrPilarParser.type_return type100 = null;

    Object t_tree = null;
    Object char_literal99_tree = null;
    Object char_literal101_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 30)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:310:2: (t= '<' type ( ',' type )* '>' -> ^( TYPE_TUPLE[$t] ^( LIST ( type )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:310:4: t= '<' type ( ',' type )* '>'
      {
        t = (Token) match(input, 167, FOLLOW_167_in_typeTuple2380);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_167.add(t);

        pushFollow(FOLLOW_type_in_typeTuple2382);
        type98 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type98.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:310:15: ( ',' type )*
        loop25: do {
          int alt25 = 2;
          int LA25_0 = input.LA(1);

          if ((LA25_0 == 172)) {
            alt25 = 1;
          }

          switch (alt25) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:310:17: ',' type
            {
              char_literal99 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_typeTuple2386);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal99);

              pushFollow(FOLLOW_type_in_typeTuple2388);
              type100 = type();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_type.add(type100.getTree());

            }
              break;

            default:
              break loop25;
          }
        } while (true);

        char_literal101 = (Token) match(input, 168, FOLLOW_168_in_typeTuple2393);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_168.add(char_literal101);

        // AST REWRITE
        // elements: type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 310:41: -> ^( TYPE_TUPLE[$t] ^( LIST ( type )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:310:44: ^( TYPE_TUPLE[$t] ^( LIST ( type )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPE_TUPLE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:310:61: ^( LIST ( type )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_type.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 30, typeTuple_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeTuple"

  public static class attribute_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "attribute"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:313:1: attribute : ( type )? attributeFragment ( ',' attributeFragment )* ';' -> ^( ATTRIBUTE ^( OPTION ( type )? ) ^( LIST ( attributeFragment )+ ) ) ;
  public final AntlrPilarParser.attribute_return attribute()
      throws RecognitionException {
    AntlrPilarParser.attribute_return retval = new AntlrPilarParser.attribute_return();
    retval.start = input.LT(1);
    int attribute_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal104 = null;
    Token char_literal106 = null;
    AntlrPilarParser.type_return type102 = null;

    AntlrPilarParser.attributeFragment_return attributeFragment103 = null;

    AntlrPilarParser.attributeFragment_return attributeFragment105 = null;

    Object char_literal104_tree = null;
    Object char_literal106_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    RewriteRuleSubtreeStream stream_attributeFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule attributeFragment");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 31)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:314:2: ( ( type )? attributeFragment ( ',' attributeFragment )* ';' -> ^( ATTRIBUTE ^( OPTION ( type )? ) ^( LIST ( attributeFragment )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:314:4: ( type )? attributeFragment ( ',' attributeFragment )* ';'
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:314:4: ( type )?
        int alt26 = 2;
        int LA26_0 = input.LA(1);

        if ((LA26_0 == TYPEVARID || LA26_0 == 169 || LA26_0 == 177)) {
          alt26 = 1;
        } else if ((LA26_0 == ID)) {
          int LA26_2 = input.LA(2);

          if ((LA26_2 == ID || LA26_2 == 167 || LA26_2 == 177 || LA26_2 == 202
              || (LA26_2 >= 215 && LA26_2 <= 216) || LA26_2 == 225)) {
            alt26 = 1;
          }
        }
        switch (alt26) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_attribute2426);
            type102 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type102.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_attributeFragment_in_attribute2429);
        attributeFragment103 = attributeFragment();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_attributeFragment.add(attributeFragment103.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:315:4: ( ',' attributeFragment )*
        loop27: do {
          int alt27 = 2;
          int LA27_0 = input.LA(1);

          if ((LA27_0 == 172)) {
            alt27 = 1;
          }

          switch (alt27) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:315:6: ',' attributeFragment
            {
              char_literal104 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_attribute2436);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal104);

              pushFollow(FOLLOW_attributeFragment_in_attribute2438);
              attributeFragment105 = attributeFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_attributeFragment.add(attributeFragment105.getTree());

            }
              break;

            default:
              break loop27;
          }
        } while (true);

        char_literal106 = (Token) match(input, 175, FOLLOW_175_in_attribute2443);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal106);

        // AST REWRITE
        // elements: attributeFragment, type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 315:41: -> ^( ATTRIBUTE ^( OPTION ( type )? ) ^( LIST ( attributeFragment )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:315:44: ^( ATTRIBUTE ^( OPTION ( type )? ) ^( LIST ( attributeFragment )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ATTRIBUTE, "ATTRIBUTE"),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:315:56: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:315:65: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:315:72: ^( LIST ( attributeFragment )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_attributeFragment.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_attributeFragment.hasNext()) {
                  adaptor.addChild(root_2, stream_attributeFragment.nextTree());

                }
                stream_attributeFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 31, attribute_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "attribute"

  public static class attributeFragment_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "attributeFragment"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:318:1: attributeFragment : t= ID annotationList ( '=' name )? -> ^( ATTRIBUTE_FRAGMENT[$t] ID annotationList ^( OPTION ( name )? ) ) ;
  public final AntlrPilarParser.attributeFragment_return attributeFragment()
      throws RecognitionException {
    AntlrPilarParser.attributeFragment_return retval = new AntlrPilarParser.attributeFragment_return();
    retval.start = input.LT(1);
    int attributeFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal108 = null;
    AntlrPilarParser.annotationList_return annotationList107 = null;

    AntlrPilarParser.name_return name109 = null;

    Object t_tree = null;
    Object char_literal108_tree = null;
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 32)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:319:2: (t= ID annotationList ( '=' name )? -> ^( ATTRIBUTE_FRAGMENT[$t] ID annotationList ^( OPTION ( name )? ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:319:4: t= ID annotationList ( '=' name )?
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_attributeFragment2482);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        pushFollow(FOLLOW_annotationList_in_attributeFragment2484);
        annotationList107 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList107.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:319:24: ( '=' name )?
        int alt28 = 2;
        int LA28_0 = input.LA(1);

        if ((LA28_0 == 173)) {
          alt28 = 1;
        }
        switch (alt28) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:319:26: '=' name
          {
            char_literal108 = (Token) match(
                input,
                173,
                FOLLOW_173_in_attributeFragment2488);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_173.add(char_literal108);

            pushFollow(FOLLOW_name_in_attributeFragment2490);
            name109 = name();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_name.add(name109.getTree());

          }
            break;

        }

        // AST REWRITE
        // elements: name, annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 319:41: -> ^( ATTRIBUTE_FRAGMENT[$t] ID annotationList ^( OPTION ( name )? ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:319:44: ^( ATTRIBUTE_FRAGMENT[$t] ID annotationList ^( OPTION ( name )? ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ATTRIBUTE_FRAGMENT, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:319:87: ^( OPTION ( name )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:319:96: ( name )?
                if (stream_name.hasNext()) {
                  adaptor.addChild(root_2, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 32, attributeFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "attributeFragment"

  public static class globalVarsDeclaration_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "globalVarsDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:322:1: globalVarsDeclaration : 'global' ( globalVarDeclaration )+ -> ( globalVarDeclaration )+ ;
  public final AntlrPilarParser.globalVarsDeclaration_return globalVarsDeclaration()
      throws RecognitionException {
    AntlrPilarParser.globalVarsDeclaration_return retval = new AntlrPilarParser.globalVarsDeclaration_return();
    retval.start = input.LT(1);
    int globalVarsDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token string_literal110 = null;
    AntlrPilarParser.globalVarDeclaration_return globalVarDeclaration111 = null;

    Object string_literal110_tree = null;
    RewriteRuleTokenStream stream_183 = new RewriteRuleTokenStream(adaptor,
        "token 183");
    RewriteRuleSubtreeStream stream_globalVarDeclaration = new RewriteRuleSubtreeStream(
        adaptor, "rule globalVarDeclaration");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 33)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:323:2: ( 'global' ( globalVarDeclaration )+ -> ( globalVarDeclaration )+ )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:323:4: 'global' ( globalVarDeclaration )+
      {
        string_literal110 = (Token) match(
            input,
            183,
            FOLLOW_183_in_globalVarsDeclaration2525);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_183.add(string_literal110);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:323:13: ( globalVarDeclaration )+
        int cnt29 = 0;
        loop29: do {
          int alt29 = 2;
          int LA29_0 = input.LA(1);

          if (((LA29_0 >= ID && LA29_0 <= GLOBALID) || LA29_0 == 169 || LA29_0 == 177)) {
            alt29 = 1;
          }

          switch (alt29) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: globalVarDeclaration
            {
              pushFollow(FOLLOW_globalVarDeclaration_in_globalVarsDeclaration2527);
              globalVarDeclaration111 = globalVarDeclaration();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_globalVarDeclaration.add(globalVarDeclaration111
                    .getTree());

            }
              break;

            default:
              if (cnt29 >= 1) break loop29;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(29, input);
              throw eee;
          }
          cnt29++;
        } while (true);

        // AST REWRITE
        // elements: globalVarDeclaration
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 323:41: -> ( globalVarDeclaration )+
          {
            if (!(stream_globalVarDeclaration.hasNext())) {
              throw new RewriteEarlyExitException();
            }
            while (stream_globalVarDeclaration.hasNext()) {
              adaptor.addChild(root_0, stream_globalVarDeclaration.nextTree());

            }
            stream_globalVarDeclaration.reset();

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 33, globalVarsDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "globalVarsDeclaration"

  public static class globalVarDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "globalVarDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:326:1: globalVarDeclaration : ( type )? globalVarFragment ( ',' globalVarFragment )* ';' -> ^( GLOBAL ^( OPTION ( type )? ) ^( LIST ( globalVarFragment )+ ) ) ;
  public final AntlrPilarParser.globalVarDeclaration_return globalVarDeclaration()
      throws RecognitionException {
    AntlrPilarParser.globalVarDeclaration_return retval = new AntlrPilarParser.globalVarDeclaration_return();
    retval.start = input.LT(1);
    int globalVarDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal114 = null;
    Token char_literal116 = null;
    AntlrPilarParser.type_return type112 = null;

    AntlrPilarParser.globalVarFragment_return globalVarFragment113 = null;

    AntlrPilarParser.globalVarFragment_return globalVarFragment115 = null;

    Object char_literal114_tree = null;
    Object char_literal116_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleSubtreeStream stream_globalVarFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule globalVarFragment");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 34)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:327:2: ( ( type )? globalVarFragment ( ',' globalVarFragment )* ';' -> ^( GLOBAL ^( OPTION ( type )? ) ^( LIST ( globalVarFragment )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:327:4: ( type )? globalVarFragment ( ',' globalVarFragment )* ';'
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:327:4: ( type )?
        int alt30 = 2;
        int LA30_0 = input.LA(1);

        if (((LA30_0 >= ID && LA30_0 <= TYPEVARID) || LA30_0 == 169 || LA30_0 == 177)) {
          alt30 = 1;
        }
        switch (alt30) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_globalVarDeclaration2550);
            type112 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type112.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_globalVarFragment_in_globalVarDeclaration2553);
        globalVarFragment113 = globalVarFragment();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_globalVarFragment.add(globalVarFragment113.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:328:4: ( ',' globalVarFragment )*
        loop31: do {
          int alt31 = 2;
          int LA31_0 = input.LA(1);

          if ((LA31_0 == 172)) {
            alt31 = 1;
          }

          switch (alt31) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:328:6: ',' globalVarFragment
            {
              char_literal114 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_globalVarDeclaration2560);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal114);

              pushFollow(FOLLOW_globalVarFragment_in_globalVarDeclaration2562);
              globalVarFragment115 = globalVarFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_globalVarFragment.add(globalVarFragment115.getTree());

            }
              break;

            default:
              break loop31;
          }
        } while (true);

        char_literal116 = (Token) match(
            input,
            175,
            FOLLOW_175_in_globalVarDeclaration2567);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal116);

        // AST REWRITE
        // elements: type, globalVarFragment
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 328:41: -> ^( GLOBAL ^( OPTION ( type )? ) ^( LIST ( globalVarFragment )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:328:44: ^( GLOBAL ^( OPTION ( type )? ) ^( LIST ( globalVarFragment )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(GLOBAL, "GLOBAL"),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:328:53: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:328:62: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:328:69: ^( LIST ( globalVarFragment )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_globalVarFragment.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_globalVarFragment.hasNext()) {
                  adaptor.addChild(root_2, stream_globalVarFragment.nextTree());

                }
                stream_globalVarFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 34, globalVarDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "globalVarDeclaration"

  public static class globalVarFragment_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "globalVarFragment"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:331:1: globalVarFragment : t= GLOBALID annotationList -> ^( GLOBAL_FRAGMENT[$t] GLOBALID annotationList ) ;
  public final AntlrPilarParser.globalVarFragment_return globalVarFragment()
      throws RecognitionException {
    AntlrPilarParser.globalVarFragment_return retval = new AntlrPilarParser.globalVarFragment_return();
    retval.start = input.LT(1);
    int globalVarFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.annotationList_return annotationList117 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_GLOBALID = new RewriteRuleTokenStream(
        adaptor, "token GLOBALID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 35)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:332:2: (t= GLOBALID annotationList -> ^( GLOBAL_FRAGMENT[$t] GLOBALID annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:332:4: t= GLOBALID annotationList
      {
        t = (Token) match(
            input,
            GLOBALID,
            FOLLOW_GLOBALID_in_globalVarFragment2606);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_GLOBALID.add(t);

        pushFollow(FOLLOW_annotationList_in_globalVarFragment2608);
        annotationList117 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList117.getTree());

        // AST REWRITE
        // elements: annotationList, GLOBALID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 332:41: -> ^( GLOBAL_FRAGMENT[$t] GLOBALID annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:332:44: ^( GLOBAL_FRAGMENT[$t] GLOBALID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(GLOBAL_FRAGMENT, t),
                  root_1);

              adaptor.addChild(root_1, stream_GLOBALID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 35, globalVarFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "globalVarFragment"

  public static class procedureDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "procedureDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:335:1: procedureDeclaration : t= 'procedure' ( typeVarTuple )? ( type )? p= ID ( '(' ( paramVariable | ( paramList ( ',' paramVariable )? )? ) ')' )? annotationList body -> ^( PROCEDURE[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) $p ^( LIST ( paramList )? ( paramVariable )? ) annotationList body ) ;
  public final AntlrPilarParser.procedureDeclaration_return procedureDeclaration()
      throws RecognitionException {
    AntlrPilarParser.procedureDeclaration_return retval = new AntlrPilarParser.procedureDeclaration_return();
    retval.start = input.LT(1);
    int procedureDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token p = null;
    Token char_literal120 = null;
    Token char_literal123 = null;
    Token char_literal125 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple118 = null;

    AntlrPilarParser.type_return type119 = null;

    AntlrPilarParser.paramVariable_return paramVariable121 = null;

    AntlrPilarParser.paramList_return paramList122 = null;

    AntlrPilarParser.paramVariable_return paramVariable124 = null;

    AntlrPilarParser.annotationList_return annotationList126 = null;

    AntlrPilarParser.body_return body127 = null;

    Object t_tree = null;
    Object p_tree = null;
    Object char_literal120_tree = null;
    Object char_literal123_tree = null;
    Object char_literal125_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_184 = new RewriteRuleTokenStream(adaptor,
        "token 184");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleSubtreeStream stream_body = new RewriteRuleSubtreeStream(
        adaptor, "rule body");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_paramList = new RewriteRuleSubtreeStream(
        adaptor, "rule paramList");
    RewriteRuleSubtreeStream stream_paramVariable = new RewriteRuleSubtreeStream(
        adaptor, "rule paramVariable");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 36)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:336:2: (t= 'procedure' ( typeVarTuple )? ( type )? p= ID ( '(' ( paramVariable | ( paramList ( ',' paramVariable )? )? ) ')' )? annotationList body -> ^( PROCEDURE[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) $p ^( LIST ( paramList )? ( paramVariable )? ) annotationList body ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:336:4: t= 'procedure' ( typeVarTuple )? ( type )? p= ID ( '(' ( paramVariable | ( paramList ( ',' paramVariable )? )? ) ')' )? annotationList body
      {
        t = (Token) match(input, 184, FOLLOW_184_in_procedureDeclaration2644);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_184.add(t);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:336:18: ( typeVarTuple )?
        int alt32 = 2;
        int LA32_0 = input.LA(1);

        if ((LA32_0 == 167)) {
          alt32 = 1;
        }
        switch (alt32) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_procedureDeclaration2646);
            typeVarTuple118 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple118.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:337:4: ( type )?
        int alt33 = 2;
        int LA33_0 = input.LA(1);

        if ((LA33_0 == TYPEVARID || LA33_0 == 169 || LA33_0 == 177)) {
          alt33 = 1;
        } else if ((LA33_0 == ID)) {
          int LA33_2 = input.LA(2);

          if ((LA33_2 == ID || LA33_2 == 167 || LA33_2 == 202
              || (LA33_2 >= 215 && LA33_2 <= 216) || LA33_2 == 225)) {
            alt33 = 1;
          } else if ((LA33_2 == 177)) {
            int LA33_3 = input.LA(3);

            if ((LA33_3 == 178)) {
              alt33 = 1;
            }
          }
        }
        switch (alt33) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_procedureDeclaration2652);
            type119 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type119.getTree());

          }
            break;

        }

        p = (Token) match(input, ID, FOLLOW_ID_in_procedureDeclaration2661);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(p);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:339:4: ( '(' ( paramVariable | ( paramList ( ',' paramVariable )? )? ) ')' )?
        int alt37 = 2;
        int LA37_0 = input.LA(1);

        if ((LA37_0 == 169)) {
          alt37 = 1;
        }
        switch (alt37) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:339:6: '(' ( paramVariable | ( paramList ( ',' paramVariable )? )? ) ')'
          {
            char_literal120 = (Token) match(
                input,
                169,
                FOLLOW_169_in_procedureDeclaration2668);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_169.add(char_literal120);

            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:340:6: ( paramVariable | ( paramList ( ',' paramVariable )? )? )
            int alt36 = 2;
            switch (input.LA(1)) {
              case TYPEVARID: {
                int LA36_1 = input.LA(2);

                if ((synpred42_AntlrPilar())) {
                  alt36 = 1;
                } else if ((true)) {
                  alt36 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 36,
                      1, input);

                  throw nvae;
                }
              }
                break;
              case ID: {
                int LA36_2 = input.LA(2);

                if ((synpred42_AntlrPilar())) {
                  alt36 = 1;
                } else if ((true)) {
                  alt36 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 36,
                      2, input);

                  throw nvae;
                }
              }
                break;
              case 169: {
                int LA36_3 = input.LA(2);

                if ((synpred42_AntlrPilar())) {
                  alt36 = 1;
                } else if ((true)) {
                  alt36 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 36,
                      3, input);

                  throw nvae;
                }
              }
                break;
              case 177: {
                int LA36_4 = input.LA(2);

                if ((synpred42_AntlrPilar())) {
                  alt36 = 1;
                } else if ((true)) {
                  alt36 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 36,
                      4, input);

                  throw nvae;
                }
              }
                break;
              case 170: {
                alt36 = 2;
              }
                break;
              default:
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 36, 0,
                    input);

                throw nvae;
            }

            switch (alt36) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:340:8: paramVariable
              {
                pushFollow(FOLLOW_paramVariable_in_procedureDeclaration2678);
                paramVariable121 = paramVariable();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_paramVariable.add(paramVariable121.getTree());

              }
                break;
              case 2:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:341:8: ( paramList ( ',' paramVariable )? )?
              {
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:341:8: ( paramList ( ',' paramVariable )? )?
                int alt35 = 2;
                int LA35_0 = input.LA(1);

                if (((LA35_0 >= ID && LA35_0 <= TYPEVARID) || LA35_0 == 169 || LA35_0 == 177)) {
                  alt35 = 1;
                }
                switch (alt35) {
                  case 1:
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:341:10: paramList ( ',' paramVariable )?
                  {
                    pushFollow(FOLLOW_paramList_in_procedureDeclaration2689);
                    paramList122 = paramList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_paramList.add(paramList122.getTree());
                    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:342:12: ( ',' paramVariable )?
                    int alt34 = 2;
                    int LA34_0 = input.LA(1);

                    if ((LA34_0 == 172)) {
                      alt34 = 1;
                    }
                    switch (alt34) {
                      case 1:
                      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:342:14: ',' paramVariable
                      {
                        char_literal123 = (Token) match(
                            input,
                            172,
                            FOLLOW_172_in_procedureDeclaration2705);
                        if (state.failed) return retval;
                        if (state.backtracking == 0)
                          stream_172.add(char_literal123);

                        pushFollow(FOLLOW_paramVariable_in_procedureDeclaration2707);
                        paramVariable124 = paramVariable();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0)
                          stream_paramVariable.add(paramVariable124.getTree());

                      }
                        break;

                    }

                  }
                    break;

                }

              }
                break;

            }

            char_literal125 = (Token) match(
                input,
                170,
                FOLLOW_170_in_procedureDeclaration2727);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_170.add(char_literal125);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_procedureDeclaration2736);
        annotationList126 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList126.getTree());
        pushFollow(FOLLOW_body_in_procedureDeclaration2741);
        body127 = body();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_body.add(body127.getTree());

        // AST REWRITE
        // elements: type, body, paramVariable, annotationList, p, typeVarTuple, paramList
        // token labels: p
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleTokenStream stream_p = new RewriteRuleTokenStream(adaptor,
              "token p", p);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 346:41: -> ^( PROCEDURE[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) $p ^( LIST ( paramList )? ( paramVariable )? ) annotationList body )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:346:44: ^( PROCEDURE[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) $p ^( LIST ( paramList )? ( paramVariable )? ) annotationList body )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(PROCEDURE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:346:60: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:346:69: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:346:84: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:346:93: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_p.nextNode());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:346:103: ^( LIST ( paramList )? ( paramVariable )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:346:110: ( paramList )?
                if (stream_paramList.hasNext()) {
                  adaptor.addChild(root_2, stream_paramList.nextTree());

                }
                stream_paramList.reset();
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:346:121: ( paramVariable )?
                if (stream_paramVariable.hasNext()) {
                  adaptor.addChild(root_2, stream_paramVariable.nextTree());

                }
                stream_paramVariable.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_body.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 36, procedureDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "procedureDeclaration"

  public static class paramList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "paramList"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:349:1: paramList : param ( ',' param )* -> ( param )+ ;
  public final AntlrPilarParser.paramList_return paramList()
      throws RecognitionException {
    AntlrPilarParser.paramList_return retval = new AntlrPilarParser.paramList_return();
    retval.start = input.LT(1);
    int paramList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal129 = null;
    AntlrPilarParser.param_return param128 = null;

    AntlrPilarParser.param_return param130 = null;

    Object char_literal129_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleSubtreeStream stream_param = new RewriteRuleSubtreeStream(
        adaptor, "rule param");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 37)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:350:2: ( param ( ',' param )* -> ( param )+ )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:350:4: param ( ',' param )*
      {
        pushFollow(FOLLOW_param_in_paramList2823);
        param128 = param();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_param.add(param128.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:350:10: ( ',' param )*
        loop38: do {
          int alt38 = 2;
          int LA38_0 = input.LA(1);

          if ((LA38_0 == 172)) {
            int LA38_1 = input.LA(2);

            if ((synpred46_AntlrPilar())) {
              alt38 = 1;
            }

          }

          switch (alt38) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:350:12: ',' param
            {
              char_literal129 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_paramList2827);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal129);

              pushFollow(FOLLOW_param_in_paramList2829);
              param130 = param();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_param.add(param130.getTree());

            }
              break;

            default:
              break loop38;
          }
        } while (true);

        // AST REWRITE
        // elements: param
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 350:41: -> ( param )+
          {
            if (!(stream_param.hasNext())) {
              throw new RewriteEarlyExitException();
            }
            while (stream_param.hasNext()) {
              adaptor.addChild(root_0, stream_param.nextTree());

            }
            stream_param.reset();

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 37, paramList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "paramList"

  public static class param_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "param"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:353:1: param : ( type )? ID annotationList -> ^( PARAM ^( OPTION ( type )? ) ID annotationList ) ;
  public final AntlrPilarParser.param_return param()
      throws RecognitionException {
    AntlrPilarParser.param_return retval = new AntlrPilarParser.param_return();
    retval.start = input.LT(1);
    int param_StartIndex = input.index();
    Object root_0 = null;

    Token ID132 = null;
    AntlrPilarParser.type_return type131 = null;

    AntlrPilarParser.annotationList_return annotationList133 = null;

    Object ID132_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 38)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:354:2: ( ( type )? ID annotationList -> ^( PARAM ^( OPTION ( type )? ) ID annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:354:4: ( type )? ID annotationList
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:354:4: ( type )?
        int alt39 = 2;
        int LA39_0 = input.LA(1);

        if ((LA39_0 == TYPEVARID || LA39_0 == 169 || LA39_0 == 177)) {
          alt39 = 1;
        } else if ((LA39_0 == ID)) {
          int LA39_2 = input.LA(2);

          if ((LA39_2 == ID || LA39_2 == 167 || LA39_2 == 177 || LA39_2 == 202
              || (LA39_2 >= 215 && LA39_2 <= 216) || LA39_2 == 225)) {
            alt39 = 1;
          }
        }
        switch (alt39) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_param2864);
            type131 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type131.getTree());

          }
            break;

        }

        ID132 = (Token) match(input, ID, FOLLOW_ID_in_param2867);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID132);

        pushFollow(FOLLOW_annotationList_in_param2869);
        annotationList133 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList133.getTree());

        // AST REWRITE
        // elements: type, annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 354:41: -> ^( PARAM ^( OPTION ( type )? ) ID annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:354:44: ^( PARAM ^( OPTION ( type )? ) ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(PARAM, "PARAM"),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:354:52: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:354:61: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 38, param_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "param"

  public static class paramVariable_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "paramVariable"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:357:1: paramVariable : ( type )? ID '...' annotationList -> ^( PARAM_VARIABLE ^( OPTION ( type )? ) ID annotationList ) ;
  public final AntlrPilarParser.paramVariable_return paramVariable()
      throws RecognitionException {
    AntlrPilarParser.paramVariable_return retval = new AntlrPilarParser.paramVariable_return();
    retval.start = input.LT(1);
    int paramVariable_StartIndex = input.index();
    Object root_0 = null;

    Token ID135 = null;
    Token string_literal136 = null;
    AntlrPilarParser.type_return type134 = null;

    AntlrPilarParser.annotationList_return annotationList137 = null;

    Object ID135_tree = null;
    Object string_literal136_tree = null;
    RewriteRuleTokenStream stream_185 = new RewriteRuleTokenStream(adaptor,
        "token 185");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 39)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:358:2: ( ( type )? ID '...' annotationList -> ^( PARAM_VARIABLE ^( OPTION ( type )? ) ID annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:358:4: ( type )? ID '...' annotationList
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:358:4: ( type )?
        int alt40 = 2;
        int LA40_0 = input.LA(1);

        if ((LA40_0 == TYPEVARID || LA40_0 == 169 || LA40_0 == 177)) {
          alt40 = 1;
        } else if ((LA40_0 == ID)) {
          int LA40_2 = input.LA(2);

          if ((LA40_2 == ID || LA40_2 == 167 || LA40_2 == 177 || LA40_2 == 202
              || (LA40_2 >= 215 && LA40_2 <= 216) || LA40_2 == 225)) {
            alt40 = 1;
          }
        }
        switch (alt40) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_paramVariable2910);
            type134 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type134.getTree());

          }
            break;

        }

        ID135 = (Token) match(input, ID, FOLLOW_ID_in_paramVariable2913);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID135);

        string_literal136 = (Token) match(
            input,
            185,
            FOLLOW_185_in_paramVariable2915);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_185.add(string_literal136);

        pushFollow(FOLLOW_annotationList_in_paramVariable2917);
        annotationList137 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList137.getTree());

        // AST REWRITE
        // elements: type, annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 358:41: -> ^( PARAM_VARIABLE ^( OPTION ( type )? ) ID annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:358:44: ^( PARAM_VARIABLE ^( OPTION ( type )? ) ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(PARAM_VARIABLE, "PARAM_VARIABLE"),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:358:61: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:358:70: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 39, paramVariable_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "paramVariable"

  public static class virtualSetDeclaration_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "virtualSetDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:361:1: virtualSetDeclaration : t= 'vset' ID annotationList '{' vsetElement ( ',' vsetElement )* '}' -> ^( VSET[$t] ID annotationList ^( LIST ( vsetElement )+ ) ) ;
  public final AntlrPilarParser.virtualSetDeclaration_return virtualSetDeclaration()
      throws RecognitionException {
    AntlrPilarParser.virtualSetDeclaration_return retval = new AntlrPilarParser.virtualSetDeclaration_return();
    retval.start = input.LT(1);
    int virtualSetDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID138 = null;
    Token char_literal140 = null;
    Token char_literal142 = null;
    Token char_literal144 = null;
    AntlrPilarParser.annotationList_return annotationList139 = null;

    AntlrPilarParser.vsetElement_return vsetElement141 = null;

    AntlrPilarParser.vsetElement_return vsetElement143 = null;

    Object t_tree = null;
    Object ID138_tree = null;
    Object char_literal140_tree = null;
    Object char_literal142_tree = null;
    Object char_literal144_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_186 = new RewriteRuleTokenStream(adaptor,
        "token 186");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_vsetElement = new RewriteRuleSubtreeStream(
        adaptor, "rule vsetElement");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 40)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:362:2: (t= 'vset' ID annotationList '{' vsetElement ( ',' vsetElement )* '}' -> ^( VSET[$t] ID annotationList ^( LIST ( vsetElement )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:362:4: t= 'vset' ID annotationList '{' vsetElement ( ',' vsetElement )* '}'
      {
        t = (Token) match(input, 186, FOLLOW_186_in_virtualSetDeclaration2955);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_186.add(t);

        ID138 = (Token) match(input, ID, FOLLOW_ID_in_virtualSetDeclaration2957);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID138);

        pushFollow(FOLLOW_annotationList_in_virtualSetDeclaration2959);
        annotationList139 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList139.getTree());
        char_literal140 = (Token) match(
            input,
            177,
            FOLLOW_177_in_virtualSetDeclaration2964);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(char_literal140);

        pushFollow(FOLLOW_vsetElement_in_virtualSetDeclaration2969);
        vsetElement141 = vsetElement();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_vsetElement.add(vsetElement141.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:364:16: ( ',' vsetElement )*
        loop41: do {
          int alt41 = 2;
          int LA41_0 = input.LA(1);

          if ((LA41_0 == 172)) {
            alt41 = 1;
          }

          switch (alt41) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:364:18: ',' vsetElement
            {
              char_literal142 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_virtualSetDeclaration2973);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal142);

              pushFollow(FOLLOW_vsetElement_in_virtualSetDeclaration2975);
              vsetElement143 = vsetElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_vsetElement.add(vsetElement143.getTree());

            }
              break;

            default:
              break loop41;
          }
        } while (true);

        char_literal144 = (Token) match(
            input,
            178,
            FOLLOW_178_in_virtualSetDeclaration2983);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal144);

        // AST REWRITE
        // elements: annotationList, vsetElement, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 365:41: -> ^( VSET[$t] ID annotationList ^( LIST ( vsetElement )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:365:44: ^( VSET[$t] ID annotationList ^( LIST ( vsetElement )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(VSET, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:365:73: ^( LIST ( vsetElement )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_vsetElement.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_vsetElement.hasNext()) {
                  adaptor.addChild(root_2, stream_vsetElement.nextTree());

                }
                stream_vsetElement.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 40, virtualSetDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "virtualSetDeclaration"

  public static class vsetElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "vsetElement"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:368:1: vsetElement : name annotationList -> ^( VSET_ELEMENT name annotationList ) ;
  public final AntlrPilarParser.vsetElement_return vsetElement()
      throws RecognitionException {
    AntlrPilarParser.vsetElement_return retval = new AntlrPilarParser.vsetElement_return();
    retval.start = input.LT(1);
    int vsetElement_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.name_return name145 = null;

    AntlrPilarParser.annotationList_return annotationList146 = null;

    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 41)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:369:2: ( name annotationList -> ^( VSET_ELEMENT name annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:369:4: name annotationList
      {
        pushFollow(FOLLOW_name_in_vsetElement3045);
        name145 = name();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_name.add(name145.getTree());
        pushFollow(FOLLOW_annotationList_in_vsetElement3047);
        annotationList146 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList146.getTree());

        // AST REWRITE
        // elements: name, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 369:41: -> ^( VSET_ELEMENT name annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:369:44: ^( VSET_ELEMENT name annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(VSET_ELEMENT, "VSET_ELEMENT"),
                  root_1);

              adaptor.addChild(root_1, stream_name.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 41, vsetElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "vsetElement"

  public static class funexpDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "funexpDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:372:1: funexpDeclaration : t= 'fun' ID annotationList '=' funExp -> ^( FUN[$t] ID annotationList funExp ) ;
  public final AntlrPilarParser.funexpDeclaration_return funexpDeclaration()
      throws RecognitionException {
    AntlrPilarParser.funexpDeclaration_return retval = new AntlrPilarParser.funexpDeclaration_return();
    retval.start = input.LT(1);
    int funexpDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID147 = null;
    Token char_literal149 = null;
    AntlrPilarParser.annotationList_return annotationList148 = null;

    AntlrPilarParser.funExp_return funExp150 = null;

    Object t_tree = null;
    Object ID147_tree = null;
    Object char_literal149_tree = null;
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_187 = new RewriteRuleTokenStream(adaptor,
        "token 187");
    RewriteRuleSubtreeStream stream_funExp = new RewriteRuleSubtreeStream(
        adaptor, "rule funExp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 42)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:373:2: (t= 'fun' ID annotationList '=' funExp -> ^( FUN[$t] ID annotationList funExp ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:373:4: t= 'fun' ID annotationList '=' funExp
      {
        t = (Token) match(input, 187, FOLLOW_187_in_funexpDeclaration3087);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_187.add(t);

        ID147 = (Token) match(input, ID, FOLLOW_ID_in_funexpDeclaration3089);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID147);

        pushFollow(FOLLOW_annotationList_in_funexpDeclaration3091);
        annotationList148 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList148.getTree());
        char_literal149 = (Token) match(
            input,
            173,
            FOLLOW_173_in_funexpDeclaration3093);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal149);

        pushFollow(FOLLOW_funExp_in_funexpDeclaration3098);
        funExp150 = funExp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_funExp.add(funExp150.getTree());

        // AST REWRITE
        // elements: funExp, annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 374:41: -> ^( FUN[$t] ID annotationList funExp )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:374:44: ^( FUN[$t] ID annotationList funExp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(FUN, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_funExp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 42, funexpDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "funexpDeclaration"

  public static class extDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:377:1: extDeclaration : t= 'extension' ( typeVarTuple )? ID annotationList '{' ( extElement )+ '}' -> ^( EXTENSION[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( LIST ( extElement )+ ) ) ;
  public final AntlrPilarParser.extDeclaration_return extDeclaration()
      throws RecognitionException {
    AntlrPilarParser.extDeclaration_return retval = new AntlrPilarParser.extDeclaration_return();
    retval.start = input.LT(1);
    int extDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID152 = null;
    Token char_literal154 = null;
    Token char_literal156 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple151 = null;

    AntlrPilarParser.annotationList_return annotationList153 = null;

    AntlrPilarParser.extElement_return extElement155 = null;

    Object t_tree = null;
    Object ID152_tree = null;
    Object char_literal154_tree = null;
    Object char_literal156_tree = null;
    RewriteRuleTokenStream stream_188 = new RewriteRuleTokenStream(adaptor,
        "token 188");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_extElement = new RewriteRuleSubtreeStream(
        adaptor, "rule extElement");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 43)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:378:2: (t= 'extension' ( typeVarTuple )? ID annotationList '{' ( extElement )+ '}' -> ^( EXTENSION[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( LIST ( extElement )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:378:4: t= 'extension' ( typeVarTuple )? ID annotationList '{' ( extElement )+ '}'
      {
        t = (Token) match(input, 188, FOLLOW_188_in_extDeclaration3154);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_188.add(t);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:378:18: ( typeVarTuple )?
        int alt42 = 2;
        int LA42_0 = input.LA(1);

        if ((LA42_0 == 167)) {
          alt42 = 1;
        }
        switch (alt42) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_extDeclaration3156);
            typeVarTuple151 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple151.getTree());

          }
            break;

        }

        ID152 = (Token) match(input, ID, FOLLOW_ID_in_extDeclaration3162);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID152);

        pushFollow(FOLLOW_annotationList_in_extDeclaration3164);
        annotationList153 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList153.getTree());
        char_literal154 = (Token) match(
            input,
            177,
            FOLLOW_177_in_extDeclaration3169);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(char_literal154);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:380:8: ( extElement )+
        int cnt43 = 0;
        loop43: do {
          int alt43 = 2;
          int LA43_0 = input.LA(1);

          if (((LA43_0 >= 189 && LA43_0 <= 192))) {
            alt43 = 1;
          }

          switch (alt43) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: extElement
            {
              pushFollow(FOLLOW_extElement_in_extDeclaration3171);
              extElement155 = extElement();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_extElement.add(extElement155.getTree());

            }
              break;

            default:
              if (cnt43 >= 1) break loop43;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(43, input);
              throw eee;
          }
          cnt43++;
        } while (true);

        char_literal156 = (Token) match(
            input,
            178,
            FOLLOW_178_in_extDeclaration3174);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal156);

        // AST REWRITE
        // elements: annotationList, typeVarTuple, ID, extElement
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 380:41: -> ^( EXTENSION[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( LIST ( extElement )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:380:44: ^( EXTENSION[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( LIST ( extElement )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(EXTENSION, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:380:60: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:380:69: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:380:102: ^( LIST ( extElement )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_extElement.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_extElement.hasNext()) {
                  adaptor.addChild(root_2, stream_extElement.nextTree());

                }
                stream_extElement.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 43, extDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extDeclaration"

  public static class extElement_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extElement"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:383:1: extElement : ( typeExtension | actionExtension | expExtension | procExtension );
  public final AntlrPilarParser.extElement_return extElement()
      throws RecognitionException {
    AntlrPilarParser.extElement_return retval = new AntlrPilarParser.extElement_return();
    retval.start = input.LT(1);
    int extElement_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.typeExtension_return typeExtension157 = null;

    AntlrPilarParser.actionExtension_return actionExtension158 = null;

    AntlrPilarParser.expExtension_return expExtension159 = null;

    AntlrPilarParser.procExtension_return procExtension160 = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 44)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:384:2: ( typeExtension | actionExtension | expExtension | procExtension )
      int alt44 = 4;
      switch (input.LA(1)) {
        case 189: {
          alt44 = 1;
        }
          break;
        case 190: {
          alt44 = 2;
        }
          break;
        case 191: {
          alt44 = 3;
        }
          break;
        case 192: {
          alt44 = 4;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 44, 0, input);

          throw nvae;
      }

      switch (alt44) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:384:4: typeExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_typeExtension_in_extElement3228);
          typeExtension157 = typeExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, typeExtension157.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:385:4: actionExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_actionExtension_in_extElement3234);
          actionExtension158 = actionExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, actionExtension158.getTree());

        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:386:4: expExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_expExtension_in_extElement3240);
          expExtension159 = expExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, expExtension159.getTree());

        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:387:4: procExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_procExtension_in_extElement3245);
          procExtension160 = procExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, procExtension160.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 44, extElement_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extElement"

  public static class typeExtension_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeExtension"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:390:1: typeExtension : t= 'typedef' ( typeVarTuple )? ID annotationList ( ';' | ( extendClause )? '{' ( typeExtensionMember )* '}' ) -> ^( TYPE_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( OPTION ( extendClause )? ) ^( LIST ( typeExtensionMember )* ) ) ;
  public final AntlrPilarParser.typeExtension_return typeExtension()
      throws RecognitionException {
    AntlrPilarParser.typeExtension_return retval = new AntlrPilarParser.typeExtension_return();
    retval.start = input.LT(1);
    int typeExtension_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID162 = null;
    Token char_literal164 = null;
    Token char_literal166 = null;
    Token char_literal168 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple161 = null;

    AntlrPilarParser.annotationList_return annotationList163 = null;

    AntlrPilarParser.extendClause_return extendClause165 = null;

    AntlrPilarParser.typeExtensionMember_return typeExtensionMember167 = null;

    Object t_tree = null;
    Object ID162_tree = null;
    Object char_literal164_tree = null;
    Object char_literal166_tree = null;
    Object char_literal168_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleTokenStream stream_189 = new RewriteRuleTokenStream(adaptor,
        "token 189");
    RewriteRuleSubtreeStream stream_typeExtensionMember = new RewriteRuleSubtreeStream(
        adaptor, "rule typeExtensionMember");
    RewriteRuleSubtreeStream stream_extendClause = new RewriteRuleSubtreeStream(
        adaptor, "rule extendClause");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 45)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:391:2: (t= 'typedef' ( typeVarTuple )? ID annotationList ( ';' | ( extendClause )? '{' ( typeExtensionMember )* '}' ) -> ^( TYPE_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( OPTION ( extendClause )? ) ^( LIST ( typeExtensionMember )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:391:4: t= 'typedef' ( typeVarTuple )? ID annotationList ( ';' | ( extendClause )? '{' ( typeExtensionMember )* '}' )
      {
        t = (Token) match(input, 189, FOLLOW_189_in_typeExtension3258);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_189.add(t);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:391:16: ( typeVarTuple )?
        int alt45 = 2;
        int LA45_0 = input.LA(1);

        if ((LA45_0 == 167)) {
          alt45 = 1;
        }
        switch (alt45) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_typeExtension3260);
            typeVarTuple161 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple161.getTree());

          }
            break;

        }

        ID162 = (Token) match(input, ID, FOLLOW_ID_in_typeExtension3266);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID162);

        pushFollow(FOLLOW_annotationList_in_typeExtension3268);
        annotationList163 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList163.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:393:4: ( ';' | ( extendClause )? '{' ( typeExtensionMember )* '}' )
        int alt48 = 2;
        int LA48_0 = input.LA(1);

        if ((LA48_0 == 175)) {
          alt48 = 1;
        } else if ((LA48_0 == 177 || LA48_0 == 182)) {
          alt48 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 48, 0, input);

          throw nvae;
        }
        switch (alt48) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:393:6: ';'
          {
            char_literal164 = (Token) match(
                input,
                175,
                FOLLOW_175_in_typeExtension3275);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_175.add(char_literal164);

          }
            break;
          case 2:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:394:6: ( extendClause )? '{' ( typeExtensionMember )* '}'
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:394:6: ( extendClause )?
            int alt46 = 2;
            int LA46_0 = input.LA(1);

            if ((LA46_0 == 182)) {
              alt46 = 1;
            }
            switch (alt46) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: extendClause
              {
                pushFollow(FOLLOW_extendClause_in_typeExtension3282);
                extendClause165 = extendClause();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_extendClause.add(extendClause165.getTree());

              }
                break;

            }

            char_literal166 = (Token) match(
                input,
                177,
                FOLLOW_177_in_typeExtension3290);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_177.add(char_literal166);

            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:395:10: ( typeExtensionMember )*
            loop47: do {
              int alt47 = 2;
              int LA47_0 = input.LA(1);

              if ((LA47_0 == ID || (LA47_0 >= 190 && LA47_0 <= 192))) {
                alt47 = 1;
              }

              switch (alt47) {
                case 1:
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeExtensionMember
                {
                  pushFollow(FOLLOW_typeExtensionMember_in_typeExtension3292);
                  typeExtensionMember167 = typeExtensionMember();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_typeExtensionMember.add(typeExtensionMember167
                        .getTree());

                }
                  break;

                default:
                  break loop47;
              }
            } while (true);

            char_literal168 = (Token) match(
                input,
                178,
                FOLLOW_178_in_typeExtension3295);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_178.add(char_literal168);

          }
            break;

        }

        // AST REWRITE
        // elements: annotationList, ID, extendClause, typeExtensionMember, typeVarTuple
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 395:41: -> ^( TYPE_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( OPTION ( extendClause )? ) ^( LIST ( typeExtensionMember )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:395:44: ^( TYPE_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID annotationList ^( OPTION ( extendClause )? ) ^( LIST ( typeExtensionMember )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPE_EXT, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:395:59: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:395:68: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:395:101: ^( OPTION ( extendClause )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:395:110: ( extendClause )?
                if (stream_extendClause.hasNext()) {
                  adaptor.addChild(root_2, stream_extendClause.nextTree());

                }
                stream_extendClause.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:395:126: ^( LIST ( typeExtensionMember )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:395:133: ( typeExtensionMember )*
                while (stream_typeExtensionMember.hasNext()) {
                  adaptor.addChild(
                      root_2,
                      stream_typeExtensionMember.nextTree());

                }
                stream_typeExtensionMember.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 45, typeExtension_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeExtension"

  public static class typeExtensionMember_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeExtensionMember"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:398:1: typeExtensionMember : ( typeExtensionAttributeBinding | actionExtension | expExtension | procExtension );
  public final AntlrPilarParser.typeExtensionMember_return typeExtensionMember()
      throws RecognitionException {
    AntlrPilarParser.typeExtensionMember_return retval = new AntlrPilarParser.typeExtensionMember_return();
    retval.start = input.LT(1);
    int typeExtensionMember_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.typeExtensionAttributeBinding_return typeExtensionAttributeBinding169 = null;

    AntlrPilarParser.actionExtension_return actionExtension170 = null;

    AntlrPilarParser.expExtension_return expExtension171 = null;

    AntlrPilarParser.procExtension_return procExtension172 = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 46)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:399:2: ( typeExtensionAttributeBinding | actionExtension | expExtension | procExtension )
      int alt49 = 4;
      switch (input.LA(1)) {
        case ID: {
          alt49 = 1;
        }
          break;
        case 190: {
          alt49 = 2;
        }
          break;
        case 191: {
          alt49 = 3;
        }
          break;
        case 192: {
          alt49 = 4;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 49, 0, input);

          throw nvae;
      }

      switch (alt49) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:399:4: typeExtensionAttributeBinding
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_typeExtensionAttributeBinding_in_typeExtensionMember3346);
          typeExtensionAttributeBinding169 = typeExtensionAttributeBinding();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor
                .addChild(root_0, typeExtensionAttributeBinding169.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:400:4: actionExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_actionExtension_in_typeExtensionMember3351);
          actionExtension170 = actionExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, actionExtension170.getTree());

        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:401:4: expExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_expExtension_in_typeExtensionMember3356);
          expExtension171 = expExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, expExtension171.getTree());

        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:402:4: procExtension
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_procExtension_in_typeExtensionMember3361);
          procExtension172 = procExtension();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, procExtension172.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 46, typeExtensionMember_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeExtensionMember"

  public static class typeExtensionAttributeBinding_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeExtensionAttributeBinding"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:405:1: typeExtensionAttributeBinding : id1= ID '=' id2= ID annotationList ';' -> ^( TYPE_EXT_ATTRIBUTE_BINDING[$id1] $id1 $id2 annotationList ) ;
  public final AntlrPilarParser.typeExtensionAttributeBinding_return typeExtensionAttributeBinding()
      throws RecognitionException {
    AntlrPilarParser.typeExtensionAttributeBinding_return retval = new AntlrPilarParser.typeExtensionAttributeBinding_return();
    retval.start = input.LT(1);
    int typeExtensionAttributeBinding_StartIndex = input.index();
    Object root_0 = null;

    Token id1 = null;
    Token id2 = null;
    Token char_literal173 = null;
    Token char_literal175 = null;
    AntlrPilarParser.annotationList_return annotationList174 = null;

    Object id1_tree = null;
    Object id2_tree = null;
    Object char_literal173_tree = null;
    Object char_literal175_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 47)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:406:2: (id1= ID '=' id2= ID annotationList ';' -> ^( TYPE_EXT_ATTRIBUTE_BINDING[$id1] $id1 $id2 annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:406:4: id1= ID '=' id2= ID annotationList ';'
      {
        id1 = (Token) match(
            input,
            ID,
            FOLLOW_ID_in_typeExtensionAttributeBinding3374);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(id1);

        char_literal173 = (Token) match(
            input,
            173,
            FOLLOW_173_in_typeExtensionAttributeBinding3376);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal173);

        id2 = (Token) match(
            input,
            ID,
            FOLLOW_ID_in_typeExtensionAttributeBinding3380);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(id2);

        pushFollow(FOLLOW_annotationList_in_typeExtensionAttributeBinding3385);
        annotationList174 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList174.getTree());
        char_literal175 = (Token) match(
            input,
            175,
            FOLLOW_175_in_typeExtensionAttributeBinding3387);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal175);

        // AST REWRITE
        // elements: id2, id1, annotationList
        // token labels: id2, id1
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleTokenStream stream_id2 = new RewriteRuleTokenStream(
              adaptor, "token id2", id2);
          RewriteRuleTokenStream stream_id1 = new RewriteRuleTokenStream(
              adaptor, "token id1", id1);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 407:41: -> ^( TYPE_EXT_ATTRIBUTE_BINDING[$id1] $id1 $id2 annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:407:44: ^( TYPE_EXT_ATTRIBUTE_BINDING[$id1] $id1 $id2 annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPE_EXT_ATTRIBUTE_BINDING, id1),
                  root_1);

              adaptor.addChild(root_1, stream_id1.nextNode());
              adaptor.addChild(root_1, stream_id2.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 47, typeExtensionAttributeBinding_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeExtensionAttributeBinding"

  public static class actionExtension_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "actionExtension"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:410:1: actionExtension : t= 'actiondef' ( typeVarTuple )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( ACTION_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID ^( OPTION ( extParamList )? ) annotationList ) ;
  public final AntlrPilarParser.actionExtension_return actionExtension()
      throws RecognitionException {
    AntlrPilarParser.actionExtension_return retval = new AntlrPilarParser.actionExtension_return();
    retval.start = input.LT(1);
    int actionExtension_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID177 = null;
    Token char_literal178 = null;
    Token char_literal180 = null;
    Token char_literal182 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple176 = null;

    AntlrPilarParser.extParamList_return extParamList179 = null;

    AntlrPilarParser.annotationList_return annotationList181 = null;

    Object t_tree = null;
    Object ID177_tree = null;
    Object char_literal178_tree = null;
    Object char_literal180_tree = null;
    Object char_literal182_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleTokenStream stream_190 = new RewriteRuleTokenStream(adaptor,
        "token 190");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_extParamList = new RewriteRuleSubtreeStream(
        adaptor, "rule extParamList");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 48)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:411:2: (t= 'actiondef' ( typeVarTuple )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( ACTION_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID ^( OPTION ( extParamList )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:411:4: t= 'actiondef' ( typeVarTuple )? ID ( '(' extParamList ')' )? annotationList ';'
      {
        t = (Token) match(input, 190, FOLLOW_190_in_actionExtension3433);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_190.add(t);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:411:18: ( typeVarTuple )?
        int alt50 = 2;
        int LA50_0 = input.LA(1);

        if ((LA50_0 == 167)) {
          alt50 = 1;
        }
        switch (alt50) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_actionExtension3435);
            typeVarTuple176 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple176.getTree());

          }
            break;

        }

        ID177 = (Token) match(input, ID, FOLLOW_ID_in_actionExtension3438);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID177);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:412:4: ( '(' extParamList ')' )?
        int alt51 = 2;
        int LA51_0 = input.LA(1);

        if ((LA51_0 == 169)) {
          alt51 = 1;
        }
        switch (alt51) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:412:6: '(' extParamList ')'
          {
            char_literal178 = (Token) match(
                input,
                169,
                FOLLOW_169_in_actionExtension3445);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_169.add(char_literal178);

            pushFollow(FOLLOW_extParamList_in_actionExtension3447);
            extParamList179 = extParamList();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_extParamList.add(extParamList179.getTree());
            char_literal180 = (Token) match(
                input,
                170,
                FOLLOW_170_in_actionExtension3449);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_170.add(char_literal180);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_actionExtension3457);
        annotationList181 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList181.getTree());
        char_literal182 = (Token) match(
            input,
            175,
            FOLLOW_175_in_actionExtension3459);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal182);

        // AST REWRITE
        // elements: extParamList, annotationList, typeVarTuple, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 413:41: -> ^( ACTION_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID ^( OPTION ( extParamList )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:413:44: ^( ACTION_EXT[$t] ^( OPTION ( typeVarTuple )? ) ID ^( OPTION ( extParamList )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ACTION_EXT, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:413:61: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:413:70: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:413:88: ^( OPTION ( extParamList )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:413:97: ( extParamList )?
                if (stream_extParamList.hasNext()) {
                  adaptor.addChild(root_2, stream_extParamList.nextTree());

                }
                stream_extParamList.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 48, actionExtension_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "actionExtension"

  public static class expExtension_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "expExtension"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:416:1: expExtension : t= 'expdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( EXP_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList ) ;
  public final AntlrPilarParser.expExtension_return expExtension()
      throws RecognitionException {
    AntlrPilarParser.expExtension_return retval = new AntlrPilarParser.expExtension_return();
    retval.start = input.LT(1);
    int expExtension_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID185 = null;
    Token char_literal186 = null;
    Token char_literal188 = null;
    Token char_literal190 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple183 = null;

    AntlrPilarParser.type_return type184 = null;

    AntlrPilarParser.extParamList_return extParamList187 = null;

    AntlrPilarParser.annotationList_return annotationList189 = null;

    Object t_tree = null;
    Object ID185_tree = null;
    Object char_literal186_tree = null;
    Object char_literal188_tree = null;
    Object char_literal190_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleTokenStream stream_191 = new RewriteRuleTokenStream(adaptor,
        "token 191");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_extParamList = new RewriteRuleSubtreeStream(
        adaptor, "rule extParamList");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 49)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:417:2: (t= 'expdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( EXP_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:417:4: t= 'expdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';'
      {
        t = (Token) match(input, 191, FOLLOW_191_in_expExtension3515);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_191.add(t);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:417:15: ( typeVarTuple )?
        int alt52 = 2;
        int LA52_0 = input.LA(1);

        if ((LA52_0 == 167)) {
          alt52 = 1;
        }
        switch (alt52) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_expExtension3517);
            typeVarTuple183 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple183.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:417:29: ( type )?
        int alt53 = 2;
        int LA53_0 = input.LA(1);

        if ((LA53_0 == TYPEVARID || LA53_0 == 169 || LA53_0 == 177)) {
          alt53 = 1;
        } else if ((LA53_0 == ID)) {
          int LA53_2 = input.LA(2);

          if ((LA53_2 == ID || LA53_2 == 167 || LA53_2 == 177 || LA53_2 == 202
              || (LA53_2 >= 215 && LA53_2 <= 216) || LA53_2 == 225)) {
            alt53 = 1;
          }
        }
        switch (alt53) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_expExtension3520);
            type184 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type184.getTree());

          }
            break;

        }

        ID185 = (Token) match(input, ID, FOLLOW_ID_in_expExtension3523);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID185);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:418:4: ( '(' extParamList ')' )?
        int alt54 = 2;
        int LA54_0 = input.LA(1);

        if ((LA54_0 == 169)) {
          alt54 = 1;
        }
        switch (alt54) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:418:6: '(' extParamList ')'
          {
            char_literal186 = (Token) match(
                input,
                169,
                FOLLOW_169_in_expExtension3531);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_169.add(char_literal186);

            pushFollow(FOLLOW_extParamList_in_expExtension3533);
            extParamList187 = extParamList();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_extParamList.add(extParamList187.getTree());
            char_literal188 = (Token) match(
                input,
                170,
                FOLLOW_170_in_expExtension3535);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_170.add(char_literal188);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_expExtension3543);
        annotationList189 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList189.getTree());
        char_literal190 = (Token) match(
            input,
            175,
            FOLLOW_175_in_expExtension3545);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal190);

        // AST REWRITE
        // elements: ID, annotationList, extParamList, type, typeVarTuple
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 419:41: -> ^( EXP_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:419:44: ^( EXP_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(EXP_EXT, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:419:58: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:419:67: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:419:82: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:419:91: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:419:101: ^( OPTION ( extParamList )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:419:110: ( extParamList )?
                if (stream_extParamList.hasNext()) {
                  adaptor.addChild(root_2, stream_extParamList.nextTree());

                }
                stream_extParamList.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 49, expExtension_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "expExtension"

  public static class procExtension_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "procExtension"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:422:1: procExtension : t= 'procdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( PROC_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList ) ;
  public final AntlrPilarParser.procExtension_return procExtension()
      throws RecognitionException {
    AntlrPilarParser.procExtension_return retval = new AntlrPilarParser.procExtension_return();
    retval.start = input.LT(1);
    int procExtension_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID193 = null;
    Token char_literal194 = null;
    Token char_literal196 = null;
    Token char_literal198 = null;
    AntlrPilarParser.typeVarTuple_return typeVarTuple191 = null;

    AntlrPilarParser.type_return type192 = null;

    AntlrPilarParser.extParamList_return extParamList195 = null;

    AntlrPilarParser.annotationList_return annotationList197 = null;

    Object t_tree = null;
    Object ID193_tree = null;
    Object char_literal194_tree = null;
    Object char_literal196_tree = null;
    Object char_literal198_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleTokenStream stream_192 = new RewriteRuleTokenStream(adaptor,
        "token 192");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_extParamList = new RewriteRuleSubtreeStream(
        adaptor, "rule extParamList");
    RewriteRuleSubtreeStream stream_typeVarTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeVarTuple");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 50)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:423:2: (t= 'procdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';' -> ^( PROC_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:423:4: t= 'procdef' ( typeVarTuple )? ( type )? ID ( '(' extParamList ')' )? annotationList ';'
      {
        t = (Token) match(input, 192, FOLLOW_192_in_procExtension3608);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_192.add(t);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:423:16: ( typeVarTuple )?
        int alt55 = 2;
        int LA55_0 = input.LA(1);

        if ((LA55_0 == 167)) {
          alt55 = 1;
        }
        switch (alt55) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeVarTuple
          {
            pushFollow(FOLLOW_typeVarTuple_in_procExtension3610);
            typeVarTuple191 = typeVarTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeVarTuple.add(typeVarTuple191.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:423:30: ( type )?
        int alt56 = 2;
        int LA56_0 = input.LA(1);

        if ((LA56_0 == TYPEVARID || LA56_0 == 169 || LA56_0 == 177)) {
          alt56 = 1;
        } else if ((LA56_0 == ID)) {
          int LA56_2 = input.LA(2);

          if ((LA56_2 == ID || LA56_2 == 167 || LA56_2 == 177 || LA56_2 == 202
              || (LA56_2 >= 215 && LA56_2 <= 216) || LA56_2 == 225)) {
            alt56 = 1;
          }
        }
        switch (alt56) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_procExtension3613);
            type192 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type192.getTree());

          }
            break;

        }

        ID193 = (Token) match(input, ID, FOLLOW_ID_in_procExtension3616);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID193);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:424:4: ( '(' extParamList ')' )?
        int alt57 = 2;
        int LA57_0 = input.LA(1);

        if ((LA57_0 == 169)) {
          alt57 = 1;
        }
        switch (alt57) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:424:6: '(' extParamList ')'
          {
            char_literal194 = (Token) match(
                input,
                169,
                FOLLOW_169_in_procExtension3623);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_169.add(char_literal194);

            pushFollow(FOLLOW_extParamList_in_procExtension3625);
            extParamList195 = extParamList();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_extParamList.add(extParamList195.getTree());
            char_literal196 = (Token) match(
                input,
                170,
                FOLLOW_170_in_procExtension3627);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_170.add(char_literal196);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_procExtension3635);
        annotationList197 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList197.getTree());
        char_literal198 = (Token) match(
            input,
            175,
            FOLLOW_175_in_procExtension3637);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal198);

        // AST REWRITE
        // elements: typeVarTuple, annotationList, type, extParamList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 425:41: -> ^( PROC_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:425:44: ^( PROC_EXT[$t] ^( OPTION ( typeVarTuple )? ) ^( OPTION ( type )? ) ID ^( OPTION ( extParamList )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(PROC_EXT, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:425:59: ^( OPTION ( typeVarTuple )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:425:68: ( typeVarTuple )?
                if (stream_typeVarTuple.hasNext()) {
                  adaptor.addChild(root_2, stream_typeVarTuple.nextTree());

                }
                stream_typeVarTuple.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:425:83: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:425:92: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_ID.nextNode());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:425:102: ^( OPTION ( extParamList )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:425:111: ( extParamList )?
                if (stream_extParamList.hasNext()) {
                  adaptor.addChild(root_2, stream_extParamList.nextTree());

                }
                stream_extParamList.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 50, procExtension_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "procExtension"

  public static class extParamList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extParamList"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:428:1: extParamList : ( extParamVariable -> ^( LIST ( extParamVariable )? ) | extParam ( ',' extParam )* ( extParamVariable )? -> ^( LIST ( extParam )+ ( extParamVariable )? ) );
  public final AntlrPilarParser.extParamList_return extParamList()
      throws RecognitionException {
    AntlrPilarParser.extParamList_return retval = new AntlrPilarParser.extParamList_return();
    retval.start = input.LT(1);
    int extParamList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal201 = null;
    AntlrPilarParser.extParamVariable_return extParamVariable199 = null;

    AntlrPilarParser.extParam_return extParam200 = null;

    AntlrPilarParser.extParam_return extParam202 = null;

    AntlrPilarParser.extParamVariable_return extParamVariable203 = null;

    Object char_literal201_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleSubtreeStream stream_extParamVariable = new RewriteRuleSubtreeStream(
        adaptor, "rule extParamVariable");
    RewriteRuleSubtreeStream stream_extParam = new RewriteRuleSubtreeStream(
        adaptor, "rule extParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 51)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:429:2: ( extParamVariable -> ^( LIST ( extParamVariable )? ) | extParam ( ',' extParam )* ( extParamVariable )? -> ^( LIST ( extParam )+ ( extParamVariable )? ) )
      int alt60 = 2;
      alt60 = dfa60.predict(input);
      switch (alt60) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:429:4: extParamVariable
        {
          pushFollow(FOLLOW_extParamVariable_in_extParamList3699);
          extParamVariable199 = extParamVariable();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_extParamVariable.add(extParamVariable199.getTree());

          // AST REWRITE
          // elements: extParamVariable
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 429:41: -> ^( LIST ( extParamVariable )? )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:429:44: ^( LIST ( extParamVariable )? )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:429:51: ( extParamVariable )?
                if (stream_extParamVariable.hasNext()) {
                  adaptor.addChild(root_1, stream_extParamVariable.nextTree());

                }
                stream_extParamVariable.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:430:4: extParam ( ',' extParam )* ( extParamVariable )?
        {
          pushFollow(FOLLOW_extParam_in_extParamList3733);
          extParam200 = extParam();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_extParam.add(extParam200.getTree());
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:430:13: ( ',' extParam )*
          loop58: do {
            int alt58 = 2;
            int LA58_0 = input.LA(1);

            if ((LA58_0 == 172)) {
              alt58 = 1;
            }

            switch (alt58) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:430:15: ',' extParam
              {
                char_literal201 = (Token) match(
                    input,
                    172,
                    FOLLOW_172_in_extParamList3737);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_172.add(char_literal201);

                pushFollow(FOLLOW_extParam_in_extParamList3739);
                extParam202 = extParam();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_extParam.add(extParam202.getTree());

              }
                break;

              default:
                break loop58;
            }
          } while (true);

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:431:4: ( extParamVariable )?
          int alt59 = 2;
          int LA59_0 = input.LA(1);

          if (((LA59_0 >= ID && LA59_0 <= TYPEVARID) || LA59_0 == 169
              || LA59_0 == 177 || LA59_0 == 185)) {
            alt59 = 1;
          }
          switch (alt59) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: extParamVariable
            {
              pushFollow(FOLLOW_extParamVariable_in_extParamList3747);
              extParamVariable203 = extParamVariable();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_extParamVariable.add(extParamVariable203.getTree());

            }
              break;

          }

          // AST REWRITE
          // elements: extParamVariable, extParam
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 431:41: -> ^( LIST ( extParam )+ ( extParamVariable )? )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:431:44: ^( LIST ( extParam )+ ( extParamVariable )? )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_1);

                if (!(stream_extParam.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_extParam.hasNext()) {
                  adaptor.addChild(root_1, stream_extParam.nextTree());

                }
                stream_extParam.reset();
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:431:61: ( extParamVariable )?
                if (stream_extParamVariable.hasNext()) {
                  adaptor.addChild(root_1, stream_extParamVariable.nextTree());

                }
                stream_extParamVariable.reset();

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 51, extParamList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extParamList"

  public static class extParam_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extParam"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:434:1: extParam : ( type )? ( ID )? annotationList -> ^( EXT_PARAM ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList ) ;
  public final AntlrPilarParser.extParam_return extParam()
      throws RecognitionException {
    AntlrPilarParser.extParam_return retval = new AntlrPilarParser.extParam_return();
    retval.start = input.LT(1);
    int extParam_StartIndex = input.index();
    Object root_0 = null;

    Token ID205 = null;
    AntlrPilarParser.type_return type204 = null;

    AntlrPilarParser.annotationList_return annotationList206 = null;

    Object ID205_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 52)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:2: ( ( type )? ( ID )? annotationList -> ^( EXT_PARAM ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:4: ( type )? ( ID )? annotationList
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:4: ( type )?
        int alt61 = 2;
        alt61 = dfa61.predict(input);
        switch (alt61) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_extParam3790);
            type204 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type204.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:10: ( ID )?
        int alt62 = 2;
        int LA62_0 = input.LA(1);

        if ((LA62_0 == ID)) {
          int LA62_1 = input.LA(2);

          if ((synpred74_AntlrPilar())) {
            alt62 = 1;
          }
        }
        switch (alt62) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ID
          {
            ID205 = (Token) match(input, ID, FOLLOW_ID_in_extParam3793);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ID.add(ID205);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_extParam3796);
        annotationList206 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList206.getTree());

        // AST REWRITE
        // elements: annotationList, type, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 435:41: -> ^( EXT_PARAM ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:44: ^( EXT_PARAM ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(EXT_PARAM, "EXT_PARAM"),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:56: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:65: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:72: ^( OPTION ( ID )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:81: ( ID )?
                if (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 52, extParam_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extParam"

  public static class extParamVariable_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extParamVariable"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:438:1: extParamVariable : ( type )? ( ID )? '...' annotationList -> ^( EXT_PARAM_VARIABLE ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList ) ;
  public final AntlrPilarParser.extParamVariable_return extParamVariable()
      throws RecognitionException {
    AntlrPilarParser.extParamVariable_return retval = new AntlrPilarParser.extParamVariable_return();
    retval.start = input.LT(1);
    int extParamVariable_StartIndex = input.index();
    Object root_0 = null;

    Token ID208 = null;
    Token string_literal209 = null;
    AntlrPilarParser.type_return type207 = null;

    AntlrPilarParser.annotationList_return annotationList210 = null;

    Object ID208_tree = null;
    Object string_literal209_tree = null;
    RewriteRuleTokenStream stream_185 = new RewriteRuleTokenStream(adaptor,
        "token 185");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 53)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:439:2: ( ( type )? ( ID )? '...' annotationList -> ^( EXT_PARAM_VARIABLE ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:439:4: ( type )? ( ID )? '...' annotationList
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:439:4: ( type )?
        int alt63 = 2;
        int LA63_0 = input.LA(1);

        if ((LA63_0 == TYPEVARID || LA63_0 == 169 || LA63_0 == 177)) {
          alt63 = 1;
        } else if ((LA63_0 == ID)) {
          int LA63_2 = input.LA(2);

          if ((synpred75_AntlrPilar())) {
            alt63 = 1;
          }
        }
        switch (alt63) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_extParamVariable3841);
            type207 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type207.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:439:10: ( ID )?
        int alt64 = 2;
        int LA64_0 = input.LA(1);

        if ((LA64_0 == ID)) {
          alt64 = 1;
        }
        switch (alt64) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ID
          {
            ID208 = (Token) match(input, ID, FOLLOW_ID_in_extParamVariable3844);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ID.add(ID208);

          }
            break;

        }

        string_literal209 = (Token) match(
            input,
            185,
            FOLLOW_185_in_extParamVariable3851);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_185.add(string_literal209);

        pushFollow(FOLLOW_annotationList_in_extParamVariable3853);
        annotationList210 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList210.getTree());

        // AST REWRITE
        // elements: annotationList, type, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 440:41: -> ^( EXT_PARAM_VARIABLE ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:440:44: ^( EXT_PARAM_VARIABLE ^( OPTION ( type )? ) ^( OPTION ( ID )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(
                  EXT_PARAM_VARIABLE,
                  "EXT_PARAM_VARIABLE"), root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:440:65: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:440:74: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:440:81: ^( OPTION ( ID )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:440:90: ( ID )?
                if (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 53, extParamVariable_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extParamVariable"

  public static class body_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "body"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:443:1: body : t= '{' ( localVarsDeclaration )? ( location )+ ( catchClause )* '}' -> ^( BODY[$t] ^( OPTION ( localVarsDeclaration )? ) ^( LIST ( location )+ ) ^( LIST ( catchClause )* ) ) ;
  public final AntlrPilarParser.body_return body() throws RecognitionException {
    AntlrPilarParser.body_return retval = new AntlrPilarParser.body_return();
    retval.start = input.LT(1);
    int body_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal214 = null;
    AntlrPilarParser.localVarsDeclaration_return localVarsDeclaration211 = null;

    AntlrPilarParser.location_return location212 = null;

    AntlrPilarParser.catchClause_return catchClause213 = null;

    Object t_tree = null;
    Object char_literal214_tree = null;
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleSubtreeStream stream_localVarsDeclaration = new RewriteRuleSubtreeStream(
        adaptor, "rule localVarsDeclaration");
    RewriteRuleSubtreeStream stream_catchClause = new RewriteRuleSubtreeStream(
        adaptor, "rule catchClause");
    RewriteRuleSubtreeStream stream_location = new RewriteRuleSubtreeStream(
        adaptor, "rule location");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 54)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:444:2: (t= '{' ( localVarsDeclaration )? ( location )+ ( catchClause )* '}' -> ^( BODY[$t] ^( OPTION ( localVarsDeclaration )? ) ^( LIST ( location )+ ) ^( LIST ( catchClause )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:444:4: t= '{' ( localVarsDeclaration )? ( location )+ ( catchClause )* '}'
      {
        t = (Token) match(input, 177, FOLLOW_177_in_body3905);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(t);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:444:10: ( localVarsDeclaration )?
        int alt65 = 2;
        int LA65_0 = input.LA(1);

        if (((LA65_0 >= ID && LA65_0 <= TYPEVARID) || LA65_0 == 169
            || LA65_0 == 177 || LA65_0 == 193)) {
          alt65 = 1;
        }
        switch (alt65) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: localVarsDeclaration
          {
            pushFollow(FOLLOW_localVarsDeclaration_in_body3907);
            localVarsDeclaration211 = localVarsDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_localVarsDeclaration
                  .add(localVarsDeclaration211.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:445:4: ( location )+
        int cnt66 = 0;
        loop66: do {
          int alt66 = 2;
          int LA66_0 = input.LA(1);

          if ((LA66_0 == LOCID)) {
            alt66 = 1;
          }

          switch (alt66) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: location
            {
              pushFollow(FOLLOW_location_in_body3914);
              location212 = location();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_location.add(location212.getTree());

            }
              break;

            default:
              if (cnt66 >= 1) break loop66;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(66, input);
              throw eee;
          }
          cnt66++;
        } while (true);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:446:4: ( catchClause )*
        loop67: do {
          int alt67 = 2;
          int LA67_0 = input.LA(1);

          if ((LA67_0 == 211)) {
            alt67 = 1;
          }

          switch (alt67) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: catchClause
            {
              pushFollow(FOLLOW_catchClause_in_body3921);
              catchClause213 = catchClause();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_catchClause.add(catchClause213.getTree());

            }
              break;

            default:
              break loop67;
          }
        } while (true);

        char_literal214 = (Token) match(input, 178, FOLLOW_178_in_body3924);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal214);

        // AST REWRITE
        // elements: localVarsDeclaration, location, catchClause
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 446:41: -> ^( BODY[$t] ^( OPTION ( localVarsDeclaration )? ) ^( LIST ( location )+ ) ^( LIST ( catchClause )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:446:44: ^( BODY[$t] ^( OPTION ( localVarsDeclaration )? ) ^( LIST ( location )+ ) ^( LIST ( catchClause )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(BODY, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:446:55: ^( OPTION ( localVarsDeclaration )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:446:64: ( localVarsDeclaration )?
                if (stream_localVarsDeclaration.hasNext()) {
                  adaptor.addChild(
                      root_2,
                      stream_localVarsDeclaration.nextTree());

                }
                stream_localVarsDeclaration.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:446:87: ^( LIST ( location )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_location.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_location.hasNext()) {
                  adaptor.addChild(root_2, stream_location.nextTree());

                }
                stream_location.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:446:105: ^( LIST ( catchClause )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:446:112: ( catchClause )*
                while (stream_catchClause.hasNext()) {
                  adaptor.addChild(root_2, stream_catchClause.nextTree());

                }
                stream_catchClause.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 54, body_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "body"

  public static class localVarsDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "localVarsDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:449:1: localVarsDeclaration : (t= 'local' )? ( localVarDeclaration )+ -> ^( LIST ( localVarDeclaration )+ ) ;
  public final AntlrPilarParser.localVarsDeclaration_return localVarsDeclaration()
      throws RecognitionException {
    AntlrPilarParser.localVarsDeclaration_return retval = new AntlrPilarParser.localVarsDeclaration_return();
    retval.start = input.LT(1);
    int localVarsDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.localVarDeclaration_return localVarDeclaration215 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_193 = new RewriteRuleTokenStream(adaptor,
        "token 193");
    RewriteRuleSubtreeStream stream_localVarDeclaration = new RewriteRuleSubtreeStream(
        adaptor, "rule localVarDeclaration");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 55)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:450:2: ( (t= 'local' )? ( localVarDeclaration )+ -> ^( LIST ( localVarDeclaration )+ ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:450:4: (t= 'local' )? ( localVarDeclaration )+
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:450:5: (t= 'local' )?
        int alt68 = 2;
        int LA68_0 = input.LA(1);

        if ((LA68_0 == 193)) {
          alt68 = 1;
        }
        switch (alt68) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: t= 'local'
          {
            t = (Token) match(
                input,
                193,
                FOLLOW_193_in_localVarsDeclaration3985);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_193.add(t);

          }
            break;

        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:450:15: ( localVarDeclaration )+
        int cnt69 = 0;
        loop69: do {
          int alt69 = 2;
          int LA69_0 = input.LA(1);

          if (((LA69_0 >= ID && LA69_0 <= TYPEVARID) || LA69_0 == 169 || LA69_0 == 177)) {
            alt69 = 1;
          }

          switch (alt69) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: localVarDeclaration
            {
              pushFollow(FOLLOW_localVarDeclaration_in_localVarsDeclaration3988);
              localVarDeclaration215 = localVarDeclaration();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_localVarDeclaration
                    .add(localVarDeclaration215.getTree());

            }
              break;

            default:
              if (cnt69 >= 1) break loop69;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(69, input);
              throw eee;
          }
          cnt69++;
        } while (true);

        // AST REWRITE
        // elements: localVarDeclaration
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 450:41: -> ^( LIST ( localVarDeclaration )+ )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:450:44: ^( LIST ( localVarDeclaration )+ )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LIST, "LIST"),
                  root_1);

              if (!(stream_localVarDeclaration.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_localVarDeclaration.hasNext()) {
                adaptor.addChild(root_1, stream_localVarDeclaration.nextTree());

              }
              stream_localVarDeclaration.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 55, localVarsDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "localVarsDeclaration"

  public static class localVarDeclaration_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "localVarDeclaration"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:453:1: localVarDeclaration : ( type )? localVarFragment ( ',' localVarFragment )* ';' -> ^( LOCAL ^( OPTION ( type )? ) ^( LIST ( localVarFragment )+ ) ) ;
  public final AntlrPilarParser.localVarDeclaration_return localVarDeclaration()
      throws RecognitionException {
    AntlrPilarParser.localVarDeclaration_return retval = new AntlrPilarParser.localVarDeclaration_return();
    retval.start = input.LT(1);
    int localVarDeclaration_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal218 = null;
    Token char_literal220 = null;
    AntlrPilarParser.type_return type216 = null;

    AntlrPilarParser.localVarFragment_return localVarFragment217 = null;

    AntlrPilarParser.localVarFragment_return localVarFragment219 = null;

    Object char_literal218_tree = null;
    Object char_literal220_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleSubtreeStream stream_localVarFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule localVarFragment");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 56)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:454:2: ( ( type )? localVarFragment ( ',' localVarFragment )* ';' -> ^( LOCAL ^( OPTION ( type )? ) ^( LIST ( localVarFragment )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:454:4: ( type )? localVarFragment ( ',' localVarFragment )* ';'
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:454:4: ( type )?
        int alt70 = 2;
        int LA70_0 = input.LA(1);

        if ((LA70_0 == TYPEVARID || LA70_0 == 169 || LA70_0 == 177)) {
          alt70 = 1;
        } else if ((LA70_0 == ID)) {
          int LA70_2 = input.LA(2);

          if ((LA70_2 == ID || LA70_2 == 167 || LA70_2 == 177 || LA70_2 == 202
              || (LA70_2 >= 215 && LA70_2 <= 216) || LA70_2 == 225)) {
            alt70 = 1;
          }
        }
        switch (alt70) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_localVarDeclaration4014);
            type216 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type216.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_localVarFragment_in_localVarDeclaration4017);
        localVarFragment217 = localVarFragment();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_localVarFragment.add(localVarFragment217.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:455:4: ( ',' localVarFragment )*
        loop71: do {
          int alt71 = 2;
          int LA71_0 = input.LA(1);

          if ((LA71_0 == 172)) {
            alt71 = 1;
          }

          switch (alt71) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:455:6: ',' localVarFragment
            {
              char_literal218 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_localVarDeclaration4025);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal218);

              pushFollow(FOLLOW_localVarFragment_in_localVarDeclaration4027);
              localVarFragment219 = localVarFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_localVarFragment.add(localVarFragment219.getTree());

            }
              break;

            default:
              break loop71;
          }
        } while (true);

        char_literal220 = (Token) match(
            input,
            175,
            FOLLOW_175_in_localVarDeclaration4032);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal220);

        // AST REWRITE
        // elements: localVarFragment, type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 455:41: -> ^( LOCAL ^( OPTION ( type )? ) ^( LIST ( localVarFragment )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:455:44: ^( LOCAL ^( OPTION ( type )? ) ^( LIST ( localVarFragment )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LOCAL, "LOCAL"),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:455:52: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:455:61: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:455:68: ^( LIST ( localVarFragment )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_localVarFragment.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_localVarFragment.hasNext()) {
                  adaptor.addChild(root_2, stream_localVarFragment.nextTree());

                }
                stream_localVarFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 56, localVarDeclaration_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "localVarDeclaration"

  public static class localVarFragment_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "localVarFragment"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:458:1: localVarFragment : t= ID annotationList -> ^( LOCAL_FRAGMENT[$t] ID annotationList ) ;
  public final AntlrPilarParser.localVarFragment_return localVarFragment()
      throws RecognitionException {
    AntlrPilarParser.localVarFragment_return retval = new AntlrPilarParser.localVarFragment_return();
    retval.start = input.LT(1);
    int localVarFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.annotationList_return annotationList221 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 57)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:459:2: (t= ID annotationList -> ^( LOCAL_FRAGMENT[$t] ID annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:459:4: t= ID annotationList
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_localVarFragment4072);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        pushFollow(FOLLOW_annotationList_in_localVarFragment4074);
        annotationList221 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList221.getTree());

        // AST REWRITE
        // elements: annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 459:41: -> ^( LOCAL_FRAGMENT[$t] ID annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:459:44: ^( LOCAL_FRAGMENT[$t] ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LOCAL_FRAGMENT, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 57, localVarFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "localVarFragment"

  public static class location_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "location"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:462:1: location : t= LOCID angleGroupedAnnotationList ( transformation ( '|' transformation )* )? -> ^( LOCATION[$t] LOCID angleGroupedAnnotationList ^( LIST ( transformation )* ) ) ;
  public final AntlrPilarParser.location_return location()
      throws RecognitionException {
    AntlrPilarParser.location_return retval = new AntlrPilarParser.location_return();
    retval.start = input.LT(1);
    int location_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal224 = null;
    AntlrPilarParser.angleGroupedAnnotationList_return angleGroupedAnnotationList222 = null;

    AntlrPilarParser.transformation_return transformation223 = null;

    AntlrPilarParser.transformation_return transformation225 = null;

    Object t_tree = null;
    Object char_literal224_tree = null;
    RewriteRuleTokenStream stream_194 = new RewriteRuleTokenStream(adaptor,
        "token 194");
    RewriteRuleTokenStream stream_LOCID = new RewriteRuleTokenStream(adaptor,
        "token LOCID");
    RewriteRuleSubtreeStream stream_transformation = new RewriteRuleSubtreeStream(
        adaptor, "rule transformation");
    RewriteRuleSubtreeStream stream_angleGroupedAnnotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule angleGroupedAnnotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 58)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:463:2: (t= LOCID angleGroupedAnnotationList ( transformation ( '|' transformation )* )? -> ^( LOCATION[$t] LOCID angleGroupedAnnotationList ^( LIST ( transformation )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:463:4: t= LOCID angleGroupedAnnotationList ( transformation ( '|' transformation )* )?
      {
        t = (Token) match(input, LOCID, FOLLOW_LOCID_in_location4124);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_LOCID.add(t);

        pushFollow(FOLLOW_angleGroupedAnnotationList_in_location4126);
        angleGroupedAnnotationList222 = angleGroupedAnnotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_angleGroupedAnnotationList.add(angleGroupedAnnotationList222
              .getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:464:4: ( transformation ( '|' transformation )* )?
        int alt73 = 2;
        switch (input.LA(1)) {
          case HEX_LIT:
          case DEC_LIT:
          case OCT_LIT:
          case ID:
          case GLOBALID:
          case ADD_OP:
          case MUL_OP:
          case UN_OP:
          case CHAR_LIT:
          case STRING_LIT:
          case SYMBOL_LIT:
          case RAW_LIT:
          case BIN_LIT:
          case FLOAT_LIT:
          case RATIONAL_LIT:
          case 169:
          case 177:
          case 194:
          case 196:
          case 197:
          case 198:
          case 199:
          case 201:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 215:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 223: {
            alt73 = 1;
          }
            break;
          case EOF: {
            int LA73_2 = input.LA(2);

            if ((synpred85_AntlrPilar())) {
              alt73 = 1;
            }
          }
            break;
          case 211: {
            int LA73_3 = input.LA(2);

            if ((synpred85_AntlrPilar())) {
              alt73 = 1;
            }
          }
            break;
          case 178: {
            int LA73_4 = input.LA(2);

            if ((synpred85_AntlrPilar())) {
              alt73 = 1;
            }
          }
            break;
          case LOCID: {
            int LA73_5 = input.LA(2);

            if ((synpred85_AntlrPilar())) {
              alt73 = 1;
            }
          }
            break;
        }

        switch (alt73) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:464:6: transformation ( '|' transformation )*
          {
            pushFollow(FOLLOW_transformation_in_location4134);
            transformation223 = transformation();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_transformation.add(transformation223.getTree());
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:465:6: ( '|' transformation )*
            loop72: do {
              int alt72 = 2;
              int LA72_0 = input.LA(1);

              if ((LA72_0 == 194)) {
                alt72 = 1;
              }

              switch (alt72) {
                case 1:
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:465:8: '|' transformation
                {
                  char_literal224 = (Token) match(
                      input,
                      194,
                      FOLLOW_194_in_location4144);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_194.add(char_literal224);

                  pushFollow(FOLLOW_transformation_in_location4146);
                  transformation225 = transformation();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_transformation.add(transformation225.getTree());

                }
                  break;

                default:
                  break loop72;
              }
            } while (true);

          }
            break;

        }

        // AST REWRITE
        // elements: transformation, LOCID, angleGroupedAnnotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 466:41: -> ^( LOCATION[$t] LOCID angleGroupedAnnotationList ^( LIST ( transformation )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:466:44: ^( LOCATION[$t] LOCID angleGroupedAnnotationList ^( LIST ( transformation )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LOCATION, t),
                  root_1);

              adaptor.addChild(root_1, stream_LOCID.nextNode());
              adaptor.addChild(
                  root_1,
                  stream_angleGroupedAnnotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:466:92: ^( LIST ( transformation )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:466:99: ( transformation )*
                while (stream_transformation.hasNext()) {
                  adaptor.addChild(root_2, stream_transformation.nextTree());

                }
                stream_transformation.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 58, location_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "location"

  public static class transformation_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "transformation"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:469:1: transformation : parenGroupedAnnotationList ( guard )? seqTransformation -> ^( TRANSFORMATION parenGroupedAnnotationList ^( OPTION ( guard )? ) seqTransformation ) ;
  public final AntlrPilarParser.transformation_return transformation()
      throws RecognitionException {
    AntlrPilarParser.transformation_return retval = new AntlrPilarParser.transformation_return();
    retval.start = input.LT(1);
    int transformation_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.parenGroupedAnnotationList_return parenGroupedAnnotationList226 = null;

    AntlrPilarParser.guard_return guard227 = null;

    AntlrPilarParser.seqTransformation_return seqTransformation228 = null;

    RewriteRuleSubtreeStream stream_parenGroupedAnnotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule parenGroupedAnnotationList");
    RewriteRuleSubtreeStream stream_guard = new RewriteRuleSubtreeStream(
        adaptor, "rule guard");
    RewriteRuleSubtreeStream stream_seqTransformation = new RewriteRuleSubtreeStream(
        adaptor, "rule seqTransformation");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 59)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:470:2: ( parenGroupedAnnotationList ( guard )? seqTransformation -> ^( TRANSFORMATION parenGroupedAnnotationList ^( OPTION ( guard )? ) seqTransformation ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:470:4: parenGroupedAnnotationList ( guard )? seqTransformation
      {
        pushFollow(FOLLOW_parenGroupedAnnotationList_in_transformation4231);
        parenGroupedAnnotationList226 = parenGroupedAnnotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_parenGroupedAnnotationList.add(parenGroupedAnnotationList226
              .getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:470:31: ( guard )?
        int alt74 = 2;
        alt74 = dfa74.predict(input);
        switch (alt74) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: guard
          {
            pushFollow(FOLLOW_guard_in_transformation4233);
            guard227 = guard();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_guard.add(guard227.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_seqTransformation_in_transformation4240);
        seqTransformation228 = seqTransformation();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_seqTransformation.add(seqTransformation228.getTree());

        // AST REWRITE
        // elements: parenGroupedAnnotationList, guard, seqTransformation
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 471:41: -> ^( TRANSFORMATION parenGroupedAnnotationList ^( OPTION ( guard )? ) seqTransformation )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:471:44: ^( TRANSFORMATION parenGroupedAnnotationList ^( OPTION ( guard )? ) seqTransformation )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TRANSFORMATION, "TRANSFORMATION"),
                  root_1);

              adaptor.addChild(
                  root_1,
                  stream_parenGroupedAnnotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:471:88: ^( OPTION ( guard )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:471:97: ( guard )?
                if (stream_guard.hasNext()) {
                  adaptor.addChild(root_2, stream_guard.nextTree());

                }
                stream_guard.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_seqTransformation.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 59, transformation_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "transformation"

  public static class guard_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "guard"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:474:1: guard : ( exp annotationList '+>' -> ^( EXP_GUARD exp annotationList ) | t= 'else' annotationList -> ^( ELSE_GUARD[$t] annotationList ) );
  public final AntlrPilarParser.guard_return guard()
      throws RecognitionException {
    AntlrPilarParser.guard_return retval = new AntlrPilarParser.guard_return();
    retval.start = input.LT(1);
    int guard_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal231 = null;
    AntlrPilarParser.exp_return exp229 = null;

    AntlrPilarParser.annotationList_return annotationList230 = null;

    AntlrPilarParser.annotationList_return annotationList232 = null;

    Object t_tree = null;
    Object string_literal231_tree = null;
    RewriteRuleTokenStream stream_195 = new RewriteRuleTokenStream(adaptor,
        "token 195");
    RewriteRuleTokenStream stream_196 = new RewriteRuleTokenStream(adaptor,
        "token 196");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 60)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:475:2: ( exp annotationList '+>' -> ^( EXP_GUARD exp annotationList ) | t= 'else' annotationList -> ^( ELSE_GUARD[$t] annotationList ) )
      int alt75 = 2;
      int LA75_0 = input.LA(1);

      if (((LA75_0 >= HEX_LIT && LA75_0 <= OCT_LIT) || LA75_0 == ID
          || LA75_0 == GLOBALID || (LA75_0 >= ADD_OP && LA75_0 <= RATIONAL_LIT)
          || LA75_0 == 169 || LA75_0 == 177 || LA75_0 == 204 || LA75_0 == 208
          || LA75_0 == 215 || (LA75_0 >= 217 && LA75_0 <= 221) || LA75_0 == 223)) {
        alt75 = 1;
      } else if ((LA75_0 == 196)) {
        alt75 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 75, 0, input);

        throw nvae;
      }
      switch (alt75) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:475:4: exp annotationList '+>'
        {
          pushFollow(FOLLOW_exp_in_guard4288);
          exp229 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp229.getTree());
          pushFollow(FOLLOW_annotationList_in_guard4290);
          annotationList230 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList230.getTree());
          string_literal231 = (Token) match(input, 195, FOLLOW_195_in_guard4292);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_195.add(string_literal231);

          // AST REWRITE
          // elements: annotationList, exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 475:41: -> ^( EXP_GUARD exp annotationList )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:475:44: ^( EXP_GUARD exp annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(EXP_GUARD, "EXP_GUARD"),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:476:4: t= 'else' annotationList
        {
          t = (Token) match(input, 196, FOLLOW_196_in_guard4322);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_196.add(t);

          pushFollow(FOLLOW_annotationList_in_guard4324);
          annotationList232 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList232.getTree());

          // AST REWRITE
          // elements: annotationList
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 476:41: -> ^( ELSE_GUARD[$t] annotationList )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:476:44: ^( ELSE_GUARD[$t] annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ELSE_GUARD, t),
                    root_1);

                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 60, guard_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "guard"

  public static class lhsList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "lhsList"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:479:1: lhsList : lhs ( ',' lhs )* -> ^( LIST ( lhs )+ ) ;
  public final AntlrPilarParser.lhsList_return lhsList()
      throws RecognitionException {
    AntlrPilarParser.lhsList_return retval = new AntlrPilarParser.lhsList_return();
    retval.start = input.LT(1);
    int lhsList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal234 = null;
    AntlrPilarParser.lhs_return lhs233 = null;

    AntlrPilarParser.lhs_return lhs235 = null;

    Object char_literal234_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleSubtreeStream stream_lhs = new RewriteRuleSubtreeStream(adaptor,
        "rule lhs");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 61)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:480:2: ( lhs ( ',' lhs )* -> ^( LIST ( lhs )+ ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:480:4: lhs ( ',' lhs )*
      {
        pushFollow(FOLLOW_lhs_in_lhsList4357);
        lhs233 = lhs();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_lhs.add(lhs233.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:480:8: ( ',' lhs )*
        loop76: do {
          int alt76 = 2;
          int LA76_0 = input.LA(1);

          if ((LA76_0 == 172)) {
            alt76 = 1;
          }

          switch (alt76) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:480:10: ',' lhs
            {
              char_literal234 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_lhsList4361);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal234);

              pushFollow(FOLLOW_lhs_in_lhsList4363);
              lhs235 = lhs();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_lhs.add(lhs235.getTree());

            }
              break;

            default:
              break loop76;
          }
        } while (true);

        // AST REWRITE
        // elements: lhs
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 480:41: -> ^( LIST ( lhs )+ )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:480:44: ^( LIST ( lhs )+ )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LIST, "LIST"),
                  root_1);

              if (!(stream_lhs.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_lhs.hasNext()) {
                adaptor.addChild(root_1, stream_lhs.nextTree());

              }
              stream_lhs.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 61, lhsList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "lhsList"

  public static class lhs_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "lhs"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:483:1: lhs : exp annotationList -> ^( LHS exp annotationList ) ;
  public final AntlrPilarParser.lhs_return lhs() throws RecognitionException {
    AntlrPilarParser.lhs_return retval = new AntlrPilarParser.lhs_return();
    retval.start = input.LT(1);
    int lhs_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.exp_return exp236 = null;

    AntlrPilarParser.annotationList_return annotationList237 = null;

    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 62)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:484:2: ( exp annotationList -> ^( LHS exp annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:484:4: exp annotationList
      {
        pushFollow(FOLLOW_exp_in_lhs4406);
        exp236 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp236.getTree());
        pushFollow(FOLLOW_annotationList_in_lhs4408);
        annotationList237 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList237.getTree());

        // AST REWRITE
        // elements: exp, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 484:41: -> ^( LHS exp annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:484:44: ^( LHS exp annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LHS, "LHS"),
                  root_1);

              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 62, lhs_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "lhs"

  public static class seqTransformation_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "seqTransformation"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:487:1: seqTransformation : ( action )* ( jump )? -> ^( LIST ( action )* ) ^( OPTION ( jump )? ) ;
  public final AntlrPilarParser.seqTransformation_return seqTransformation()
      throws RecognitionException {
    AntlrPilarParser.seqTransformation_return retval = new AntlrPilarParser.seqTransformation_return();
    retval.start = input.LT(1);
    int seqTransformation_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.action_return action238 = null;

    AntlrPilarParser.jump_return jump239 = null;

    RewriteRuleSubtreeStream stream_action = new RewriteRuleSubtreeStream(
        adaptor, "rule action");
    RewriteRuleSubtreeStream stream_jump = new RewriteRuleSubtreeStream(
        adaptor, "rule jump");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 63)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:488:2: ( ( action )* ( jump )? -> ^( LIST ( action )* ) ^( OPTION ( jump )? ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:488:4: ( action )* ( jump )?
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:488:4: ( action )*
        loop77: do {
          int alt77 = 2;
          alt77 = dfa77.predict(input);
          switch (alt77) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: action
            {
              pushFollow(FOLLOW_action_in_seqTransformation4448);
              action238 = action();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_action.add(action238.getTree());

            }
              break;

            default:
              break loop77;
          }
        } while (true);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:488:12: ( jump )?
        int alt78 = 2;
        int LA78_0 = input.LA(1);

        if (((LA78_0 >= 204 && LA78_0 <= 208))) {
          alt78 = 1;
        }
        switch (alt78) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: jump
          {
            pushFollow(FOLLOW_jump_in_seqTransformation4451);
            jump239 = jump();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_jump.add(jump239.getTree());

          }
            break;

        }

        // AST REWRITE
        // elements: action, jump
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 488:41: -> ^( LIST ( action )* ) ^( OPTION ( jump )? )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:488:45: ^( LIST ( action )* )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LIST, "LIST"),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:488:52: ( action )*
              while (stream_action.hasNext()) {
                adaptor.addChild(root_1, stream_action.nextTree());

              }
              stream_action.reset();

              adaptor.addChild(root_0, root_1);
            }
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:488:61: ^( OPTION ( jump )? )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(OPTION, "OPTION"),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:488:70: ( jump )?
              if (stream_jump.hasNext()) {
                adaptor.addChild(root_1, stream_jump.nextTree());

              }
              stream_jump.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 63, seqTransformation_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "seqTransformation"

  public static class action_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "action"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:491:1: action : (t= 'assert' '(' e1= exp ',' e2= exp ')' annotationList ';' -> ^( ASSERTM[$t] $e1 $e2 annotationList ) | t= 'assert' exp annotationList ';' -> ^( ASSERT[$t] exp annotationList ) | t= 'assume' '(' e1= exp ',' e2= exp ')' annotationList ';' -> ^( ASSUMEM[$t] $e1 $e2 annotationList ) | t= 'assume' exp annotationList ';' -> ^( ASSUME[$t] exp annotationList ) | t= 'throw' exp annotationList ';' -> ^( THROW[$t] exp annotationList ) | assignment | startThread | extCall );
  public final AntlrPilarParser.action_return action()
      throws RecognitionException {
    AntlrPilarParser.action_return retval = new AntlrPilarParser.action_return();
    retval.start = input.LT(1);
    int action_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal240 = null;
    Token char_literal241 = null;
    Token char_literal242 = null;
    Token char_literal244 = null;
    Token char_literal247 = null;
    Token char_literal248 = null;
    Token char_literal249 = null;
    Token char_literal250 = null;
    Token char_literal252 = null;
    Token char_literal255 = null;
    Token char_literal258 = null;
    AntlrPilarParser.exp_return e1 = null;

    AntlrPilarParser.exp_return e2 = null;

    AntlrPilarParser.annotationList_return annotationList243 = null;

    AntlrPilarParser.exp_return exp245 = null;

    AntlrPilarParser.annotationList_return annotationList246 = null;

    AntlrPilarParser.annotationList_return annotationList251 = null;

    AntlrPilarParser.exp_return exp253 = null;

    AntlrPilarParser.annotationList_return annotationList254 = null;

    AntlrPilarParser.exp_return exp256 = null;

    AntlrPilarParser.annotationList_return annotationList257 = null;

    AntlrPilarParser.assignment_return assignment259 = null;

    AntlrPilarParser.startThread_return startThread260 = null;

    AntlrPilarParser.extCall_return extCall261 = null;

    Object t_tree = null;
    Object char_literal240_tree = null;
    Object char_literal241_tree = null;
    Object char_literal242_tree = null;
    Object char_literal244_tree = null;
    Object char_literal247_tree = null;
    Object char_literal248_tree = null;
    Object char_literal249_tree = null;
    Object char_literal250_tree = null;
    Object char_literal252_tree = null;
    Object char_literal255_tree = null;
    Object char_literal258_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_198 = new RewriteRuleTokenStream(adaptor,
        "token 198");
    RewriteRuleTokenStream stream_199 = new RewriteRuleTokenStream(adaptor,
        "token 199");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleTokenStream stream_197 = new RewriteRuleTokenStream(adaptor,
        "token 197");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 64)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:492:2: (t= 'assert' '(' e1= exp ',' e2= exp ')' annotationList ';' -> ^( ASSERTM[$t] $e1 $e2 annotationList ) | t= 'assert' exp annotationList ';' -> ^( ASSERT[$t] exp annotationList ) | t= 'assume' '(' e1= exp ',' e2= exp ')' annotationList ';' -> ^( ASSUMEM[$t] $e1 $e2 annotationList ) | t= 'assume' exp annotationList ';' -> ^( ASSUME[$t] exp annotationList ) | t= 'throw' exp annotationList ';' -> ^( THROW[$t] exp annotationList ) | assignment | startThread | extCall )
      int alt79 = 8;
      alt79 = dfa79.predict(input);
      switch (alt79) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:492:4: t= 'assert' '(' e1= exp ',' e2= exp ')' annotationList ';'
        {
          t = (Token) match(input, 197, FOLLOW_197_in_action4505);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_197.add(t);

          char_literal240 = (Token) match(input, 169, FOLLOW_169_in_action4507);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_169.add(char_literal240);

          pushFollow(FOLLOW_exp_in_action4511);
          e1 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(e1.getTree());
          char_literal241 = (Token) match(input, 172, FOLLOW_172_in_action4513);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_172.add(char_literal241);

          pushFollow(FOLLOW_exp_in_action4517);
          e2 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(e2.getTree());
          char_literal242 = (Token) match(input, 170, FOLLOW_170_in_action4519);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_170.add(char_literal242);

          pushFollow(FOLLOW_annotationList_in_action4524);
          annotationList243 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList243.getTree());
          char_literal244 = (Token) match(input, 175, FOLLOW_175_in_action4526);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_175.add(char_literal244);

          // AST REWRITE
          // elements: annotationList, e1, e2
          // token labels: 
          // rule labels: retval, e1, e2
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
                adaptor, "rule e1", e1 != null ? e1.tree : null);
            RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
                adaptor, "rule e2", e2 != null ? e2.tree : null);

            root_0 = (Object) adaptor.nil();
            // 493:41: -> ^( ASSERTM[$t] $e1 $e2 annotationList )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:493:44: ^( ASSERTM[$t] $e1 $e2 annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ASSERTM, t),
                    root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());
                adaptor.addChild(root_1, stream_e2.nextTree());
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:494:4: t= 'assert' exp annotationList ';'
        {
          t = (Token) match(input, 197, FOLLOW_197_in_action4566);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_197.add(t);

          pushFollow(FOLLOW_exp_in_action4568);
          exp245 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp245.getTree());
          pushFollow(FOLLOW_annotationList_in_action4570);
          annotationList246 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList246.getTree());
          char_literal247 = (Token) match(input, 175, FOLLOW_175_in_action4572);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_175.add(char_literal247);

          // AST REWRITE
          // elements: annotationList, exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 494:41: -> ^( ASSERT[$t] exp annotationList )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:494:44: ^( ASSERT[$t] exp annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ASSERT, t),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:495:4: t= 'assume' '(' e1= exp ',' e2= exp ')' annotationList ';'
        {
          t = (Token) match(input, 198, FOLLOW_198_in_action4593);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_198.add(t);

          char_literal248 = (Token) match(input, 169, FOLLOW_169_in_action4595);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_169.add(char_literal248);

          pushFollow(FOLLOW_exp_in_action4599);
          e1 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(e1.getTree());
          char_literal249 = (Token) match(input, 172, FOLLOW_172_in_action4601);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_172.add(char_literal249);

          pushFollow(FOLLOW_exp_in_action4605);
          e2 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(e2.getTree());
          char_literal250 = (Token) match(input, 170, FOLLOW_170_in_action4607);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_170.add(char_literal250);

          pushFollow(FOLLOW_annotationList_in_action4612);
          annotationList251 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList251.getTree());
          char_literal252 = (Token) match(input, 175, FOLLOW_175_in_action4614);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_175.add(char_literal252);

          // AST REWRITE
          // elements: e2, e1, annotationList
          // token labels: 
          // rule labels: retval, e1, e2
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
                adaptor, "rule e1", e1 != null ? e1.tree : null);
            RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
                adaptor, "rule e2", e2 != null ? e2.tree : null);

            root_0 = (Object) adaptor.nil();
            // 496:41: -> ^( ASSUMEM[$t] $e1 $e2 annotationList )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:496:44: ^( ASSUMEM[$t] $e1 $e2 annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ASSUMEM, t),
                    root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());
                adaptor.addChild(root_1, stream_e2.nextTree());
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:497:4: t= 'assume' exp annotationList ';'
        {
          t = (Token) match(input, 198, FOLLOW_198_in_action4654);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_198.add(t);

          pushFollow(FOLLOW_exp_in_action4656);
          exp253 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp253.getTree());
          pushFollow(FOLLOW_annotationList_in_action4658);
          annotationList254 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList254.getTree());
          char_literal255 = (Token) match(input, 175, FOLLOW_175_in_action4660);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_175.add(char_literal255);

          // AST REWRITE
          // elements: annotationList, exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 497:41: -> ^( ASSUME[$t] exp annotationList )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:497:44: ^( ASSUME[$t] exp annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ASSUME, t),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:498:4: t= 'throw' exp annotationList ';'
        {
          t = (Token) match(input, 199, FOLLOW_199_in_action4681);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_199.add(t);

          pushFollow(FOLLOW_exp_in_action4683);
          exp256 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp256.getTree());
          pushFollow(FOLLOW_annotationList_in_action4685);
          annotationList257 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList257.getTree());
          char_literal258 = (Token) match(input, 175, FOLLOW_175_in_action4687);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_175.add(char_literal258);

          // AST REWRITE
          // elements: annotationList, exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 498:41: -> ^( THROW[$t] exp annotationList )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:498:44: ^( THROW[$t] exp annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(THROW, t),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 6:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:499:4: assignment
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_assignment_in_action4707);
          assignment259 = assignment();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, assignment259.getTree());

        }
          break;
        case 7:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:500:4: startThread
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_startThread_in_action4713);
          startThread260 = startThread();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, startThread260.getTree());

        }
          break;
        case 8:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:501:4: extCall
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_extCall_in_action4718);
          extCall261 = extCall();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, extCall261.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 64, action_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "action"

  public static class assignment_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "assignment"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:504:1: assignment : lhsList (t= ':=' | t= ACTION_EXT_OP ) rhs ( ',' rhs )* annotationList ';' -> ^( ASSIGN lhsList $t ^( LIST ( rhs )+ ) annotationList ) ;
  public final AntlrPilarParser.assignment_return assignment()
      throws RecognitionException {
    AntlrPilarParser.assignment_return retval = new AntlrPilarParser.assignment_return();
    retval.start = input.LT(1);
    int assignment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal264 = null;
    Token char_literal267 = null;
    AntlrPilarParser.lhsList_return lhsList262 = null;

    AntlrPilarParser.rhs_return rhs263 = null;

    AntlrPilarParser.rhs_return rhs265 = null;

    AntlrPilarParser.annotationList_return annotationList266 = null;

    Object t_tree = null;
    Object char_literal264_tree = null;
    Object char_literal267_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_ACTION_EXT_OP = new RewriteRuleTokenStream(
        adaptor, "token ACTION_EXT_OP");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_lhsList = new RewriteRuleSubtreeStream(
        adaptor, "rule lhsList");
    RewriteRuleSubtreeStream stream_rhs = new RewriteRuleSubtreeStream(adaptor,
        "rule rhs");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 65)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:505:2: ( lhsList (t= ':=' | t= ACTION_EXT_OP ) rhs ( ',' rhs )* annotationList ';' -> ^( ASSIGN lhsList $t ^( LIST ( rhs )+ ) annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:505:4: lhsList (t= ':=' | t= ACTION_EXT_OP ) rhs ( ',' rhs )* annotationList ';'
      {
        pushFollow(FOLLOW_lhsList_in_assignment4729);
        lhsList262 = lhsList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_lhsList.add(lhsList262.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:506:4: (t= ':=' | t= ACTION_EXT_OP )
        int alt80 = 2;
        int LA80_0 = input.LA(1);

        if ((LA80_0 == 200)) {
          alt80 = 1;
        } else if ((LA80_0 == ACTION_EXT_OP)) {
          alt80 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 80, 0, input);

          throw nvae;
        }
        switch (alt80) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:506:6: t= ':='
          {
            t = (Token) match(input, 200, FOLLOW_200_in_assignment4739);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_200.add(t);

          }
            break;
          case 2:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:507:6: t= ACTION_EXT_OP
          {
            t = (Token) match(
                input,
                ACTION_EXT_OP,
                FOLLOW_ACTION_EXT_OP_in_assignment4749);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ACTION_EXT_OP.add(t);

          }
            break;

        }

        pushFollow(FOLLOW_rhs_in_assignment4755);
        rhs263 = rhs();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_rhs.add(rhs263.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:508:8: ( ',' rhs )*
        loop81: do {
          int alt81 = 2;
          int LA81_0 = input.LA(1);

          if ((LA81_0 == 172)) {
            alt81 = 1;
          }

          switch (alt81) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:508:10: ',' rhs
            {
              char_literal264 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_assignment4759);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal264);

              pushFollow(FOLLOW_rhs_in_assignment4761);
              rhs265 = rhs();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_rhs.add(rhs265.getTree());

            }
              break;

            default:
              break loop81;
          }
        } while (true);

        pushFollow(FOLLOW_annotationList_in_assignment4769);
        annotationList266 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList266.getTree());
        char_literal267 = (Token) match(
            input,
            175,
            FOLLOW_175_in_assignment4771);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal267);

        // AST REWRITE
        // elements: t, lhsList, rhs, annotationList
        // token labels: t
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(adaptor,
              "token t", t);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 509:41: -> ^( ASSIGN lhsList $t ^( LIST ( rhs )+ ) annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:509:44: ^( ASSIGN lhsList $t ^( LIST ( rhs )+ ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ASSIGN, "ASSIGN"),
                  root_1);

              adaptor.addChild(root_1, stream_lhsList.nextTree());
              adaptor.addChild(root_1, stream_t.nextNode());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:509:64: ^( LIST ( rhs )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_rhs.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_rhs.hasNext()) {
                  adaptor.addChild(root_2, stream_rhs.nextTree());

                }
                stream_rhs.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 65, assignment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "assignment"

  public static class rhs_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "rhs"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:512:1: rhs : annotationList exp -> ^( RHS annotationList exp ) ;
  public final AntlrPilarParser.rhs_return rhs() throws RecognitionException {
    AntlrPilarParser.rhs_return retval = new AntlrPilarParser.rhs_return();
    retval.start = input.LT(1);
    int rhs_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.annotationList_return annotationList268 = null;

    AntlrPilarParser.exp_return exp269 = null;

    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 66)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:513:2: ( annotationList exp -> ^( RHS annotationList exp ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:513:4: annotationList exp
      {
        pushFollow(FOLLOW_annotationList_in_rhs4820);
        annotationList268 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList268.getTree());
        pushFollow(FOLLOW_exp_in_rhs4822);
        exp269 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp269.getTree());

        // AST REWRITE
        // elements: exp, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 513:41: -> ^( RHS annotationList exp )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:513:44: ^( RHS annotationList exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(RHS, "RHS"),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 66, rhs_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "rhs"

  public static class startThread_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "startThread"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:516:1: startThread : t= 'start' name ( '[' num= exp ']' )? (arg= exp )? annotationList ';' -> ^( START[$t] name ^( OPTION ( $num)? ) ^( OPTION ( $arg)? ) annotationList ) ;
  public final AntlrPilarParser.startThread_return startThread()
      throws RecognitionException {
    AntlrPilarParser.startThread_return retval = new AntlrPilarParser.startThread_return();
    retval.start = input.LT(1);
    int startThread_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal271 = null;
    Token char_literal272 = null;
    Token char_literal274 = null;
    AntlrPilarParser.exp_return num = null;

    AntlrPilarParser.exp_return arg = null;

    AntlrPilarParser.name_return name270 = null;

    AntlrPilarParser.annotationList_return annotationList273 = null;

    Object t_tree = null;
    Object char_literal271_tree = null;
    Object char_literal272_tree = null;
    Object char_literal274_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_203 = new RewriteRuleTokenStream(adaptor,
        "token 203");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_201 = new RewriteRuleTokenStream(adaptor,
        "token 201");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 67)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:517:2: (t= 'start' name ( '[' num= exp ']' )? (arg= exp )? annotationList ';' -> ^( START[$t] name ^( OPTION ( $num)? ) ^( OPTION ( $arg)? ) annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:517:4: t= 'start' name ( '[' num= exp ']' )? (arg= exp )? annotationList ';'
      {
        t = (Token) match(input, 201, FOLLOW_201_in_startThread4863);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_201.add(t);

        pushFollow(FOLLOW_name_in_startThread4865);
        name270 = name();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_name.add(name270.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:518:4: ( '[' num= exp ']' )?
        int alt82 = 2;
        int LA82_0 = input.LA(1);

        if ((LA82_0 == 202)) {
          alt82 = 1;
        }
        switch (alt82) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:518:6: '[' num= exp ']'
          {
            char_literal271 = (Token) match(
                input,
                202,
                FOLLOW_202_in_startThread4872);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_202.add(char_literal271);

            pushFollow(FOLLOW_exp_in_startThread4876);
            num = exp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_exp.add(num.getTree());
            char_literal272 = (Token) match(
                input,
                203,
                FOLLOW_203_in_startThread4878);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_203.add(char_literal272);

          }
            break;

        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:519:4: (arg= exp )?
        int alt83 = 2;
        int LA83_0 = input.LA(1);

        if (((LA83_0 >= HEX_LIT && LA83_0 <= OCT_LIT) || LA83_0 == ID
            || LA83_0 == GLOBALID
            || (LA83_0 >= ADD_OP && LA83_0 <= RATIONAL_LIT) || LA83_0 == 169
            || LA83_0 == 177 || LA83_0 == 204 || LA83_0 == 208 || LA83_0 == 215
            || (LA83_0 >= 217 && LA83_0 <= 221) || LA83_0 == 223)) {
          alt83 = 1;
        }
        switch (alt83) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:519:5: arg= exp
          {
            pushFollow(FOLLOW_exp_in_startThread4889);
            arg = exp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_exp.add(arg.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_startThread4897);
        annotationList273 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList273.getTree());
        char_literal274 = (Token) match(
            input,
            175,
            FOLLOW_175_in_startThread4899);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal274);

        // AST REWRITE
        // elements: name, annotationList, arg, num
        // token labels: 
        // rule labels: arg, retval, num
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_arg = new RewriteRuleSubtreeStream(
              adaptor, "rule arg", arg != null ? arg.tree : null);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);
          RewriteRuleSubtreeStream stream_num = new RewriteRuleSubtreeStream(
              adaptor, "rule num", num != null ? num.tree : null);

          root_0 = (Object) adaptor.nil();
          // 520:41: -> ^( START[$t] name ^( OPTION ( $num)? ) ^( OPTION ( $arg)? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:520:44: ^( START[$t] name ^( OPTION ( $num)? ) ^( OPTION ( $arg)? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(START, t),
                  root_1);

              adaptor.addChild(root_1, stream_name.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:520:61: ^( OPTION ( $num)? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:520:70: ( $num)?
                if (stream_num.hasNext()) {
                  adaptor.addChild(root_2, stream_num.nextTree());

                }
                stream_num.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:520:77: ^( OPTION ( $arg)? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:520:86: ( $arg)?
                if (stream_arg.hasNext()) {
                  adaptor.addChild(root_2, stream_arg.nextTree());

                }
                stream_arg.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 67, startThread_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "startThread"

  public static class extCall_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "extCall"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:523:1: extCall : exp annotationList ';' -> ^( ACTION_EXT_CALL exp annotationList ) ;
  public final AntlrPilarParser.extCall_return extCall()
      throws RecognitionException {
    AntlrPilarParser.extCall_return retval = new AntlrPilarParser.extCall_return();
    retval.start = input.LT(1);
    int extCall_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal277 = null;
    AntlrPilarParser.exp_return exp275 = null;

    AntlrPilarParser.annotationList_return annotationList276 = null;

    Object char_literal277_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 68)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:524:2: ( exp annotationList ';' -> ^( ACTION_EXT_CALL exp annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:524:4: exp annotationList ';'
      {
        pushFollow(FOLLOW_exp_in_extCall4956);
        exp275 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp275.getTree());
        pushFollow(FOLLOW_annotationList_in_extCall4958);
        annotationList276 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList276.getTree());
        char_literal277 = (Token) match(input, 175, FOLLOW_175_in_extCall4960);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal277);

        // AST REWRITE
        // elements: annotationList, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 524:41: -> ^( ACTION_EXT_CALL exp annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:524:44: ^( ACTION_EXT_CALL exp annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ACTION_EXT_CALL, "ACTION_EXT_CALL"),
                  root_1);

              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 68, extCall_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "extCall"

  public static class jump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "jump"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:527:1: jump : ( gotoJump | returnJump | ifThenJump ( 'else' ifThenJump )* ( ifElseJump )? annotationList ';' -> ^( IF_JUMP ^( LIST ( ifThenJump )+ ) ^( OPTION ( ifElseJump )? ) annotationList ) | t= 'switch' exp ( switchCaseJump )+ ( switchDefaultJump )? annotationList ';' -> ^( SWITCH_JUMP[$t] exp ^( LIST ( switchCaseJump )+ ) ^( OPTION ( switchDefaultJump )? ) annotationList ) | t= 'call' ( nameExp ( ',' nameExp )* ':=' )? exp annotationList ';' ( gotoJump )? -> ^( CALL_JUMP[$t] ^( LIST ( nameExp )* ) exp ^( OPTION ( gotoJump )? ) annotationList ) );
  public final AntlrPilarParser.jump_return jump() throws RecognitionException {
    AntlrPilarParser.jump_return retval = new AntlrPilarParser.jump_return();
    retval.start = input.LT(1);
    int jump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal281 = null;
    Token char_literal285 = null;
    Token char_literal290 = null;
    Token char_literal292 = null;
    Token string_literal294 = null;
    Token char_literal297 = null;
    AntlrPilarParser.gotoJump_return gotoJump278 = null;

    AntlrPilarParser.returnJump_return returnJump279 = null;

    AntlrPilarParser.ifThenJump_return ifThenJump280 = null;

    AntlrPilarParser.ifThenJump_return ifThenJump282 = null;

    AntlrPilarParser.ifElseJump_return ifElseJump283 = null;

    AntlrPilarParser.annotationList_return annotationList284 = null;

    AntlrPilarParser.exp_return exp286 = null;

    AntlrPilarParser.switchCaseJump_return switchCaseJump287 = null;

    AntlrPilarParser.switchDefaultJump_return switchDefaultJump288 = null;

    AntlrPilarParser.annotationList_return annotationList289 = null;

    AntlrPilarParser.nameExp_return nameExp291 = null;

    AntlrPilarParser.nameExp_return nameExp293 = null;

    AntlrPilarParser.exp_return exp295 = null;

    AntlrPilarParser.annotationList_return annotationList296 = null;

    AntlrPilarParser.gotoJump_return gotoJump298 = null;

    Object t_tree = null;
    Object string_literal281_tree = null;
    Object char_literal285_tree = null;
    Object char_literal290_tree = null;
    Object char_literal292_tree = null;
    Object string_literal294_tree = null;
    Object char_literal297_tree = null;
    RewriteRuleTokenStream stream_204 = new RewriteRuleTokenStream(adaptor,
        "token 204");
    RewriteRuleTokenStream stream_205 = new RewriteRuleTokenStream(adaptor,
        "token 205");
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_200 = new RewriteRuleTokenStream(adaptor,
        "token 200");
    RewriteRuleTokenStream stream_196 = new RewriteRuleTokenStream(adaptor,
        "token 196");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_switchDefaultJump = new RewriteRuleSubtreeStream(
        adaptor, "rule switchDefaultJump");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_gotoJump = new RewriteRuleSubtreeStream(
        adaptor, "rule gotoJump");
    RewriteRuleSubtreeStream stream_ifThenJump = new RewriteRuleSubtreeStream(
        adaptor, "rule ifThenJump");
    RewriteRuleSubtreeStream stream_nameExp = new RewriteRuleSubtreeStream(
        adaptor, "rule nameExp");
    RewriteRuleSubtreeStream stream_ifElseJump = new RewriteRuleSubtreeStream(
        adaptor, "rule ifElseJump");
    RewriteRuleSubtreeStream stream_switchCaseJump = new RewriteRuleSubtreeStream(
        adaptor, "rule switchCaseJump");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 69)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:528:2: ( gotoJump | returnJump | ifThenJump ( 'else' ifThenJump )* ( ifElseJump )? annotationList ';' -> ^( IF_JUMP ^( LIST ( ifThenJump )+ ) ^( OPTION ( ifElseJump )? ) annotationList ) | t= 'switch' exp ( switchCaseJump )+ ( switchDefaultJump )? annotationList ';' -> ^( SWITCH_JUMP[$t] exp ^( LIST ( switchCaseJump )+ ) ^( OPTION ( switchDefaultJump )? ) annotationList ) | t= 'call' ( nameExp ( ',' nameExp )* ':=' )? exp annotationList ';' ( gotoJump )? -> ^( CALL_JUMP[$t] ^( LIST ( nameExp )* ) exp ^( OPTION ( gotoJump )? ) annotationList ) )
      int alt91 = 5;
      switch (input.LA(1)) {
        case 206: {
          alt91 = 1;
        }
          break;
        case 207: {
          alt91 = 2;
        }
          break;
        case 208: {
          alt91 = 3;
        }
          break;
        case 204: {
          alt91 = 4;
        }
          break;
        case 205: {
          alt91 = 5;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 91, 0, input);

          throw nvae;
      }

      switch (alt91) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:528:4: gotoJump
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_gotoJump_in_jump4995);
          gotoJump278 = gotoJump();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, gotoJump278.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:529:4: returnJump
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_returnJump_in_jump5000);
          returnJump279 = returnJump();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, returnJump279.getTree());

        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:530:4: ifThenJump ( 'else' ifThenJump )* ( ifElseJump )? annotationList ';'
        {
          pushFollow(FOLLOW_ifThenJump_in_jump5005);
          ifThenJump280 = ifThenJump();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_ifThenJump.add(ifThenJump280.getTree());
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:531:4: ( 'else' ifThenJump )*
          loop84: do {
            int alt84 = 2;
            int LA84_0 = input.LA(1);

            if ((LA84_0 == 196)) {
              int LA84_1 = input.LA(2);

              if ((LA84_1 == 208)) {
                alt84 = 1;
              }

            }

            switch (alt84) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:531:6: 'else' ifThenJump
              {
                string_literal281 = (Token) match(
                    input,
                    196,
                    FOLLOW_196_in_jump5012);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_196.add(string_literal281);

                pushFollow(FOLLOW_ifThenJump_in_jump5014);
                ifThenJump282 = ifThenJump();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_ifThenJump.add(ifThenJump282.getTree());

              }
                break;

              default:
                break loop84;
            }
          } while (true);

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:532:4: ( ifElseJump )?
          int alt85 = 2;
          int LA85_0 = input.LA(1);

          if ((LA85_0 == 196)) {
            alt85 = 1;
          }
          switch (alt85) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ifElseJump
            {
              pushFollow(FOLLOW_ifElseJump_in_jump5022);
              ifElseJump283 = ifElseJump();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_ifElseJump.add(ifElseJump283.getTree());

            }
              break;

          }

          pushFollow(FOLLOW_annotationList_in_jump5029);
          annotationList284 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList284.getTree());
          char_literal285 = (Token) match(input, 175, FOLLOW_175_in_jump5031);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_175.add(char_literal285);

          // AST REWRITE
          // elements: ifElseJump, ifThenJump, annotationList
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 533:41: -> ^( IF_JUMP ^( LIST ( ifThenJump )+ ) ^( OPTION ( ifElseJump )? ) annotationList )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:533:44: ^( IF_JUMP ^( LIST ( ifThenJump )+ ) ^( OPTION ( ifElseJump )? ) annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(IF_JUMP, "IF_JUMP"),
                    root_1);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:533:54: ^( LIST ( ifThenJump )+ )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(LIST, "LIST"),
                      root_2);

                  if (!(stream_ifThenJump.hasNext())) {
                    throw new RewriteEarlyExitException();
                  }
                  while (stream_ifThenJump.hasNext()) {
                    adaptor.addChild(root_2, stream_ifThenJump.nextTree());

                  }
                  stream_ifThenJump.reset();

                  adaptor.addChild(root_1, root_2);
                }
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:533:74: ^( OPTION ( ifElseJump )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:533:83: ( ifElseJump )?
                  if (stream_ifElseJump.hasNext()) {
                    adaptor.addChild(root_2, stream_ifElseJump.nextTree());

                  }
                  stream_ifElseJump.reset();

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:534:4: t= 'switch' exp ( switchCaseJump )+ ( switchDefaultJump )? annotationList ';'
        {
          t = (Token) match(input, 204, FOLLOW_204_in_jump5078);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_204.add(t);

          pushFollow(FOLLOW_exp_in_jump5080);
          exp286 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp286.getTree());
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:534:19: ( switchCaseJump )+
          int cnt86 = 0;
          loop86: do {
            int alt86 = 2;
            int LA86_0 = input.LA(1);

            if ((LA86_0 == 194)) {
              int LA86_1 = input.LA(2);

              if (((LA86_1 >= HEX_LIT && LA86_1 <= OCT_LIT) || LA86_1 == ID
                  || LA86_1 == GLOBALID
                  || (LA86_1 >= ADD_OP && LA86_1 <= RATIONAL_LIT)
                  || LA86_1 == 169 || LA86_1 == 177 || LA86_1 == 204
                  || LA86_1 == 208 || LA86_1 == 215
                  || (LA86_1 >= 217 && LA86_1 <= 221) || LA86_1 == 223)) {
                alt86 = 1;
              }

            }

            switch (alt86) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: switchCaseJump
              {
                pushFollow(FOLLOW_switchCaseJump_in_jump5082);
                switchCaseJump287 = switchCaseJump();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_switchCaseJump.add(switchCaseJump287.getTree());

              }
                break;

              default:
                if (cnt86 >= 1) break loop86;
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                EarlyExitException eee = new EarlyExitException(86, input);
                throw eee;
            }
            cnt86++;
          } while (true);

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:535:4: ( switchDefaultJump )?
          int alt87 = 2;
          int LA87_0 = input.LA(1);

          if ((LA87_0 == 194)) {
            alt87 = 1;
          }
          switch (alt87) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: switchDefaultJump
            {
              pushFollow(FOLLOW_switchDefaultJump_in_jump5094);
              switchDefaultJump288 = switchDefaultJump();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_switchDefaultJump.add(switchDefaultJump288.getTree());

            }
              break;

          }

          pushFollow(FOLLOW_annotationList_in_jump5100);
          annotationList289 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList289.getTree());
          char_literal290 = (Token) match(input, 175, FOLLOW_175_in_jump5102);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_175.add(char_literal290);

          // AST REWRITE
          // elements: annotationList, exp, switchCaseJump, switchDefaultJump
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 536:41: -> ^( SWITCH_JUMP[$t] exp ^( LIST ( switchCaseJump )+ ) ^( OPTION ( switchDefaultJump )? ) annotationList )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:536:44: ^( SWITCH_JUMP[$t] exp ^( LIST ( switchCaseJump )+ ) ^( OPTION ( switchDefaultJump )? ) annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(SWITCH_JUMP, t),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:536:66: ^( LIST ( switchCaseJump )+ )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(LIST, "LIST"),
                      root_2);

                  if (!(stream_switchCaseJump.hasNext())) {
                    throw new RewriteEarlyExitException();
                  }
                  while (stream_switchCaseJump.hasNext()) {
                    adaptor.addChild(root_2, stream_switchCaseJump.nextTree());

                  }
                  stream_switchCaseJump.reset();

                  adaptor.addChild(root_1, root_2);
                }
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:536:90: ^( OPTION ( switchDefaultJump )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:536:99: ( switchDefaultJump )?
                  if (stream_switchDefaultJump.hasNext()) {
                    adaptor.addChild(
                        root_2,
                        stream_switchDefaultJump.nextTree());

                  }
                  stream_switchDefaultJump.reset();

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:537:4: t= 'call' ( nameExp ( ',' nameExp )* ':=' )? exp annotationList ';' ( gotoJump )?
        {
          t = (Token) match(input, 205, FOLLOW_205_in_jump5152);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_205.add(t);

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:538:4: ( nameExp ( ',' nameExp )* ':=' )?
          int alt89 = 2;
          alt89 = dfa89.predict(input);
          switch (alt89) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:538:6: nameExp ( ',' nameExp )* ':='
            {
              pushFollow(FOLLOW_nameExp_in_jump5159);
              nameExp291 = nameExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_nameExp.add(nameExp291.getTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:538:14: ( ',' nameExp )*
              loop88: do {
                int alt88 = 2;
                int LA88_0 = input.LA(1);

                if ((LA88_0 == 172)) {
                  alt88 = 1;
                }

                switch (alt88) {
                  case 1:
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:538:16: ',' nameExp
                  {
                    char_literal292 = (Token) match(
                        input,
                        172,
                        FOLLOW_172_in_jump5163);
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_172.add(char_literal292);

                    pushFollow(FOLLOW_nameExp_in_jump5165);
                    nameExp293 = nameExp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_nameExp.add(nameExp293.getTree());

                  }
                    break;

                  default:
                    break loop88;
                }
              } while (true);

              string_literal294 = (Token) match(
                  input,
                  200,
                  FOLLOW_200_in_jump5170);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_200.add(string_literal294);

            }
              break;

          }

          pushFollow(FOLLOW_exp_in_jump5178);
          exp295 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp295.getTree());
          pushFollow(FOLLOW_annotationList_in_jump5180);
          annotationList296 = annotationList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_annotationList.add(annotationList296.getTree());
          char_literal297 = (Token) match(input, 175, FOLLOW_175_in_jump5182);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_175.add(char_literal297);

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:540:4: ( gotoJump )?
          int alt90 = 2;
          int LA90_0 = input.LA(1);

          if ((LA90_0 == 206)) {
            alt90 = 1;
          }
          switch (alt90) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:540:6: gotoJump
            {
              pushFollow(FOLLOW_gotoJump_in_jump5189);
              gotoJump298 = gotoJump();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_gotoJump.add(gotoJump298.getTree());

            }
              break;

          }

          // AST REWRITE
          // elements: gotoJump, exp, nameExp, annotationList
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 540:41: -> ^( CALL_JUMP[$t] ^( LIST ( nameExp )* ) exp ^( OPTION ( gotoJump )? ) annotationList )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:540:44: ^( CALL_JUMP[$t] ^( LIST ( nameExp )* ) exp ^( OPTION ( gotoJump )? ) annotationList )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(CALL_JUMP, t),
                    root_1);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:540:60: ^( LIST ( nameExp )* )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(LIST, "LIST"),
                      root_2);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:540:67: ( nameExp )*
                  while (stream_nameExp.hasNext()) {
                    adaptor.addChild(root_2, stream_nameExp.nextTree());

                  }
                  stream_nameExp.reset();

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_exp.nextTree());
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:540:81: ^( OPTION ( gotoJump )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:540:90: ( gotoJump )?
                  if (stream_gotoJump.hasNext()) {
                    adaptor.addChild(root_2, stream_gotoJump.nextTree());

                  }
                  stream_gotoJump.reset();

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_annotationList.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 69, jump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "jump"

  public static class gotoJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "gotoJump"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:543:1: gotoJump : t= 'goto' ID annotationList ';' -> ^( GOTO[$t] ID annotationList ) ;
  public final AntlrPilarParser.gotoJump_return gotoJump()
      throws RecognitionException {
    AntlrPilarParser.gotoJump_return retval = new AntlrPilarParser.gotoJump_return();
    retval.start = input.LT(1);
    int gotoJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID299 = null;
    Token char_literal301 = null;
    AntlrPilarParser.annotationList_return annotationList300 = null;

    Object t_tree = null;
    Object ID299_tree = null;
    Object char_literal301_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_206 = new RewriteRuleTokenStream(adaptor,
        "token 206");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 70)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:544:2: (t= 'goto' ID annotationList ';' -> ^( GOTO[$t] ID annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:544:4: t= 'goto' ID annotationList ';'
      {
        t = (Token) match(input, 206, FOLLOW_206_in_gotoJump5254);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_206.add(t);

        ID299 = (Token) match(input, ID, FOLLOW_ID_in_gotoJump5256);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID299);

        pushFollow(FOLLOW_annotationList_in_gotoJump5258);
        annotationList300 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList300.getTree());
        char_literal301 = (Token) match(input, 175, FOLLOW_175_in_gotoJump5260);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal301);

        // AST REWRITE
        // elements: ID, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 544:41: -> ^( GOTO[$t] ID annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:544:44: ^( GOTO[$t] ID annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(GOTO, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 70, gotoJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "gotoJump"

  public static class returnJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "returnJump"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:547:1: returnJump : t= 'return' ( exp )? annotationList ';' -> ^( RETURN[$t] ^( OPTION ( exp )? ) annotationList ) ;
  public final AntlrPilarParser.returnJump_return returnJump()
      throws RecognitionException {
    AntlrPilarParser.returnJump_return retval = new AntlrPilarParser.returnJump_return();
    retval.start = input.LT(1);
    int returnJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal304 = null;
    AntlrPilarParser.exp_return exp302 = null;

    AntlrPilarParser.annotationList_return annotationList303 = null;

    Object t_tree = null;
    Object char_literal304_tree = null;
    RewriteRuleTokenStream stream_175 = new RewriteRuleTokenStream(adaptor,
        "token 175");
    RewriteRuleTokenStream stream_207 = new RewriteRuleTokenStream(adaptor,
        "token 207");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 71)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:548:2: (t= 'return' ( exp )? annotationList ';' -> ^( RETURN[$t] ^( OPTION ( exp )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:548:4: t= 'return' ( exp )? annotationList ';'
      {
        t = (Token) match(input, 207, FOLLOW_207_in_returnJump5290);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_207.add(t);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:548:15: ( exp )?
        int alt92 = 2;
        int LA92_0 = input.LA(1);

        if (((LA92_0 >= HEX_LIT && LA92_0 <= OCT_LIT) || LA92_0 == ID
            || LA92_0 == GLOBALID
            || (LA92_0 >= ADD_OP && LA92_0 <= RATIONAL_LIT) || LA92_0 == 169
            || LA92_0 == 177 || LA92_0 == 204 || LA92_0 == 208 || LA92_0 == 215
            || (LA92_0 >= 217 && LA92_0 <= 221) || LA92_0 == 223)) {
          alt92 = 1;
        }
        switch (alt92) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: exp
          {
            pushFollow(FOLLOW_exp_in_returnJump5292);
            exp302 = exp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_exp.add(exp302.getTree());

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_returnJump5295);
        annotationList303 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList303.getTree());
        char_literal304 = (Token) match(
            input,
            175,
            FOLLOW_175_in_returnJump5297);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_175.add(char_literal304);

        // AST REWRITE
        // elements: annotationList, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 548:41: -> ^( RETURN[$t] ^( OPTION ( exp )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:548:44: ^( RETURN[$t] ^( OPTION ( exp )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(RETURN, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:548:57: ^( OPTION ( exp )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:548:66: ( exp )?
                if (stream_exp.hasNext()) {
                  adaptor.addChild(root_2, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 71, returnJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "returnJump"

  public static class ifThenJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "ifThenJump"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:551:1: ifThenJump : t= 'if' exp 'then' annotationList 'goto' ID -> ^( IF_THEN_JUMP[$t] exp annotationList ID ) ;
  public final AntlrPilarParser.ifThenJump_return ifThenJump()
      throws RecognitionException {
    AntlrPilarParser.ifThenJump_return retval = new AntlrPilarParser.ifThenJump_return();
    retval.start = input.LT(1);
    int ifThenJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal306 = null;
    Token string_literal308 = null;
    Token ID309 = null;
    AntlrPilarParser.exp_return exp305 = null;

    AntlrPilarParser.annotationList_return annotationList307 = null;

    Object t_tree = null;
    Object string_literal306_tree = null;
    Object string_literal308_tree = null;
    Object ID309_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_206 = new RewriteRuleTokenStream(adaptor,
        "token 206");
    RewriteRuleTokenStream stream_208 = new RewriteRuleTokenStream(adaptor,
        "token 208");
    RewriteRuleTokenStream stream_209 = new RewriteRuleTokenStream(adaptor,
        "token 209");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 72)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:552:2: (t= 'if' exp 'then' annotationList 'goto' ID -> ^( IF_THEN_JUMP[$t] exp annotationList ID ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:552:4: t= 'if' exp 'then' annotationList 'goto' ID
      {
        t = (Token) match(input, 208, FOLLOW_208_in_ifThenJump5328);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_208.add(t);

        pushFollow(FOLLOW_exp_in_ifThenJump5330);
        exp305 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp305.getTree());
        string_literal306 = (Token) match(
            input,
            209,
            FOLLOW_209_in_ifThenJump5332);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_209.add(string_literal306);

        pushFollow(FOLLOW_annotationList_in_ifThenJump5334);
        annotationList307 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList307.getTree());
        string_literal308 = (Token) match(
            input,
            206,
            FOLLOW_206_in_ifThenJump5340);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_206.add(string_literal308);

        ID309 = (Token) match(input, ID, FOLLOW_ID_in_ifThenJump5342);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID309);

        // AST REWRITE
        // elements: annotationList, ID, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 553:41: -> ^( IF_THEN_JUMP[$t] exp annotationList ID )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:553:44: ^( IF_THEN_JUMP[$t] exp annotationList ID )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(IF_THEN_JUMP, t),
                  root_1);

              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_ID.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 72, ifThenJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "ifThenJump"

  public static class ifElseJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "ifElseJump"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:556:1: ifElseJump : t= 'else' annotationList 'goto' ID -> ^( IF_ELSE_JUMP[$t] annotationList ID ) ;
  public final AntlrPilarParser.ifElseJump_return ifElseJump()
      throws RecognitionException {
    AntlrPilarParser.ifElseJump_return retval = new AntlrPilarParser.ifElseJump_return();
    retval.start = input.LT(1);
    int ifElseJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal311 = null;
    Token ID312 = null;
    AntlrPilarParser.annotationList_return annotationList310 = null;

    Object t_tree = null;
    Object string_literal311_tree = null;
    Object ID312_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_196 = new RewriteRuleTokenStream(adaptor,
        "token 196");
    RewriteRuleTokenStream stream_206 = new RewriteRuleTokenStream(adaptor,
        "token 206");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 73)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:557:2: (t= 'else' annotationList 'goto' ID -> ^( IF_ELSE_JUMP[$t] annotationList ID ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:557:4: t= 'else' annotationList 'goto' ID
      {
        t = (Token) match(input, 196, FOLLOW_196_in_ifElseJump5395);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_196.add(t);

        pushFollow(FOLLOW_annotationList_in_ifElseJump5397);
        annotationList310 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList310.getTree());
        string_literal311 = (Token) match(
            input,
            206,
            FOLLOW_206_in_ifElseJump5399);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_206.add(string_literal311);

        ID312 = (Token) match(input, ID, FOLLOW_ID_in_ifElseJump5401);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID312);

        // AST REWRITE
        // elements: ID, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 557:41: -> ^( IF_ELSE_JUMP[$t] annotationList ID )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:557:44: ^( IF_ELSE_JUMP[$t] annotationList ID )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(IF_ELSE_JUMP, t),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_ID.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 73, ifElseJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "ifElseJump"

  public static class switchCaseJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "switchCaseJump"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:560:1: switchCaseJump : t= '|' exp '=>' annotationList 'goto' ID -> ^( SWITCH_CASE_JUMP[$t] exp annotationList ID ) ;
  public final AntlrPilarParser.switchCaseJump_return switchCaseJump()
      throws RecognitionException {
    AntlrPilarParser.switchCaseJump_return retval = new AntlrPilarParser.switchCaseJump_return();
    retval.start = input.LT(1);
    int switchCaseJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal314 = null;
    Token string_literal316 = null;
    Token ID317 = null;
    AntlrPilarParser.exp_return exp313 = null;

    AntlrPilarParser.annotationList_return annotationList315 = null;

    Object t_tree = null;
    Object string_literal314_tree = null;
    Object string_literal316_tree = null;
    Object ID317_tree = null;
    RewriteRuleTokenStream stream_210 = new RewriteRuleTokenStream(adaptor,
        "token 210");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_194 = new RewriteRuleTokenStream(adaptor,
        "token 194");
    RewriteRuleTokenStream stream_206 = new RewriteRuleTokenStream(adaptor,
        "token 206");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 74)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:561:2: (t= '|' exp '=>' annotationList 'goto' ID -> ^( SWITCH_CASE_JUMP[$t] exp annotationList ID ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:561:4: t= '|' exp '=>' annotationList 'goto' ID
      {
        t = (Token) match(input, 194, FOLLOW_194_in_switchCaseJump5428);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_194.add(t);

        pushFollow(FOLLOW_exp_in_switchCaseJump5430);
        exp313 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp313.getTree());
        string_literal314 = (Token) match(
            input,
            210,
            FOLLOW_210_in_switchCaseJump5437);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_210.add(string_literal314);

        pushFollow(FOLLOW_annotationList_in_switchCaseJump5439);
        annotationList315 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList315.getTree());
        string_literal316 = (Token) match(
            input,
            206,
            FOLLOW_206_in_switchCaseJump5441);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_206.add(string_literal316);

        ID317 = (Token) match(input, ID, FOLLOW_ID_in_switchCaseJump5443);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID317);

        // AST REWRITE
        // elements: annotationList, exp, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 562:41: -> ^( SWITCH_CASE_JUMP[$t] exp annotationList ID )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:562:44: ^( SWITCH_CASE_JUMP[$t] exp annotationList ID )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(SWITCH_CASE_JUMP, t),
                  root_1);

              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_ID.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 74, switchCaseJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "switchCaseJump"

  public static class switchDefaultJump_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "switchDefaultJump"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:565:1: switchDefaultJump : t= '|' '=>' annotationList 'goto' ID -> ^( SWITCH_DEFAULT_JUMP[$t] annotationList ID ) ;
  public final AntlrPilarParser.switchDefaultJump_return switchDefaultJump()
      throws RecognitionException {
    AntlrPilarParser.switchDefaultJump_return retval = new AntlrPilarParser.switchDefaultJump_return();
    retval.start = input.LT(1);
    int switchDefaultJump_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal318 = null;
    Token string_literal320 = null;
    Token ID321 = null;
    AntlrPilarParser.annotationList_return annotationList319 = null;

    Object t_tree = null;
    Object string_literal318_tree = null;
    Object string_literal320_tree = null;
    Object ID321_tree = null;
    RewriteRuleTokenStream stream_210 = new RewriteRuleTokenStream(adaptor,
        "token 210");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_194 = new RewriteRuleTokenStream(adaptor,
        "token 194");
    RewriteRuleTokenStream stream_206 = new RewriteRuleTokenStream(adaptor,
        "token 206");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 75)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:566:2: (t= '|' '=>' annotationList 'goto' ID -> ^( SWITCH_DEFAULT_JUMP[$t] annotationList ID ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:566:4: t= '|' '=>' annotationList 'goto' ID
      {
        t = (Token) match(input, 194, FOLLOW_194_in_switchDefaultJump5476);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_194.add(t);

        string_literal318 = (Token) match(
            input,
            210,
            FOLLOW_210_in_switchDefaultJump5478);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_210.add(string_literal318);

        pushFollow(FOLLOW_annotationList_in_switchDefaultJump5480);
        annotationList319 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList319.getTree());
        string_literal320 = (Token) match(
            input,
            206,
            FOLLOW_206_in_switchDefaultJump5482);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_206.add(string_literal320);

        ID321 = (Token) match(input, ID, FOLLOW_ID_in_switchDefaultJump5484);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(ID321);

        // AST REWRITE
        // elements: ID, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 566:41: -> ^( SWITCH_DEFAULT_JUMP[$t] annotationList ID )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:566:44: ^( SWITCH_DEFAULT_JUMP[$t] annotationList ID )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(SWITCH_DEFAULT_JUMP, t),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_ID.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 75, switchDefaultJump_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "switchDefaultJump"

  public static class catchClause_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "catchClause"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:569:1: catchClause : t= 'catch' annotationList ( type )? (local= ID )? '@' '[' from= ID '..' to= ID ']' jump -> ^( CATCH_CLAUSE[$t] annotationList ^( OPTION ( type )? ) ^( OPTION ( $local)? ) $from $to ( jump )? ) ;
  public final AntlrPilarParser.catchClause_return catchClause()
      throws RecognitionException {
    AntlrPilarParser.catchClause_return retval = new AntlrPilarParser.catchClause_return();
    retval.start = input.LT(1);
    int catchClause_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token local = null;
    Token from = null;
    Token to = null;
    Token char_literal324 = null;
    Token char_literal325 = null;
    Token string_literal326 = null;
    Token char_literal327 = null;
    AntlrPilarParser.annotationList_return annotationList322 = null;

    AntlrPilarParser.type_return type323 = null;

    AntlrPilarParser.jump_return jump328 = null;

    Object t_tree = null;
    Object local_tree = null;
    Object from_tree = null;
    Object to_tree = null;
    Object char_literal324_tree = null;
    Object char_literal325_tree = null;
    Object string_literal326_tree = null;
    Object char_literal327_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_211 = new RewriteRuleTokenStream(adaptor,
        "token 211");
    RewriteRuleTokenStream stream_203 = new RewriteRuleTokenStream(adaptor,
        "token 203");
    RewriteRuleTokenStream stream_171 = new RewriteRuleTokenStream(adaptor,
        "token 171");
    RewriteRuleTokenStream stream_212 = new RewriteRuleTokenStream(adaptor,
        "token 212");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    RewriteRuleSubtreeStream stream_jump = new RewriteRuleSubtreeStream(
        adaptor, "rule jump");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 76)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:570:2: (t= 'catch' annotationList ( type )? (local= ID )? '@' '[' from= ID '..' to= ID ']' jump -> ^( CATCH_CLAUSE[$t] annotationList ^( OPTION ( type )? ) ^( OPTION ( $local)? ) $from $to ( jump )? ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:570:4: t= 'catch' annotationList ( type )? (local= ID )? '@' '[' from= ID '..' to= ID ']' jump
      {
        t = (Token) match(input, 211, FOLLOW_211_in_catchClause5509);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_211.add(t);

        pushFollow(FOLLOW_annotationList_in_catchClause5511);
        annotationList322 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList322.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:571:4: ( type )?
        int alt93 = 2;
        int LA93_0 = input.LA(1);

        if ((LA93_0 == TYPEVARID || LA93_0 == 169 || LA93_0 == 177)) {
          alt93 = 1;
        } else if ((LA93_0 == ID)) {
          int LA93_2 = input.LA(2);

          if ((synpred114_AntlrPilar())) {
            alt93 = 1;
          }
        }
        switch (alt93) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: type
          {
            pushFollow(FOLLOW_type_in_catchClause5516);
            type323 = type();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_type.add(type323.getTree());

          }
            break;

        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:571:10: (local= ID )?
        int alt94 = 2;
        int LA94_0 = input.LA(1);

        if ((LA94_0 == ID)) {
          alt94 = 1;
        }
        switch (alt94) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:571:11: local= ID
          {
            local = (Token) match(input, ID, FOLLOW_ID_in_catchClause5522);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ID.add(local);

          }
            break;

        }

        char_literal324 = (Token) match(
            input,
            171,
            FOLLOW_171_in_catchClause5529);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_171.add(char_literal324);

        char_literal325 = (Token) match(
            input,
            202,
            FOLLOW_202_in_catchClause5531);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_202.add(char_literal325);

        from = (Token) match(input, ID, FOLLOW_ID_in_catchClause5535);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(from);

        string_literal326 = (Token) match(
            input,
            212,
            FOLLOW_212_in_catchClause5537);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_212.add(string_literal326);

        to = (Token) match(input, ID, FOLLOW_ID_in_catchClause5544);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(to);

        char_literal327 = (Token) match(
            input,
            203,
            FOLLOW_203_in_catchClause5546);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_203.add(char_literal327);

        pushFollow(FOLLOW_jump_in_catchClause5551);
        jump328 = jump();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_jump.add(jump328.getTree());

        // AST REWRITE
        // elements: from, jump, type, to, local, annotationList
        // token labels: to, local, from
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleTokenStream stream_to = new RewriteRuleTokenStream(
              adaptor, "token to", to);
          RewriteRuleTokenStream stream_local = new RewriteRuleTokenStream(
              adaptor, "token local", local);
          RewriteRuleTokenStream stream_from = new RewriteRuleTokenStream(
              adaptor, "token from", from);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 574:41: -> ^( CATCH_CLAUSE[$t] annotationList ^( OPTION ( type )? ) ^( OPTION ( $local)? ) $from $to ( jump )? )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:574:44: ^( CATCH_CLAUSE[$t] annotationList ^( OPTION ( type )? ) ^( OPTION ( $local)? ) $from $to ( jump )? )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(CATCH_CLAUSE, t),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:574:78: ^( OPTION ( type )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:574:87: ( type )?
                if (stream_type.hasNext()) {
                  adaptor.addChild(root_2, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:574:94: ^( OPTION ( $local)? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:574:103: ( $local)?
                if (stream_local.hasNext()) {
                  adaptor.addChild(root_2, stream_local.nextNode());

                }
                stream_local.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_from.nextNode());
              adaptor.addChild(root_1, stream_to.nextNode());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:574:122: ( jump )?
              if (stream_jump.hasNext()) {
                adaptor.addChild(root_1, stream_jump.nextTree());

              }
              stream_jump.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 76, catchClause_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "catchClause"

  public static class exp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "exp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:577:1: exp : conditionalExp ;
  public final AntlrPilarParser.exp_return exp() throws RecognitionException {
    AntlrPilarParser.exp_return retval = new AntlrPilarParser.exp_return();
    retval.start = input.LT(1);
    int exp_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.conditionalExp_return conditionalExp329 = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 77)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:578:2: ( conditionalExp )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:578:4: conditionalExp
      {
        root_0 = (Object) adaptor.nil();

        pushFollow(FOLLOW_conditionalExp_in_exp5628);
        conditionalExp329 = conditionalExp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          adaptor.addChild(root_0, conditionalExp329.getTree());

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 77, exp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "exp"

  public static class conditionalExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "conditionalExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:581:1: conditionalExp : ( conditionalImplyExp | ifThenExp ( 'else' ifThenExp )* ifElseExp -> ^( IF_EXP ^( LIST ( ifThenExp )+ ) ifElseExp ) | 'switch' exp ( switchCaseExp )* ( switchDefaultExp )? -> ^( SWITCH_EXP exp ^( LIST ( switchCaseExp )* ) ^( OPTION ( switchDefaultExp )? ) ) );
  public final AntlrPilarParser.conditionalExp_return conditionalExp()
      throws RecognitionException {
    AntlrPilarParser.conditionalExp_return retval = new AntlrPilarParser.conditionalExp_return();
    retval.start = input.LT(1);
    int conditionalExp_StartIndex = input.index();
    Object root_0 = null;

    Token string_literal332 = null;
    Token string_literal335 = null;
    AntlrPilarParser.conditionalImplyExp_return conditionalImplyExp330 = null;

    AntlrPilarParser.ifThenExp_return ifThenExp331 = null;

    AntlrPilarParser.ifThenExp_return ifThenExp333 = null;

    AntlrPilarParser.ifElseExp_return ifElseExp334 = null;

    AntlrPilarParser.exp_return exp336 = null;

    AntlrPilarParser.switchCaseExp_return switchCaseExp337 = null;

    AntlrPilarParser.switchDefaultExp_return switchDefaultExp338 = null;

    Object string_literal332_tree = null;
    Object string_literal335_tree = null;
    RewriteRuleTokenStream stream_204 = new RewriteRuleTokenStream(adaptor,
        "token 204");
    RewriteRuleTokenStream stream_196 = new RewriteRuleTokenStream(adaptor,
        "token 196");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_ifElseExp = new RewriteRuleSubtreeStream(
        adaptor, "rule ifElseExp");
    RewriteRuleSubtreeStream stream_ifThenExp = new RewriteRuleSubtreeStream(
        adaptor, "rule ifThenExp");
    RewriteRuleSubtreeStream stream_switchDefaultExp = new RewriteRuleSubtreeStream(
        adaptor, "rule switchDefaultExp");
    RewriteRuleSubtreeStream stream_switchCaseExp = new RewriteRuleSubtreeStream(
        adaptor, "rule switchCaseExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 78)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:582:2: ( conditionalImplyExp | ifThenExp ( 'else' ifThenExp )* ifElseExp -> ^( IF_EXP ^( LIST ( ifThenExp )+ ) ifElseExp ) | 'switch' exp ( switchCaseExp )* ( switchDefaultExp )? -> ^( SWITCH_EXP exp ^( LIST ( switchCaseExp )* ) ^( OPTION ( switchDefaultExp )? ) ) )
      int alt98 = 3;
      switch (input.LA(1)) {
        case HEX_LIT:
        case DEC_LIT:
        case OCT_LIT:
        case ID:
        case GLOBALID:
        case ADD_OP:
        case MUL_OP:
        case UN_OP:
        case CHAR_LIT:
        case STRING_LIT:
        case SYMBOL_LIT:
        case RAW_LIT:
        case BIN_LIT:
        case FLOAT_LIT:
        case RATIONAL_LIT:
        case 169:
        case 177:
        case 215:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 223: {
          alt98 = 1;
        }
          break;
        case 208: {
          alt98 = 2;
        }
          break;
        case 204: {
          alt98 = 3;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 98, 0, input);

          throw nvae;
      }

      switch (alt98) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:582:4: conditionalImplyExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_conditionalImplyExp_in_conditionalExp5641);
          conditionalImplyExp330 = conditionalImplyExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, conditionalImplyExp330.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:583:4: ifThenExp ( 'else' ifThenExp )* ifElseExp
        {
          pushFollow(FOLLOW_ifThenExp_in_conditionalExp5646);
          ifThenExp331 = ifThenExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_ifThenExp.add(ifThenExp331.getTree());
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:584:4: ( 'else' ifThenExp )*
          loop95: do {
            int alt95 = 2;
            int LA95_0 = input.LA(1);

            if ((LA95_0 == 196)) {
              int LA95_1 = input.LA(2);

              if ((synpred117_AntlrPilar())) {
                alt95 = 1;
              }

            }

            switch (alt95) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:584:5: 'else' ifThenExp
              {
                string_literal332 = (Token) match(
                    input,
                    196,
                    FOLLOW_196_in_conditionalExp5652);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_196.add(string_literal332);

                pushFollow(FOLLOW_ifThenExp_in_conditionalExp5654);
                ifThenExp333 = ifThenExp();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_ifThenExp.add(ifThenExp333.getTree());

              }
                break;

              default:
                break loop95;
            }
          } while (true);

          pushFollow(FOLLOW_ifElseExp_in_conditionalExp5661);
          ifElseExp334 = ifElseExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_ifElseExp.add(ifElseExp334.getTree());

          // AST REWRITE
          // elements: ifThenExp, ifElseExp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 585:41: -> ^( IF_EXP ^( LIST ( ifThenExp )+ ) ifElseExp )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:585:44: ^( IF_EXP ^( LIST ( ifThenExp )+ ) ifElseExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(IF_EXP, "IF_EXP"),
                    root_1);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:585:53: ^( LIST ( ifThenExp )+ )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(LIST, "LIST"),
                      root_2);

                  if (!(stream_ifThenExp.hasNext())) {
                    throw new RewriteEarlyExitException();
                  }
                  while (stream_ifThenExp.hasNext()) {
                    adaptor.addChild(root_2, stream_ifThenExp.nextTree());

                  }
                  stream_ifThenExp.reset();

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_ifElseExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:586:4: 'switch' exp ( switchCaseExp )* ( switchDefaultExp )?
        {
          string_literal335 = (Token) match(
              input,
              204,
              FOLLOW_204_in_conditionalExp5708);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_204.add(string_literal335);

          pushFollow(FOLLOW_exp_in_conditionalExp5710);
          exp336 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp336.getTree());
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:586:17: ( switchCaseExp )*
          loop96: do {
            int alt96 = 2;
            int LA96_0 = input.LA(1);

            if ((LA96_0 == 194)) {
              int LA96_1 = input.LA(2);

              if ((synpred119_AntlrPilar())) {
                alt96 = 1;
              }

            }

            switch (alt96) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: switchCaseExp
              {
                pushFollow(FOLLOW_switchCaseExp_in_conditionalExp5712);
                switchCaseExp337 = switchCaseExp();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_switchCaseExp.add(switchCaseExp337.getTree());

              }
                break;

              default:
                break loop96;
            }
          } while (true);

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:587:4: ( switchDefaultExp )?
          int alt97 = 2;
          int LA97_0 = input.LA(1);

          if ((LA97_0 == 194)) {
            int LA97_1 = input.LA(2);

            if ((synpred120_AntlrPilar())) {
              alt97 = 1;
            }
          }
          switch (alt97) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: switchDefaultExp
            {
              pushFollow(FOLLOW_switchDefaultExp_in_conditionalExp5728);
              switchDefaultExp338 = switchDefaultExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_switchDefaultExp.add(switchDefaultExp338.getTree());

            }
              break;

          }

          // AST REWRITE
          // elements: switchCaseExp, exp, switchDefaultExp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 587:41: -> ^( SWITCH_EXP exp ^( LIST ( switchCaseExp )* ) ^( OPTION ( switchDefaultExp )? ) )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:587:44: ^( SWITCH_EXP exp ^( LIST ( switchCaseExp )* ) ^( OPTION ( switchDefaultExp )? ) )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(SWITCH_EXP, "SWITCH_EXP"),
                    root_1);

                adaptor.addChild(root_1, stream_exp.nextTree());
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:587:61: ^( LIST ( switchCaseExp )* )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(LIST, "LIST"),
                      root_2);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:587:68: ( switchCaseExp )*
                  while (stream_switchCaseExp.hasNext()) {
                    adaptor.addChild(root_2, stream_switchCaseExp.nextTree());

                  }
                  stream_switchCaseExp.reset();

                  adaptor.addChild(root_1, root_2);
                }
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:587:84: ^( OPTION ( switchDefaultExp )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:587:93: ( switchDefaultExp )?
                  if (stream_switchDefaultExp.hasNext()) {
                    adaptor
                        .addChild(root_2, stream_switchDefaultExp.nextTree());

                  }
                  stream_switchDefaultExp.reset();

                  adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 78, conditionalExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "conditionalExp"

  public static class ifThenExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "ifThenExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:590:1: ifThenExp : t= 'if' e1= exp 'then' annotationList e2= exp -> ^( IF_THEN_EXP[$t] $e1 annotationList $e2) ;
  public final AntlrPilarParser.ifThenExp_return ifThenExp()
      throws RecognitionException {
    AntlrPilarParser.ifThenExp_return retval = new AntlrPilarParser.ifThenExp_return();
    retval.start = input.LT(1);
    int ifThenExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal339 = null;
    AntlrPilarParser.exp_return e1 = null;

    AntlrPilarParser.exp_return e2 = null;

    AntlrPilarParser.annotationList_return annotationList340 = null;

    Object t_tree = null;
    Object string_literal339_tree = null;
    RewriteRuleTokenStream stream_208 = new RewriteRuleTokenStream(adaptor,
        "token 208");
    RewriteRuleTokenStream stream_209 = new RewriteRuleTokenStream(adaptor,
        "token 209");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 79)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:591:2: (t= 'if' e1= exp 'then' annotationList e2= exp -> ^( IF_THEN_EXP[$t] $e1 annotationList $e2) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:591:4: t= 'if' e1= exp 'then' annotationList e2= exp
      {
        t = (Token) match(input, 208, FOLLOW_208_in_ifThenExp5783);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_208.add(t);

        pushFollow(FOLLOW_exp_in_ifThenExp5787);
        e1 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e1.getTree());
        string_literal339 = (Token) match(
            input,
            209,
            FOLLOW_209_in_ifThenExp5789);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_209.add(string_literal339);

        pushFollow(FOLLOW_annotationList_in_ifThenExp5791);
        annotationList340 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList340.getTree());
        pushFollow(FOLLOW_exp_in_ifThenExp5802);
        e2 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e2.getTree());

        // AST REWRITE
        // elements: annotationList, e1, e2
        // token labels: 
        // rule labels: retval, e1, e2
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);
          RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
              adaptor, "rule e1", e1 != null ? e1.tree : null);
          RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
              adaptor, "rule e2", e2 != null ? e2.tree : null);

          root_0 = (Object) adaptor.nil();
          // 592:41: -> ^( IF_THEN_EXP[$t] $e1 annotationList $e2)
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:592:44: ^( IF_THEN_EXP[$t] $e1 annotationList $e2)
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(IF_THEN_EXP, t),
                  root_1);

              adaptor.addChild(root_1, stream_e1.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_e2.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 79, ifThenExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "ifThenExp"

  public static class ifElseExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "ifElseExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:595:1: ifElseExp : t= 'else' annotationList exp -> ^( IF_ELSE_EXP[$t] annotationList exp ) ;
  public final AntlrPilarParser.ifElseExp_return ifElseExp()
      throws RecognitionException {
    AntlrPilarParser.ifElseExp_return retval = new AntlrPilarParser.ifElseExp_return();
    retval.start = input.LT(1);
    int ifElseExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.annotationList_return annotationList341 = null;

    AntlrPilarParser.exp_return exp342 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_196 = new RewriteRuleTokenStream(adaptor,
        "token 196");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 80)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:596:2: (t= 'else' annotationList exp -> ^( IF_ELSE_EXP[$t] annotationList exp ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:596:4: t= 'else' annotationList exp
      {
        t = (Token) match(input, 196, FOLLOW_196_in_ifElseExp5857);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_196.add(t);

        pushFollow(FOLLOW_annotationList_in_ifElseExp5859);
        annotationList341 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList341.getTree());
        pushFollow(FOLLOW_exp_in_ifElseExp5861);
        exp342 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp342.getTree());

        // AST REWRITE
        // elements: exp, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 596:41: -> ^( IF_ELSE_EXP[$t] annotationList exp )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:596:44: ^( IF_ELSE_EXP[$t] annotationList exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(IF_ELSE_EXP, t),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 80, ifElseExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "ifElseExp"

  public static class switchCaseExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "switchCaseExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:599:1: switchCaseExp : t= '|' e1= exp '=>' annotationList e2= exp -> ^( SWITCH_CASE_EXP[$t] $e1 annotationList $e2) ;
  public final AntlrPilarParser.switchCaseExp_return switchCaseExp()
      throws RecognitionException {
    AntlrPilarParser.switchCaseExp_return retval = new AntlrPilarParser.switchCaseExp_return();
    retval.start = input.LT(1);
    int switchCaseExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal343 = null;
    AntlrPilarParser.exp_return e1 = null;

    AntlrPilarParser.exp_return e2 = null;

    AntlrPilarParser.annotationList_return annotationList344 = null;

    Object t_tree = null;
    Object string_literal343_tree = null;
    RewriteRuleTokenStream stream_210 = new RewriteRuleTokenStream(adaptor,
        "token 210");
    RewriteRuleTokenStream stream_194 = new RewriteRuleTokenStream(adaptor,
        "token 194");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 81)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:600:2: (t= '|' e1= exp '=>' annotationList e2= exp -> ^( SWITCH_CASE_EXP[$t] $e1 annotationList $e2) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:600:4: t= '|' e1= exp '=>' annotationList e2= exp
      {
        t = (Token) match(input, 194, FOLLOW_194_in_switchCaseExp5895);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_194.add(t);

        pushFollow(FOLLOW_exp_in_switchCaseExp5899);
        e1 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e1.getTree());
        string_literal343 = (Token) match(
            input,
            210,
            FOLLOW_210_in_switchCaseExp5901);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_210.add(string_literal343);

        pushFollow(FOLLOW_annotationList_in_switchCaseExp5906);
        annotationList344 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList344.getTree());
        pushFollow(FOLLOW_exp_in_switchCaseExp5910);
        e2 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e2.getTree());

        // AST REWRITE
        // elements: e1, e2, annotationList
        // token labels: 
        // rule labels: retval, e1, e2
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);
          RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
              adaptor, "rule e1", e1 != null ? e1.tree : null);
          RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
              adaptor, "rule e2", e2 != null ? e2.tree : null);

          root_0 = (Object) adaptor.nil();
          // 601:41: -> ^( SWITCH_CASE_EXP[$t] $e1 annotationList $e2)
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:601:44: ^( SWITCH_CASE_EXP[$t] $e1 annotationList $e2)
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(SWITCH_CASE_EXP, t),
                  root_1);

              adaptor.addChild(root_1, stream_e1.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_e2.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 81, switchCaseExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "switchCaseExp"

  public static class switchDefaultExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "switchDefaultExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:604:1: switchDefaultExp : t= '|' '=>' annotationList exp -> ^( SWITCH_DEFAULT_EXP[$t] annotationList exp ) ;
  public final AntlrPilarParser.switchDefaultExp_return switchDefaultExp()
      throws RecognitionException {
    AntlrPilarParser.switchDefaultExp_return retval = new AntlrPilarParser.switchDefaultExp_return();
    retval.start = input.LT(1);
    int switchDefaultExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal345 = null;
    AntlrPilarParser.annotationList_return annotationList346 = null;

    AntlrPilarParser.exp_return exp347 = null;

    Object t_tree = null;
    Object string_literal345_tree = null;
    RewriteRuleTokenStream stream_210 = new RewriteRuleTokenStream(adaptor,
        "token 210");
    RewriteRuleTokenStream stream_194 = new RewriteRuleTokenStream(adaptor,
        "token 194");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 82)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:605:2: (t= '|' '=>' annotationList exp -> ^( SWITCH_DEFAULT_EXP[$t] annotationList exp ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:605:4: t= '|' '=>' annotationList exp
      {
        t = (Token) match(input, 194, FOLLOW_194_in_switchDefaultExp5953);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_194.add(t);

        string_literal345 = (Token) match(
            input,
            210,
            FOLLOW_210_in_switchDefaultExp5955);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_210.add(string_literal345);

        pushFollow(FOLLOW_annotationList_in_switchDefaultExp5957);
        annotationList346 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList346.getTree());
        pushFollow(FOLLOW_exp_in_switchDefaultExp5959);
        exp347 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp347.getTree());

        // AST REWRITE
        // elements: exp, annotationList
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 605:41: -> ^( SWITCH_DEFAULT_EXP[$t] annotationList exp )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:605:44: ^( SWITCH_DEFAULT_EXP[$t] annotationList exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(SWITCH_DEFAULT_EXP, t),
                  root_1);

              adaptor.addChild(root_1, stream_annotationList.nextTree());
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 82, switchDefaultExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "switchDefaultExp"

  public static class conditionalImplyExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "conditionalImplyExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:608:1: conditionalImplyExp : (c1= conditionalOrExp -> $c1) (t= '==>' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) | t= '<==' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) )* ;
  public final AntlrPilarParser.conditionalImplyExp_return conditionalImplyExp()
      throws RecognitionException {
    AntlrPilarParser.conditionalImplyExp_return retval = new AntlrPilarParser.conditionalImplyExp_return();
    retval.start = input.LT(1);
    int conditionalImplyExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.conditionalOrExp_return c1 = null;

    AntlrPilarParser.conditionalOrExp_return c2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_213 = new RewriteRuleTokenStream(adaptor,
        "token 213");
    RewriteRuleTokenStream stream_214 = new RewriteRuleTokenStream(adaptor,
        "token 214");
    RewriteRuleSubtreeStream stream_conditionalOrExp = new RewriteRuleSubtreeStream(
        adaptor, "rule conditionalOrExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 83)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:609:2: ( (c1= conditionalOrExp -> $c1) (t= '==>' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) | t= '<==' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:609:4: (c1= conditionalOrExp -> $c1) (t= '==>' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) | t= '<==' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:609:4: (c1= conditionalOrExp -> $c1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:609:6: c1= conditionalOrExp
        {
          pushFollow(FOLLOW_conditionalOrExp_in_conditionalImplyExp5992);
          c1 = conditionalOrExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_conditionalOrExp.add(c1.getTree());

          // AST REWRITE
          // elements: c1
          // token labels: 
          // rule labels: retval, c1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_c1 = new RewriteRuleSubtreeStream(
                adaptor, "rule c1", c1 != null ? c1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 609:41: -> $c1
            {
              adaptor.addChild(root_0, stream_c1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:610:6: (t= '==>' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) | t= '<==' c2= conditionalOrExp -> ^( BINARY $t $conditionalImplyExp $c2) )*
        loop99: do {
          int alt99 = 3;
          int LA99_0 = input.LA(1);

          if ((LA99_0 == 213)) {
            int LA99_2 = input.LA(2);

            if ((synpred121_AntlrPilar())) {
              alt99 = 1;
            }

          } else if ((LA99_0 == 214)) {
            int LA99_3 = input.LA(2);

            if ((synpred122_AntlrPilar())) {
              alt99 = 2;
            }

          }

          switch (alt99) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:610:8: t= '==>' c2= conditionalOrExp
            {
              t = (Token) match(
                  input,
                  213,
                  FOLLOW_213_in_conditionalImplyExp6023);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_213.add(t);

              pushFollow(FOLLOW_conditionalOrExp_in_conditionalImplyExp6027);
              c2 = conditionalOrExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_conditionalOrExp.add(c2.getTree());

              // AST REWRITE
              // elements: t, c2, conditionalImplyExp
              // token labels: t
              // rule labels: retval, c2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_c2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule c2", c2 != null ? c2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 610:41: -> ^( BINARY $t $conditionalImplyExp $c2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:610:44: ^( BINARY $t $conditionalImplyExp $c2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_c2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:611:8: t= '<==' c2= conditionalOrExp
            {
              t = (Token) match(
                  input,
                  214,
                  FOLLOW_214_in_conditionalImplyExp6058);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_214.add(t);

              pushFollow(FOLLOW_conditionalOrExp_in_conditionalImplyExp6062);
              c2 = conditionalOrExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_conditionalOrExp.add(c2.getTree());

              // AST REWRITE
              // elements: t, c2, conditionalImplyExp
              // token labels: t
              // rule labels: retval, c2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_c2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule c2", c2 != null ? c2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 611:41: -> ^( BINARY $t $conditionalImplyExp $c2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:611:44: ^( BINARY $t $conditionalImplyExp $c2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_c2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop99;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 83, conditionalImplyExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "conditionalImplyExp"

  public static class conditionalOrExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "conditionalOrExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:615:1: conditionalOrExp : (c1= conditionalAndExp -> $c1) (t= COND_OR_OP c2= conditionalAndExp -> ^( BINARY $t $conditionalOrExp $c2) )* ;
  public final AntlrPilarParser.conditionalOrExp_return conditionalOrExp()
      throws RecognitionException {
    AntlrPilarParser.conditionalOrExp_return retval = new AntlrPilarParser.conditionalOrExp_return();
    retval.start = input.LT(1);
    int conditionalOrExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.conditionalAndExp_return c1 = null;

    AntlrPilarParser.conditionalAndExp_return c2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_COND_OR_OP = new RewriteRuleTokenStream(
        adaptor, "token COND_OR_OP");
    RewriteRuleSubtreeStream stream_conditionalAndExp = new RewriteRuleSubtreeStream(
        adaptor, "rule conditionalAndExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 84)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:616:2: ( (c1= conditionalAndExp -> $c1) (t= COND_OR_OP c2= conditionalAndExp -> ^( BINARY $t $conditionalOrExp $c2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:616:4: (c1= conditionalAndExp -> $c1) (t= COND_OR_OP c2= conditionalAndExp -> ^( BINARY $t $conditionalOrExp $c2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:616:4: (c1= conditionalAndExp -> $c1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:616:6: c1= conditionalAndExp
        {
          pushFollow(FOLLOW_conditionalAndExp_in_conditionalOrExp6106);
          c1 = conditionalAndExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_conditionalAndExp.add(c1.getTree());

          // AST REWRITE
          // elements: c1
          // token labels: 
          // rule labels: retval, c1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_c1 = new RewriteRuleSubtreeStream(
                adaptor, "rule c1", c1 != null ? c1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 616:41: -> $c1
            {
              adaptor.addChild(root_0, stream_c1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:617:6: (t= COND_OR_OP c2= conditionalAndExp -> ^( BINARY $t $conditionalOrExp $c2) )*
        loop100: do {
          int alt100 = 2;
          int LA100_0 = input.LA(1);

          if ((LA100_0 == COND_OR_OP)) {
            int LA100_2 = input.LA(2);

            if ((synpred123_AntlrPilar())) {
              alt100 = 1;
            }

          }

          switch (alt100) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:617:8: t= COND_OR_OP c2= conditionalAndExp
            {
              t = (Token) match(
                  input,
                  COND_OR_OP,
                  FOLLOW_COND_OR_OP_in_conditionalOrExp6137);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_COND_OR_OP.add(t);

              pushFollow(FOLLOW_conditionalAndExp_in_conditionalOrExp6149);
              c2 = conditionalAndExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_conditionalAndExp.add(c2.getTree());

              // AST REWRITE
              // elements: t, conditionalOrExp, c2
              // token labels: t
              // rule labels: retval, c2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_c2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule c2", c2 != null ? c2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 618:41: -> ^( BINARY $t $conditionalOrExp $c2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:618:44: ^( BINARY $t $conditionalOrExp $c2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_c2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop100;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 84, conditionalOrExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "conditionalOrExp"

  public static class conditionalAndExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "conditionalAndExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:622:1: conditionalAndExp : (i1= inclusiveOrExp -> $i1) (t= COND_AND_OP i2= inclusiveOrExp -> ^( BINARY $t $conditionalAndExp $i2) )* ;
  public final AntlrPilarParser.conditionalAndExp_return conditionalAndExp()
      throws RecognitionException {
    AntlrPilarParser.conditionalAndExp_return retval = new AntlrPilarParser.conditionalAndExp_return();
    retval.start = input.LT(1);
    int conditionalAndExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.inclusiveOrExp_return i1 = null;

    AntlrPilarParser.inclusiveOrExp_return i2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_COND_AND_OP = new RewriteRuleTokenStream(
        adaptor, "token COND_AND_OP");
    RewriteRuleSubtreeStream stream_inclusiveOrExp = new RewriteRuleSubtreeStream(
        adaptor, "rule inclusiveOrExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 85)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:623:2: ( (i1= inclusiveOrExp -> $i1) (t= COND_AND_OP i2= inclusiveOrExp -> ^( BINARY $t $conditionalAndExp $i2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:623:4: (i1= inclusiveOrExp -> $i1) (t= COND_AND_OP i2= inclusiveOrExp -> ^( BINARY $t $conditionalAndExp $i2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:623:4: (i1= inclusiveOrExp -> $i1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:623:6: i1= inclusiveOrExp
        {
          pushFollow(FOLLOW_inclusiveOrExp_in_conditionalAndExp6199);
          i1 = inclusiveOrExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_inclusiveOrExp.add(i1.getTree());

          // AST REWRITE
          // elements: i1
          // token labels: 
          // rule labels: retval, i1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_i1 = new RewriteRuleSubtreeStream(
                adaptor, "rule i1", i1 != null ? i1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 623:41: -> $i1
            {
              adaptor.addChild(root_0, stream_i1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:624:6: (t= COND_AND_OP i2= inclusiveOrExp -> ^( BINARY $t $conditionalAndExp $i2) )*
        loop101: do {
          int alt101 = 2;
          int LA101_0 = input.LA(1);

          if ((LA101_0 == COND_AND_OP)) {
            int LA101_2 = input.LA(2);

            if ((synpred124_AntlrPilar())) {
              alt101 = 1;
            }

          }

          switch (alt101) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:624:8: t= COND_AND_OP i2= inclusiveOrExp
            {
              t = (Token) match(
                  input,
                  COND_AND_OP,
                  FOLLOW_COND_AND_OP_in_conditionalAndExp6232);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_COND_AND_OP.add(t);

              pushFollow(FOLLOW_inclusiveOrExp_in_conditionalAndExp6236);
              i2 = inclusiveOrExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_inclusiveOrExp.add(i2.getTree());

              // AST REWRITE
              // elements: i2, t, conditionalAndExp
              // token labels: t
              // rule labels: retval, i2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_i2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule i2", i2 != null ? i2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 624:41: -> ^( BINARY $t $conditionalAndExp $i2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:624:44: ^( BINARY $t $conditionalAndExp $i2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_i2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop101;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 85, conditionalAndExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "conditionalAndExp"

  public static class inclusiveOrExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "inclusiveOrExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:628:1: inclusiveOrExp : (e1= exclusiveOrExp -> $e1) (t= OR_OP e2= exclusiveOrExp -> ^( BINARY $t $inclusiveOrExp $e2) )* ;
  public final AntlrPilarParser.inclusiveOrExp_return inclusiveOrExp()
      throws RecognitionException {
    AntlrPilarParser.inclusiveOrExp_return retval = new AntlrPilarParser.inclusiveOrExp_return();
    retval.start = input.LT(1);
    int inclusiveOrExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.exclusiveOrExp_return e1 = null;

    AntlrPilarParser.exclusiveOrExp_return e2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_OR_OP = new RewriteRuleTokenStream(adaptor,
        "token OR_OP");
    RewriteRuleSubtreeStream stream_exclusiveOrExp = new RewriteRuleSubtreeStream(
        adaptor, "rule exclusiveOrExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 86)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:629:2: ( (e1= exclusiveOrExp -> $e1) (t= OR_OP e2= exclusiveOrExp -> ^( BINARY $t $inclusiveOrExp $e2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:629:4: (e1= exclusiveOrExp -> $e1) (t= OR_OP e2= exclusiveOrExp -> ^( BINARY $t $inclusiveOrExp $e2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:629:4: (e1= exclusiveOrExp -> $e1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:629:6: e1= exclusiveOrExp
        {
          pushFollow(FOLLOW_exclusiveOrExp_in_inclusiveOrExp6275);
          e1 = exclusiveOrExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exclusiveOrExp.add(e1.getTree());

          // AST REWRITE
          // elements: e1
          // token labels: 
          // rule labels: retval, e1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
                adaptor, "rule e1", e1 != null ? e1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 629:41: -> $e1
            {
              adaptor.addChild(root_0, stream_e1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:630:6: (t= OR_OP e2= exclusiveOrExp -> ^( BINARY $t $inclusiveOrExp $e2) )*
        loop102: do {
          int alt102 = 2;
          int LA102_0 = input.LA(1);

          if ((LA102_0 == OR_OP)) {
            int LA102_2 = input.LA(2);

            if ((synpred125_AntlrPilar())) {
              alt102 = 1;
            }

          }

          switch (alt102) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:630:8: t= OR_OP e2= exclusiveOrExp
            {
              t = (Token) match(
                  input,
                  OR_OP,
                  FOLLOW_OR_OP_in_inclusiveOrExp6308);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_OR_OP.add(t);

              pushFollow(FOLLOW_exclusiveOrExp_in_inclusiveOrExp6312);
              e2 = exclusiveOrExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_exclusiveOrExp.add(e2.getTree());

              // AST REWRITE
              // elements: e2, inclusiveOrExp, t
              // token labels: t
              // rule labels: retval, e2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule e2", e2 != null ? e2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 630:41: -> ^( BINARY $t $inclusiveOrExp $e2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:630:44: ^( BINARY $t $inclusiveOrExp $e2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_e2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop102;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 86, inclusiveOrExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "inclusiveOrExp"

  public static class exclusiveOrExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "exclusiveOrExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:635:1: exclusiveOrExp : (a1= andExp -> $a1) (t= XOR_OP a2= andExp -> ^( BINARY $t $exclusiveOrExp $a2) )* ;
  public final AntlrPilarParser.exclusiveOrExp_return exclusiveOrExp()
      throws RecognitionException {
    AntlrPilarParser.exclusiveOrExp_return retval = new AntlrPilarParser.exclusiveOrExp_return();
    retval.start = input.LT(1);
    int exclusiveOrExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.andExp_return a1 = null;

    AntlrPilarParser.andExp_return a2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_XOR_OP = new RewriteRuleTokenStream(adaptor,
        "token XOR_OP");
    RewriteRuleSubtreeStream stream_andExp = new RewriteRuleSubtreeStream(
        adaptor, "rule andExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 87)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:636:2: ( (a1= andExp -> $a1) (t= XOR_OP a2= andExp -> ^( BINARY $t $exclusiveOrExp $a2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:636:4: (a1= andExp -> $a1) (t= XOR_OP a2= andExp -> ^( BINARY $t $exclusiveOrExp $a2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:636:4: (a1= andExp -> $a1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:636:6: a1= andExp
        {
          pushFollow(FOLLOW_andExp_in_exclusiveOrExp6358);
          a1 = andExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_andExp.add(a1.getTree());

          // AST REWRITE
          // elements: a1
          // token labels: 
          // rule labels: retval, a1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_a1 = new RewriteRuleSubtreeStream(
                adaptor, "rule a1", a1 != null ? a1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 636:41: -> $a1
            {
              adaptor.addChild(root_0, stream_a1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:637:6: (t= XOR_OP a2= andExp -> ^( BINARY $t $exclusiveOrExp $a2) )*
        loop103: do {
          int alt103 = 2;
          int LA103_0 = input.LA(1);

          if ((LA103_0 == XOR_OP)) {
            int LA103_2 = input.LA(2);

            if ((synpred126_AntlrPilar())) {
              alt103 = 1;
            }

          }

          switch (alt103) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:637:8: t= XOR_OP a2= andExp
            {
              t = (Token) match(
                  input,
                  XOR_OP,
                  FOLLOW_XOR_OP_in_exclusiveOrExp6399);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_XOR_OP.add(t);

              pushFollow(FOLLOW_andExp_in_exclusiveOrExp6403);
              a2 = andExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_andExp.add(a2.getTree());

              // AST REWRITE
              // elements: exclusiveOrExp, a2, t
              // token labels: t
              // rule labels: retval, a2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_a2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule a2", a2 != null ? a2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 637:41: -> ^( BINARY $t $exclusiveOrExp $a2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:637:44: ^( BINARY $t $exclusiveOrExp $a2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_a2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop103;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 87, exclusiveOrExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "exclusiveOrExp"

  public static class andExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "andExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:641:1: andExp : (e1= equalityExp -> $e1) (t= AND_OP e2= equalityExp -> ^( BINARY $t $andExp $e2) )* ;
  public final AntlrPilarParser.andExp_return andExp()
      throws RecognitionException {
    AntlrPilarParser.andExp_return retval = new AntlrPilarParser.andExp_return();
    retval.start = input.LT(1);
    int andExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.equalityExp_return e1 = null;

    AntlrPilarParser.equalityExp_return e2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_AND_OP = new RewriteRuleTokenStream(adaptor,
        "token AND_OP");
    RewriteRuleSubtreeStream stream_equalityExp = new RewriteRuleSubtreeStream(
        adaptor, "rule equalityExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 88)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:642:2: ( (e1= equalityExp -> $e1) (t= AND_OP e2= equalityExp -> ^( BINARY $t $andExp $e2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:642:4: (e1= equalityExp -> $e1) (t= AND_OP e2= equalityExp -> ^( BINARY $t $andExp $e2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:642:4: (e1= equalityExp -> $e1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:642:6: e1= equalityExp
        {
          pushFollow(FOLLOW_equalityExp_in_andExp6455);
          e1 = equalityExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_equalityExp.add(e1.getTree());

          // AST REWRITE
          // elements: e1
          // token labels: 
          // rule labels: retval, e1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
                adaptor, "rule e1", e1 != null ? e1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 642:41: -> $e1
            {
              adaptor.addChild(root_0, stream_e1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:643:6: (t= AND_OP e2= equalityExp -> ^( BINARY $t $andExp $e2) )*
        loop104: do {
          int alt104 = 2;
          int LA104_0 = input.LA(1);

          if ((LA104_0 == AND_OP)) {
            int LA104_2 = input.LA(2);

            if ((synpred127_AntlrPilar())) {
              alt104 = 1;
            }

          }

          switch (alt104) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:643:8: t= AND_OP e2= equalityExp
            {
              t = (Token) match(input, AND_OP, FOLLOW_AND_OP_in_andExp6491);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_AND_OP.add(t);

              pushFollow(FOLLOW_equalityExp_in_andExp6495);
              e2 = equalityExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_equalityExp.add(e2.getTree());

              // AST REWRITE
              // elements: t, e2, andExp
              // token labels: t
              // rule labels: retval, e2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule e2", e2 != null ? e2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 643:41: -> ^( BINARY $t $andExp $e2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:643:44: ^( BINARY $t $andExp $e2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_e2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop104;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 88, andExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "andExp"

  public static class equalityExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "equalityExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:647:1: equalityExp : (t1= typeTestExp -> $t1) (t= EQ_OP t2= typeTestExp -> ^( BINARY $t $equalityExp $t2) )* ;
  public final AntlrPilarParser.equalityExp_return equalityExp()
      throws RecognitionException {
    AntlrPilarParser.equalityExp_return retval = new AntlrPilarParser.equalityExp_return();
    retval.start = input.LT(1);
    int equalityExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.typeTestExp_return t1 = null;

    AntlrPilarParser.typeTestExp_return t2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_EQ_OP = new RewriteRuleTokenStream(adaptor,
        "token EQ_OP");
    RewriteRuleSubtreeStream stream_typeTestExp = new RewriteRuleSubtreeStream(
        adaptor, "rule typeTestExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 89)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:648:2: ( (t1= typeTestExp -> $t1) (t= EQ_OP t2= typeTestExp -> ^( BINARY $t $equalityExp $t2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:648:4: (t1= typeTestExp -> $t1) (t= EQ_OP t2= typeTestExp -> ^( BINARY $t $equalityExp $t2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:648:4: (t1= typeTestExp -> $t1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:648:6: t1= typeTestExp
        {
          pushFollow(FOLLOW_typeTestExp_in_equalityExp6542);
          t1 = typeTestExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_typeTestExp.add(t1.getTree());

          // AST REWRITE
          // elements: t1
          // token labels: 
          // rule labels: retval, t1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_t1 = new RewriteRuleSubtreeStream(
                adaptor, "rule t1", t1 != null ? t1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 648:41: -> $t1
            {
              adaptor.addChild(root_0, stream_t1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:649:6: (t= EQ_OP t2= typeTestExp -> ^( BINARY $t $equalityExp $t2) )*
        loop105: do {
          int alt105 = 2;
          int LA105_0 = input.LA(1);

          if ((LA105_0 == EQ_OP)) {
            int LA105_2 = input.LA(2);

            if ((synpred128_AntlrPilar())) {
              alt105 = 1;
            }

          }

          switch (alt105) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:649:8: t= EQ_OP t2= typeTestExp
            {
              t = (Token) match(input, EQ_OP, FOLLOW_EQ_OP_in_equalityExp6578);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_EQ_OP.add(t);

              pushFollow(FOLLOW_typeTestExp_in_equalityExp6582);
              t2 = typeTestExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeTestExp.add(t2.getTree());

              // AST REWRITE
              // elements: t, equalityExp, t2
              // token labels: t
              // rule labels: t2, retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_t2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule t2", t2 != null ? t2.tree : null);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 649:41: -> ^( BINARY $t $equalityExp $t2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:649:44: ^( BINARY $t $equalityExp $t2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_t2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop105;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 89, equalityExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "equalityExp"

  public static class typeTestExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeTestExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:653:1: typeTestExp : (r1= relationalExp -> $r1) (t= COLON_OP r2= relationalExp -> ^( BINARY $t $typeTestExp $r2) )* ;
  public final AntlrPilarParser.typeTestExp_return typeTestExp()
      throws RecognitionException {
    AntlrPilarParser.typeTestExp_return retval = new AntlrPilarParser.typeTestExp_return();
    retval.start = input.LT(1);
    int typeTestExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.relationalExp_return r1 = null;

    AntlrPilarParser.relationalExp_return r2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_COLON_OP = new RewriteRuleTokenStream(
        adaptor, "token COLON_OP");
    RewriteRuleSubtreeStream stream_relationalExp = new RewriteRuleSubtreeStream(
        adaptor, "rule relationalExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 90)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:654:2: ( (r1= relationalExp -> $r1) (t= COLON_OP r2= relationalExp -> ^( BINARY $t $typeTestExp $r2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:654:4: (r1= relationalExp -> $r1) (t= COLON_OP r2= relationalExp -> ^( BINARY $t $typeTestExp $r2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:654:4: (r1= relationalExp -> $r1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:654:6: r1= relationalExp
        {
          pushFollow(FOLLOW_relationalExp_in_typeTestExp6632);
          r1 = relationalExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_relationalExp.add(r1.getTree());

          // AST REWRITE
          // elements: r1
          // token labels: 
          // rule labels: retval, r1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_r1 = new RewriteRuleSubtreeStream(
                adaptor, "rule r1", r1 != null ? r1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 654:41: -> $r1
            {
              adaptor.addChild(root_0, stream_r1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:655:6: (t= COLON_OP r2= relationalExp -> ^( BINARY $t $typeTestExp $r2) )*
        loop106: do {
          int alt106 = 2;
          int LA106_0 = input.LA(1);

          if ((LA106_0 == COLON_OP)) {
            int LA106_2 = input.LA(2);

            if ((synpred129_AntlrPilar())) {
              alt106 = 1;
            }

          }

          switch (alt106) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:655:8: t= COLON_OP r2= relationalExp
            {
              t = (Token) match(
                  input,
                  COLON_OP,
                  FOLLOW_COLON_OP_in_typeTestExp6666);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_COLON_OP.add(t);

              pushFollow(FOLLOW_relationalExp_in_typeTestExp6670);
              r2 = relationalExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_relationalExp.add(r2.getTree());

              // AST REWRITE
              // elements: typeTestExp, t, r2
              // token labels: t
              // rule labels: retval, r2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_r2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule r2", r2 != null ? r2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 655:41: -> ^( BINARY $t $typeTestExp $r2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:655:44: ^( BINARY $t $typeTestExp $r2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_r2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop106;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 90, typeTestExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeTestExp"

  public static class relationalExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "relationalExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:659:1: relationalExp : (s1= shiftExp -> $s1) (t= REL_OP s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '<' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '>' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) )* ;
  public final AntlrPilarParser.relationalExp_return relationalExp()
      throws RecognitionException {
    AntlrPilarParser.relationalExp_return retval = new AntlrPilarParser.relationalExp_return();
    retval.start = input.LT(1);
    int relationalExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.shiftExp_return s1 = null;

    AntlrPilarParser.shiftExp_return s2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_REL_OP = new RewriteRuleTokenStream(adaptor,
        "token REL_OP");
    RewriteRuleTokenStream stream_168 = new RewriteRuleTokenStream(adaptor,
        "token 168");
    RewriteRuleTokenStream stream_167 = new RewriteRuleTokenStream(adaptor,
        "token 167");
    RewriteRuleSubtreeStream stream_shiftExp = new RewriteRuleSubtreeStream(
        adaptor, "rule shiftExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 91)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:660:2: ( (s1= shiftExp -> $s1) (t= REL_OP s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '<' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '>' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:660:4: (s1= shiftExp -> $s1) (t= REL_OP s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '<' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '>' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:660:4: (s1= shiftExp -> $s1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:660:6: s1= shiftExp
        {
          pushFollow(FOLLOW_shiftExp_in_relationalExp6714);
          s1 = shiftExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_shiftExp.add(s1.getTree());

          // AST REWRITE
          // elements: s1
          // token labels: 
          // rule labels: retval, s1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_s1 = new RewriteRuleSubtreeStream(
                adaptor, "rule s1", s1 != null ? s1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 660:41: -> $s1
            {
              adaptor.addChild(root_0, stream_s1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:661:6: (t= REL_OP s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '<' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) | t= '>' s2= shiftExp -> ^( BINARY $t $relationalExp $s2) )*
        loop107: do {
          int alt107 = 4;
          switch (input.LA(1)) {
            case 168: {
              int LA107_2 = input.LA(2);

              if ((synpred132_AntlrPilar())) {
                alt107 = 3;
              }

            }
              break;
            case REL_OP: {
              int LA107_3 = input.LA(2);

              if ((synpred130_AntlrPilar())) {
                alt107 = 1;
              }

            }
              break;
            case 167: {
              int LA107_4 = input.LA(2);

              if ((synpred131_AntlrPilar())) {
                alt107 = 2;
              }

            }
              break;

          }

          switch (alt107) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:661:8: t= REL_OP s2= shiftExp
            {
              t = (Token) match(
                  input,
                  REL_OP,
                  FOLLOW_REL_OP_in_relationalExp6753);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_REL_OP.add(t);

              pushFollow(FOLLOW_shiftExp_in_relationalExp6757);
              s2 = shiftExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_shiftExp.add(s2.getTree());

              // AST REWRITE
              // elements: s2, relationalExp, t
              // token labels: t
              // rule labels: retval, s2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_s2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule s2", s2 != null ? s2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 661:41: -> ^( BINARY $t $relationalExp $s2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:661:44: ^( BINARY $t $relationalExp $s2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_s2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:662:8: t= '<' s2= shiftExp
            {
              t = (Token) match(input, 167, FOLLOW_167_in_relationalExp6795);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_167.add(t);

              pushFollow(FOLLOW_shiftExp_in_relationalExp6799);
              s2 = shiftExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_shiftExp.add(s2.getTree());

              // AST REWRITE
              // elements: relationalExp, t, s2
              // token labels: t
              // rule labels: retval, s2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_s2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule s2", s2 != null ? s2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 662:41: -> ^( BINARY $t $relationalExp $s2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:662:44: ^( BINARY $t $relationalExp $s2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_s2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 3:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:663:8: t= '>' s2= shiftExp
            {
              t = (Token) match(input, 168, FOLLOW_168_in_relationalExp6840);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_168.add(t);

              pushFollow(FOLLOW_shiftExp_in_relationalExp6844);
              s2 = shiftExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_shiftExp.add(s2.getTree());

              // AST REWRITE
              // elements: s2, t, relationalExp
              // token labels: t
              // rule labels: retval, s2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_s2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule s2", s2 != null ? s2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 663:41: -> ^( BINARY $t $relationalExp $s2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:663:44: ^( BINARY $t $relationalExp $s2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_s2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop107;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 91, relationalExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "relationalExp"

  public static class shiftExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "shiftExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:667:1: shiftExp : (a1= additiveExp -> $a1) (t= SHIFT_OP a2= additiveExp -> ^( BINARY $t $shiftExp $a2) )* ;
  public final AntlrPilarParser.shiftExp_return shiftExp()
      throws RecognitionException {
    AntlrPilarParser.shiftExp_return retval = new AntlrPilarParser.shiftExp_return();
    retval.start = input.LT(1);
    int shiftExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.additiveExp_return a1 = null;

    AntlrPilarParser.additiveExp_return a2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_SHIFT_OP = new RewriteRuleTokenStream(
        adaptor, "token SHIFT_OP");
    RewriteRuleSubtreeStream stream_additiveExp = new RewriteRuleSubtreeStream(
        adaptor, "rule additiveExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 92)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:668:2: ( (a1= additiveExp -> $a1) (t= SHIFT_OP a2= additiveExp -> ^( BINARY $t $shiftExp $a2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:668:4: (a1= additiveExp -> $a1) (t= SHIFT_OP a2= additiveExp -> ^( BINARY $t $shiftExp $a2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:668:4: (a1= additiveExp -> $a1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:668:6: a1= additiveExp
        {
          pushFollow(FOLLOW_additiveExp_in_shiftExp6897);
          a1 = additiveExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_additiveExp.add(a1.getTree());

          // AST REWRITE
          // elements: a1
          // token labels: 
          // rule labels: retval, a1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_a1 = new RewriteRuleSubtreeStream(
                adaptor, "rule a1", a1 != null ? a1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 668:41: -> $a1
            {
              adaptor.addChild(root_0, stream_a1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:669:6: (t= SHIFT_OP a2= additiveExp -> ^( BINARY $t $shiftExp $a2) )*
        loop108: do {
          int alt108 = 2;
          int LA108_0 = input.LA(1);

          if ((LA108_0 == SHIFT_OP)) {
            int LA108_2 = input.LA(2);

            if ((synpred133_AntlrPilar())) {
              alt108 = 1;
            }

          }

          switch (alt108) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:669:8: t= SHIFT_OP a2= additiveExp
            {
              t = (Token) match(
                  input,
                  SHIFT_OP,
                  FOLLOW_SHIFT_OP_in_shiftExp6933);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_SHIFT_OP.add(t);

              pushFollow(FOLLOW_additiveExp_in_shiftExp6937);
              a2 = additiveExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_additiveExp.add(a2.getTree());

              // AST REWRITE
              // elements: shiftExp, t, a2
              // token labels: t
              // rule labels: retval, a2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_a2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule a2", a2 != null ? a2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 669:41: -> ^( BINARY $t $shiftExp $a2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:669:44: ^( BINARY $t $shiftExp $a2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_a2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop108;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 92, shiftExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "shiftExp"

  public static class additiveExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "additiveExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:673:1: additiveExp : (m1= multiplicativeExp -> $m1) (t= ADD_OP m2= multiplicativeExp -> ^( BINARY $t $additiveExp $m2) )* ;
  public final AntlrPilarParser.additiveExp_return additiveExp()
      throws RecognitionException {
    AntlrPilarParser.additiveExp_return retval = new AntlrPilarParser.additiveExp_return();
    retval.start = input.LT(1);
    int additiveExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.multiplicativeExp_return m1 = null;

    AntlrPilarParser.multiplicativeExp_return m2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_ADD_OP = new RewriteRuleTokenStream(adaptor,
        "token ADD_OP");
    RewriteRuleSubtreeStream stream_multiplicativeExp = new RewriteRuleSubtreeStream(
        adaptor, "rule multiplicativeExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 93)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:674:2: ( (m1= multiplicativeExp -> $m1) (t= ADD_OP m2= multiplicativeExp -> ^( BINARY $t $additiveExp $m2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:674:4: (m1= multiplicativeExp -> $m1) (t= ADD_OP m2= multiplicativeExp -> ^( BINARY $t $additiveExp $m2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:674:4: (m1= multiplicativeExp -> $m1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:674:6: m1= multiplicativeExp
        {
          pushFollow(FOLLOW_multiplicativeExp_in_additiveExp6982);
          m1 = multiplicativeExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_multiplicativeExp.add(m1.getTree());

          // AST REWRITE
          // elements: m1
          // token labels: 
          // rule labels: retval, m1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_m1 = new RewriteRuleSubtreeStream(
                adaptor, "rule m1", m1 != null ? m1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 674:41: -> $m1
            {
              adaptor.addChild(root_0, stream_m1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:675:6: (t= ADD_OP m2= multiplicativeExp -> ^( BINARY $t $additiveExp $m2) )*
        loop109: do {
          int alt109 = 2;
          int LA109_0 = input.LA(1);

          if ((LA109_0 == ADD_OP)) {
            int LA109_2 = input.LA(2);

            if ((synpred134_AntlrPilar())) {
              alt109 = 1;
            }

          }

          switch (alt109) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:675:8: t= ADD_OP m2= multiplicativeExp
            {
              t = (Token) match(input, ADD_OP, FOLLOW_ADD_OP_in_additiveExp7012);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ADD_OP.add(t);

              pushFollow(FOLLOW_multiplicativeExp_in_additiveExp7016);
              m2 = multiplicativeExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_multiplicativeExp.add(m2.getTree());

              // AST REWRITE
              // elements: m2, t, additiveExp
              // token labels: t
              // rule labels: retval, m2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_m2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule m2", m2 != null ? m2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 675:41: -> ^( BINARY $t $additiveExp $m2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:675:44: ^( BINARY $t $additiveExp $m2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_m2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop109;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 93, additiveExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "additiveExp"

  public static class multiplicativeExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "multiplicativeExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:679:1: multiplicativeExp : (u1= unaryExp -> $u1) (t= MUL_OP u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) | t= '*' u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) )* ;
  public final AntlrPilarParser.multiplicativeExp_return multiplicativeExp()
      throws RecognitionException {
    AntlrPilarParser.multiplicativeExp_return retval = new AntlrPilarParser.multiplicativeExp_return();
    retval.start = input.LT(1);
    int multiplicativeExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.unaryExp_return u1 = null;

    AntlrPilarParser.unaryExp_return u2 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_215 = new RewriteRuleTokenStream(adaptor,
        "token 215");
    RewriteRuleTokenStream stream_MUL_OP = new RewriteRuleTokenStream(adaptor,
        "token MUL_OP");
    RewriteRuleSubtreeStream stream_unaryExp = new RewriteRuleSubtreeStream(
        adaptor, "rule unaryExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 94)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:680:2: ( (u1= unaryExp -> $u1) (t= MUL_OP u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) | t= '*' u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:680:4: (u1= unaryExp -> $u1) (t= MUL_OP u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) | t= '*' u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:680:4: (u1= unaryExp -> $u1)
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:680:6: u1= unaryExp
        {
          pushFollow(FOLLOW_unaryExp_in_multiplicativeExp7058);
          u1 = unaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_unaryExp.add(u1.getTree());

          // AST REWRITE
          // elements: u1
          // token labels: 
          // rule labels: retval, u1
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);
            RewriteRuleSubtreeStream stream_u1 = new RewriteRuleSubtreeStream(
                adaptor, "rule u1", u1 != null ? u1.tree : null);

            root_0 = (Object) adaptor.nil();
            // 680:41: -> $u1
            {
              adaptor.addChild(root_0, stream_u1.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:681:6: (t= MUL_OP u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) | t= '*' u2= unaryExp -> ^( BINARY $t $multiplicativeExp $u2) )*
        loop110: do {
          int alt110 = 3;
          int LA110_0 = input.LA(1);

          if ((LA110_0 == MUL_OP)) {
            int LA110_2 = input.LA(2);

            if ((synpred135_AntlrPilar())) {
              alt110 = 1;
            }

          } else if ((LA110_0 == 215)) {
            int LA110_3 = input.LA(2);

            if ((synpred136_AntlrPilar())) {
              alt110 = 2;
            }

          }

          switch (alt110) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:681:8: t= MUL_OP u2= unaryExp
            {
              t = (Token) match(
                  input,
                  MUL_OP,
                  FOLLOW_MUL_OP_in_multiplicativeExp7098);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_MUL_OP.add(t);

              pushFollow(FOLLOW_unaryExp_in_multiplicativeExp7102);
              u2 = unaryExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_unaryExp.add(u2.getTree());

              // AST REWRITE
              // elements: u2, t, multiplicativeExp
              // token labels: t
              // rule labels: retval, u2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_u2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule u2", u2 != null ? u2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 681:41: -> ^( BINARY $t $multiplicativeExp $u2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:681:44: ^( BINARY $t $multiplicativeExp $u2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_u2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:682:8: t= '*' u2= unaryExp
            {
              t = (Token) match(input, 215, FOLLOW_215_in_multiplicativeExp7140);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_215.add(t);

              pushFollow(FOLLOW_unaryExp_in_multiplicativeExp7144);
              u2 = unaryExp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_unaryExp.add(u2.getTree());

              // AST REWRITE
              // elements: multiplicativeExp, t, u2
              // token labels: t
              // rule labels: retval, u2
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                    adaptor, "token t", t);
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_u2 = new RewriteRuleSubtreeStream(
                    adaptor, "rule u2", u2 != null ? u2.tree : null);

                root_0 = (Object) adaptor.nil();
                // 682:41: -> ^( BINARY $t $multiplicativeExp $u2)
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:682:44: ^( BINARY $t $multiplicativeExp $u2)
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(BINARY, "BINARY"),
                        root_1);

                    adaptor.addChild(root_1, stream_t.nextNode());
                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_u2.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop110;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 94, multiplicativeExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "multiplicativeExp"

  public static class unaryExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "unaryExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:686:1: unaryExp : (t= UN_OP unaryExp -> ^( UNARY $t unaryExp ) | t= ADD_OP unaryExp -> ^( UNARY $t unaryExp ) | t= MUL_OP unaryExp -> ^( UNARY $t unaryExp ) | t= '*' unaryExp -> ^( UNARY $t unaryExp ) | castExp );
  public final AntlrPilarParser.unaryExp_return unaryExp()
      throws RecognitionException {
    AntlrPilarParser.unaryExp_return retval = new AntlrPilarParser.unaryExp_return();
    retval.start = input.LT(1);
    int unaryExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.unaryExp_return unaryExp348 = null;

    AntlrPilarParser.unaryExp_return unaryExp349 = null;

    AntlrPilarParser.unaryExp_return unaryExp350 = null;

    AntlrPilarParser.unaryExp_return unaryExp351 = null;

    AntlrPilarParser.castExp_return castExp352 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_215 = new RewriteRuleTokenStream(adaptor,
        "token 215");
    RewriteRuleTokenStream stream_UN_OP = new RewriteRuleTokenStream(adaptor,
        "token UN_OP");
    RewriteRuleTokenStream stream_MUL_OP = new RewriteRuleTokenStream(adaptor,
        "token MUL_OP");
    RewriteRuleTokenStream stream_ADD_OP = new RewriteRuleTokenStream(adaptor,
        "token ADD_OP");
    RewriteRuleSubtreeStream stream_unaryExp = new RewriteRuleSubtreeStream(
        adaptor, "rule unaryExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 95)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:687:2: (t= UN_OP unaryExp -> ^( UNARY $t unaryExp ) | t= ADD_OP unaryExp -> ^( UNARY $t unaryExp ) | t= MUL_OP unaryExp -> ^( UNARY $t unaryExp ) | t= '*' unaryExp -> ^( UNARY $t unaryExp ) | castExp )
      int alt111 = 5;
      switch (input.LA(1)) {
        case UN_OP: {
          alt111 = 1;
        }
          break;
        case ADD_OP: {
          alt111 = 2;
        }
          break;
        case MUL_OP: {
          alt111 = 3;
        }
          break;
        case 215: {
          alt111 = 4;
        }
          break;
        case HEX_LIT:
        case DEC_LIT:
        case OCT_LIT:
        case ID:
        case GLOBALID:
        case CHAR_LIT:
        case STRING_LIT:
        case SYMBOL_LIT:
        case RAW_LIT:
        case BIN_LIT:
        case FLOAT_LIT:
        case RATIONAL_LIT:
        case 169:
        case 177:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 223: {
          alt111 = 5;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 111, 0,
              input);

          throw nvae;
      }

      switch (alt111) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:687:4: t= UN_OP unaryExp
        {
          t = (Token) match(input, UN_OP, FOLLOW_UN_OP_in_unaryExp7203);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_UN_OP.add(t);

          pushFollow(FOLLOW_unaryExp_in_unaryExp7205);
          unaryExp348 = unaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_unaryExp.add(unaryExp348.getTree());

          // AST REWRITE
          // elements: t, unaryExp
          // token labels: t
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                adaptor, "token t", t);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 687:41: -> ^( UNARY $t unaryExp )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:687:44: ^( UNARY $t unaryExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(UNARY, "UNARY"),
                    root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_unaryExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:688:4: t= ADD_OP unaryExp
        {
          t = (Token) match(input, ADD_OP, FOLLOW_ADD_OP_in_unaryExp7243);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_ADD_OP.add(t);

          pushFollow(FOLLOW_unaryExp_in_unaryExp7245);
          unaryExp349 = unaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_unaryExp.add(unaryExp349.getTree());

          // AST REWRITE
          // elements: t, unaryExp
          // token labels: t
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                adaptor, "token t", t);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 688:41: -> ^( UNARY $t unaryExp )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:688:44: ^( UNARY $t unaryExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(UNARY, "UNARY"),
                    root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_unaryExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:689:4: t= MUL_OP unaryExp
        {
          t = (Token) match(input, MUL_OP, FOLLOW_MUL_OP_in_unaryExp7282);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_MUL_OP.add(t);

          pushFollow(FOLLOW_unaryExp_in_unaryExp7284);
          unaryExp350 = unaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_unaryExp.add(unaryExp350.getTree());

          // AST REWRITE
          // elements: t, unaryExp
          // token labels: t
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                adaptor, "token t", t);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 689:41: -> ^( UNARY $t unaryExp )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:689:44: ^( UNARY $t unaryExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(UNARY, "UNARY"),
                    root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_unaryExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:690:4: t= '*' unaryExp
        {
          t = (Token) match(input, 215, FOLLOW_215_in_unaryExp7321);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_215.add(t);

          pushFollow(FOLLOW_unaryExp_in_unaryExp7323);
          unaryExp351 = unaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_unaryExp.add(unaryExp351.getTree());

          // AST REWRITE
          // elements: t, unaryExp
          // token labels: t
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                adaptor, "token t", t);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 690:41: -> ^( UNARY $t unaryExp )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:690:44: ^( UNARY $t unaryExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(UNARY, "UNARY"),
                    root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_unaryExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:691:4: castExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_castExp_in_unaryExp7361);
          castExp352 = castExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, castExp352.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 95, unaryExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "unaryExp"

  public static class castExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "castExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:694:1: castExp : (t= '(' type ')' primaryExp -> ^( CAST[$t] type primaryExp ) | primaryExp );
  public final AntlrPilarParser.castExp_return castExp()
      throws RecognitionException {
    AntlrPilarParser.castExp_return retval = new AntlrPilarParser.castExp_return();
    retval.start = input.LT(1);
    int castExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal354 = null;
    AntlrPilarParser.type_return type353 = null;

    AntlrPilarParser.primaryExp_return primaryExp355 = null;

    AntlrPilarParser.primaryExp_return primaryExp356 = null;

    Object t_tree = null;
    Object char_literal354_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleSubtreeStream stream_primaryExp = new RewriteRuleSubtreeStream(
        adaptor, "rule primaryExp");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 96)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:695:2: (t= '(' type ')' primaryExp -> ^( CAST[$t] type primaryExp ) | primaryExp )
      int alt112 = 2;
      alt112 = dfa112.predict(input);
      switch (alt112) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:695:4: t= '(' type ')' primaryExp
        {
          t = (Token) match(input, 169, FOLLOW_169_in_castExp7374);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_169.add(t);

          pushFollow(FOLLOW_type_in_castExp7376);
          type353 = type();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_type.add(type353.getTree());
          char_literal354 = (Token) match(input, 170, FOLLOW_170_in_castExp7378);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_170.add(char_literal354);

          pushFollow(FOLLOW_primaryExp_in_castExp7380);
          primaryExp355 = primaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_primaryExp.add(primaryExp355.getTree());

          // AST REWRITE
          // elements: type, primaryExp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 695:41: -> ^( CAST[$t] type primaryExp )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:695:44: ^( CAST[$t] type primaryExp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(CAST, t),
                    root_1);

                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_primaryExp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:696:4: primaryExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_primaryExp_in_castExp7407);
          primaryExp356 = primaryExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, primaryExp356.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 96, castExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "castExp"

  public static class primaryExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "primaryExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:699:1: primaryExp : (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $primaryExp expList ) | t= '.' ID -> ^( ACCESS[$t] $primaryExp ID ) | callArg -> ^( CALL $primaryExp callArg ) )* ;
  public final AntlrPilarParser.primaryExp_return primaryExp()
      throws RecognitionException {
    AntlrPilarParser.primaryExp_return retval = new AntlrPilarParser.primaryExp_return();
    retval.start = input.LT(1);
    int primaryExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal358 = null;
    Token ID359 = null;
    AntlrPilarParser.primary_return p = null;

    AntlrPilarParser.expList_return expList357 = null;

    AntlrPilarParser.callArg_return callArg360 = null;

    Object t_tree = null;
    Object char_literal358_tree = null;
    Object ID359_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_203 = new RewriteRuleTokenStream(adaptor,
        "token 203");
    RewriteRuleTokenStream stream_216 = new RewriteRuleTokenStream(adaptor,
        "token 216");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_callArg = new RewriteRuleSubtreeStream(
        adaptor, "rule callArg");
    RewriteRuleSubtreeStream stream_expList = new RewriteRuleSubtreeStream(
        adaptor, "rule expList");
    RewriteRuleSubtreeStream stream_primary = new RewriteRuleSubtreeStream(
        adaptor, "rule primary");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 97)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:700:2: ( (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $primaryExp expList ) | t= '.' ID -> ^( ACCESS[$t] $primaryExp ID ) | callArg -> ^( CALL $primaryExp callArg ) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:700:4: (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $primaryExp expList ) | t= '.' ID -> ^( ACCESS[$t] $primaryExp ID ) | callArg -> ^( CALL $primaryExp callArg ) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:700:4: (p= primary -> primary )
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:700:6: p= primary
        {
          pushFollow(FOLLOW_primary_in_primaryExp7423);
          p = primary();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_primary.add(p.getTree());

          // AST REWRITE
          // elements: primary
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 700:41: -> primary
            {
              adaptor.addChild(root_0, stream_primary.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:701:6: (t= '[' expList ']' -> ^( INDEXING[$t] $primaryExp expList ) | t= '.' ID -> ^( ACCESS[$t] $primaryExp ID ) | callArg -> ^( CALL $primaryExp callArg ) )*
        loop113: do {
          int alt113 = 4;
          alt113 = dfa113.predict(input);
          switch (alt113) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:701:8: t= '[' expList ']'
            {
              t = (Token) match(input, 202, FOLLOW_202_in_primaryExp7463);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_202.add(t);

              pushFollow(FOLLOW_expList_in_primaryExp7465);
              expList357 = expList();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_expList.add(expList357.getTree());
              char_literal358 = (Token) match(
                  input,
                  203,
                  FOLLOW_203_in_primaryExp7467);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_203.add(char_literal358);

              // AST REWRITE
              // elements: expList, primaryExp
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 701:41: -> ^( INDEXING[$t] $primaryExp expList )
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:701:44: ^( INDEXING[$t] $primaryExp expList )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(INDEXING, t),
                        root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_expList.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:702:8: t= '.' ID
            {
              t = (Token) match(input, 216, FOLLOW_216_in_primaryExp7505);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_216.add(t);

              ID359 = (Token) match(input, ID, FOLLOW_ID_in_primaryExp7507);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ID359);

              // AST REWRITE
              // elements: ID, primaryExp
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 702:41: -> ^( ACCESS[$t] $primaryExp ID )
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:702:44: ^( ACCESS[$t] $primaryExp ID )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(ACCESS, t),
                        root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_ID.nextNode());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 3:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:703:8: callArg
            {
              pushFollow(FOLLOW_callArg_in_primaryExp7552);
              callArg360 = callArg();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_callArg.add(callArg360.getTree());

              // AST REWRITE
              // elements: primaryExp, callArg
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 703:41: -> ^( CALL $primaryExp callArg )
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:703:44: ^( CALL $primaryExp callArg )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(CALL, "CALL"),
                        root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_callArg.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop113;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 97, primaryExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "primaryExp"

  public static class expList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "expList"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:707:1: expList : exp ( ',' exp )* -> ^( LIST ( exp )+ ) ;
  public final AntlrPilarParser.expList_return expList()
      throws RecognitionException {
    AntlrPilarParser.expList_return retval = new AntlrPilarParser.expList_return();
    retval.start = input.LT(1);
    int expList_StartIndex = input.index();
    Object root_0 = null;

    Token char_literal362 = null;
    AntlrPilarParser.exp_return exp361 = null;

    AntlrPilarParser.exp_return exp363 = null;

    Object char_literal362_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 98)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:708:2: ( exp ( ',' exp )* -> ^( LIST ( exp )+ ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:708:4: exp ( ',' exp )*
      {
        pushFollow(FOLLOW_exp_in_expList7607);
        exp361 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp361.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:708:8: ( ',' exp )*
        loop114: do {
          int alt114 = 2;
          int LA114_0 = input.LA(1);

          if ((LA114_0 == 172)) {
            alt114 = 1;
          }

          switch (alt114) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:708:10: ',' exp
            {
              char_literal362 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_expList7611);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal362);

              pushFollow(FOLLOW_exp_in_expList7613);
              exp363 = exp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_exp.add(exp363.getTree());

            }
              break;

            default:
              break loop114;
          }
        } while (true);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 708:41: -> ^( LIST ( exp )+ )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:708:44: ^( LIST ( exp )+ )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LIST, "LIST"),
                  root_1);

              if (!(stream_exp.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_exp.hasNext()) {
                adaptor.addChild(root_1, stream_exp.nextTree());

              }
              stream_exp.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 98, expList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "expList"

  public static class callArg_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "callArg"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:711:1: callArg : (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $callArg expList ) | t= '.' ID -> ^( ACCESS[$t] $callArg ID ) )* ;
  public final AntlrPilarParser.callArg_return callArg()
      throws RecognitionException {
    AntlrPilarParser.callArg_return retval = new AntlrPilarParser.callArg_return();
    retval.start = input.LT(1);
    int callArg_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal365 = null;
    Token ID366 = null;
    AntlrPilarParser.primary_return p = null;

    AntlrPilarParser.expList_return expList364 = null;

    Object t_tree = null;
    Object char_literal365_tree = null;
    Object ID366_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_203 = new RewriteRuleTokenStream(adaptor,
        "token 203");
    RewriteRuleTokenStream stream_216 = new RewriteRuleTokenStream(adaptor,
        "token 216");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_expList = new RewriteRuleSubtreeStream(
        adaptor, "rule expList");
    RewriteRuleSubtreeStream stream_primary = new RewriteRuleSubtreeStream(
        adaptor, "rule primary");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 99)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:712:2: ( (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $callArg expList ) | t= '.' ID -> ^( ACCESS[$t] $callArg ID ) )* )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:712:4: (p= primary -> primary ) (t= '[' expList ']' -> ^( INDEXING[$t] $callArg expList ) | t= '.' ID -> ^( ACCESS[$t] $callArg ID ) )*
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:712:4: (p= primary -> primary )
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:712:6: p= primary
        {
          pushFollow(FOLLOW_primary_in_callArg7660);
          p = primary();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_primary.add(p.getTree());

          // AST REWRITE
          // elements: primary
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 712:41: -> primary
            {
              adaptor.addChild(root_0, stream_primary.nextTree());

            }

            retval.tree = root_0;
          }
        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:713:6: (t= '[' expList ']' -> ^( INDEXING[$t] $callArg expList ) | t= '.' ID -> ^( ACCESS[$t] $callArg ID ) )*
        loop115: do {
          int alt115 = 3;
          int LA115_0 = input.LA(1);

          if ((LA115_0 == 202)) {
            int LA115_2 = input.LA(2);

            if ((synpred146_AntlrPilar())) {
              alt115 = 1;
            }

          } else if ((LA115_0 == 216)) {
            int LA115_3 = input.LA(2);

            if ((synpred147_AntlrPilar())) {
              alt115 = 2;
            }

          }

          switch (alt115) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:713:8: t= '[' expList ']'
            {
              t = (Token) match(input, 202, FOLLOW_202_in_callArg7700);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_202.add(t);

              pushFollow(FOLLOW_expList_in_callArg7702);
              expList364 = expList();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_expList.add(expList364.getTree());
              char_literal365 = (Token) match(
                  input,
                  203,
                  FOLLOW_203_in_callArg7704);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_203.add(char_literal365);

              // AST REWRITE
              // elements: expList, callArg
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 713:41: -> ^( INDEXING[$t] $callArg expList )
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:713:44: ^( INDEXING[$t] $callArg expList )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(INDEXING, t),
                        root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_expList.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;
            case 2:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:714:8: t= '.' ID
            {
              t = (Token) match(input, 216, FOLLOW_216_in_callArg7742);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_216.add(t);

              ID366 = (Token) match(input, ID, FOLLOW_ID_in_callArg7744);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ID366);

              // AST REWRITE
              // elements: ID, callArg
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 714:41: -> ^( ACCESS[$t] $callArg ID )
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:714:44: ^( ACCESS[$t] $callArg ID )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(ACCESS, t),
                        root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());
                    adaptor.addChild(root_1, stream_ID.nextNode());

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

            default:
              break loop115;
          }
        } while (true);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 99, callArg_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "callArg"

  public static class primary_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "primary"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:718:1: primary : ( literal | tuple | nameExp | newListRanged | newList | newMultiArray | newRecord | newSet | newFunction | t= '`' type -> ^( TYPE_EXP[$t] type ) | newExp | funExp | letExp );
  public final AntlrPilarParser.primary_return primary()
      throws RecognitionException {
    AntlrPilarParser.primary_return retval = new AntlrPilarParser.primary_return();
    retval.start = input.LT(1);
    int primary_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.literal_return literal367 = null;

    AntlrPilarParser.tuple_return tuple368 = null;

    AntlrPilarParser.nameExp_return nameExp369 = null;

    AntlrPilarParser.newListRanged_return newListRanged370 = null;

    AntlrPilarParser.newList_return newList371 = null;

    AntlrPilarParser.newMultiArray_return newMultiArray372 = null;

    AntlrPilarParser.newRecord_return newRecord373 = null;

    AntlrPilarParser.newSet_return newSet374 = null;

    AntlrPilarParser.newFunction_return newFunction375 = null;

    AntlrPilarParser.type_return type376 = null;

    AntlrPilarParser.newExp_return newExp377 = null;

    AntlrPilarParser.funExp_return funExp378 = null;

    AntlrPilarParser.letExp_return letExp379 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_217 = new RewriteRuleTokenStream(adaptor,
        "token 217");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 100)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:719:2: ( literal | tuple | nameExp | newListRanged | newList | newMultiArray | newRecord | newSet | newFunction | t= '`' type -> ^( TYPE_EXP[$t] type ) | newExp | funExp | letExp )
      int alt116 = 13;
      alt116 = dfa116.predict(input);
      switch (alt116) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:719:4: literal
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_literal_in_primary7801);
          literal367 = literal();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, literal367.getTree());

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:720:4: tuple
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_tuple_in_primary7806);
          tuple368 = tuple();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, tuple368.getTree());

        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:721:4: nameExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_nameExp_in_primary7811);
          nameExp369 = nameExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, nameExp369.getTree());

        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:722:4: newListRanged
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newListRanged_in_primary7816);
          newListRanged370 = newListRanged();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newListRanged370.getTree());

        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:723:4: newList
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newList_in_primary7821);
          newList371 = newList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newList371.getTree());

        }
          break;
        case 6:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:724:4: newMultiArray
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newMultiArray_in_primary7826);
          newMultiArray372 = newMultiArray();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newMultiArray372.getTree());

        }
          break;
        case 7:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:725:4: newRecord
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newRecord_in_primary7831);
          newRecord373 = newRecord();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newRecord373.getTree());

        }
          break;
        case 8:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:726:4: newSet
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newSet_in_primary7836);
          newSet374 = newSet();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newSet374.getTree());

        }
          break;
        case 9:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:727:4: newFunction
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newFunction_in_primary7841);
          newFunction375 = newFunction();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newFunction375.getTree());

        }
          break;
        case 10:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:728:4: t= '`' type
        {
          t = (Token) match(input, 217, FOLLOW_217_in_primary7849);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_217.add(t);

          pushFollow(FOLLOW_type_in_primary7851);
          type376 = type();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_type.add(type376.getTree());

          // AST REWRITE
          // elements: type
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 728:41: -> ^( TYPE_EXP[$t] type )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:728:44: ^( TYPE_EXP[$t] type )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(TYPE_EXP, t),
                    root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 11:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:729:4: newExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_newExp_in_primary7891);
          newExp377 = newExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, newExp377.getTree());

        }
          break;
        case 12:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:730:4: funExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_funExp_in_primary7896);
          funExp378 = funExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, funExp378.getTree());

        }
          break;
        case 13:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:731:4: letExp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_letExp_in_primary7901);
          letExp379 = letExp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, letExp379.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 100, primary_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "primary"

  public static class nameExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "nameExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:734:1: nameExp : ( name -> ^( NAME_EXP name ) | globalName -> ^( NAME_EXP globalName ) );
  public final AntlrPilarParser.nameExp_return nameExp()
      throws RecognitionException {
    AntlrPilarParser.nameExp_return retval = new AntlrPilarParser.nameExp_return();
    retval.start = input.LT(1);
    int nameExp_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.name_return name380 = null;

    AntlrPilarParser.globalName_return globalName381 = null;

    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_globalName = new RewriteRuleSubtreeStream(
        adaptor, "rule globalName");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 101)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:735:2: ( name -> ^( NAME_EXP name ) | globalName -> ^( NAME_EXP globalName ) )
      int alt117 = 2;
      alt117 = dfa117.predict(input);
      switch (alt117) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:735:4: name
        {
          pushFollow(FOLLOW_name_in_nameExp7912);
          name380 = name();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_name.add(name380.getTree());

          // AST REWRITE
          // elements: name
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 735:41: -> ^( NAME_EXP name )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:735:44: ^( NAME_EXP name )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(NAME_EXP, "NAME_EXP"),
                    root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:736:4: globalName
        {
          pushFollow(FOLLOW_globalName_in_nameExp7957);
          globalName381 = globalName();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_globalName.add(globalName381.getTree());

          // AST REWRITE
          // elements: globalName
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 736:41: -> ^( NAME_EXP globalName )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:736:44: ^( NAME_EXP globalName )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(NAME_EXP, "NAME_EXP"),
                    root_1);

                adaptor.addChild(root_1, stream_globalName.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 101, nameExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "nameExp"

  public static class literal_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "literal"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:739:1: literal : (t= 'true' -> ^( TRUE[$t] ) | t= 'false' -> ^( FALSE[$t] ) | t= 'null' -> ^( NULL[$t] ) | c= CHAR_LIT -> ^( CHAR[$c] $c) | intLiteral | realLiteral | s= STRING_LIT -> ^( STRING[$s] $s) | s= SYMBOL_LIT -> ^( SYMBOL[$s] $s) | r= RAW_LIT -> ^( RAW[$r] $r) );
  public final AntlrPilarParser.literal_return literal()
      throws RecognitionException {
    AntlrPilarParser.literal_return retval = new AntlrPilarParser.literal_return();
    retval.start = input.LT(1);
    int literal_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token c = null;
    Token s = null;
    Token r = null;
    AntlrPilarParser.intLiteral_return intLiteral382 = null;

    AntlrPilarParser.realLiteral_return realLiteral383 = null;

    Object t_tree = null;
    Object c_tree = null;
    Object s_tree = null;
    Object r_tree = null;
    RewriteRuleTokenStream stream_220 = new RewriteRuleTokenStream(adaptor,
        "token 220");
    RewriteRuleTokenStream stream_RAW_LIT = new RewriteRuleTokenStream(adaptor,
        "token RAW_LIT");
    RewriteRuleTokenStream stream_SYMBOL_LIT = new RewriteRuleTokenStream(
        adaptor, "token SYMBOL_LIT");
    RewriteRuleTokenStream stream_CHAR_LIT = new RewriteRuleTokenStream(
        adaptor, "token CHAR_LIT");
    RewriteRuleTokenStream stream_219 = new RewriteRuleTokenStream(adaptor,
        "token 219");
    RewriteRuleTokenStream stream_STRING_LIT = new RewriteRuleTokenStream(
        adaptor, "token STRING_LIT");
    RewriteRuleTokenStream stream_218 = new RewriteRuleTokenStream(adaptor,
        "token 218");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 102)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:740:2: (t= 'true' -> ^( TRUE[$t] ) | t= 'false' -> ^( FALSE[$t] ) | t= 'null' -> ^( NULL[$t] ) | c= CHAR_LIT -> ^( CHAR[$c] $c) | intLiteral | realLiteral | s= STRING_LIT -> ^( STRING[$s] $s) | s= SYMBOL_LIT -> ^( SYMBOL[$s] $s) | r= RAW_LIT -> ^( RAW[$r] $r) )
      int alt118 = 9;
      switch (input.LA(1)) {
        case 218: {
          alt118 = 1;
        }
          break;
        case 219: {
          alt118 = 2;
        }
          break;
        case 220: {
          alt118 = 3;
        }
          break;
        case CHAR_LIT: {
          alt118 = 4;
        }
          break;
        case HEX_LIT:
        case DEC_LIT:
        case OCT_LIT:
        case BIN_LIT: {
          alt118 = 5;
        }
          break;
        case FLOAT_LIT:
        case RATIONAL_LIT: {
          alt118 = 6;
        }
          break;
        case STRING_LIT: {
          alt118 = 7;
        }
          break;
        case SYMBOL_LIT: {
          alt118 = 8;
        }
          break;
        case RAW_LIT: {
          alt118 = 9;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 118, 0,
              input);

          throw nvae;
      }

      switch (alt118) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:740:4: t= 'true'
        {
          t = (Token) match(input, 218, FOLLOW_218_in_literal8006);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_218.add(t);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 740:41: -> ^( TRUE[$t] )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:740:44: ^( TRUE[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(TRUE, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:741:4: t= 'false'
        {
          t = (Token) match(input, 219, FOLLOW_219_in_literal8048);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_219.add(t);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 741:41: -> ^( FALSE[$t] )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:741:44: ^( FALSE[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(FALSE, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:742:4: t= 'null'
        {
          t = (Token) match(input, 220, FOLLOW_220_in_literal8089);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_220.add(t);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 742:41: -> ^( NULL[$t] )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:742:44: ^( NULL[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(NULL, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:743:4: c= CHAR_LIT
        {
          c = (Token) match(input, CHAR_LIT, FOLLOW_CHAR_LIT_in_literal8131);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_CHAR_LIT.add(c);

          // AST REWRITE
          // elements: c
          // token labels: c
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c = new RewriteRuleTokenStream(
                adaptor, "token c", c);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 743:41: -> ^( CHAR[$c] $c)
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:743:44: ^( CHAR[$c] $c)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(CHAR, c),
                    root_1);

                adaptor.addChild(root_1, stream_c.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:744:4: intLiteral
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_intLiteral_in_literal8172);
          intLiteral382 = intLiteral();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, intLiteral382.getTree());

        }
          break;
        case 6:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:745:4: realLiteral
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_realLiteral_in_literal8177);
          realLiteral383 = realLiteral();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, realLiteral383.getTree());

        }
          break;
        case 7:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:746:4: s= STRING_LIT
        {
          s = (Token) match(input, STRING_LIT, FOLLOW_STRING_LIT_in_literal8184);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_STRING_LIT.add(s);

          // AST REWRITE
          // elements: s
          // token labels: s
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s = new RewriteRuleTokenStream(
                adaptor, "token s", s);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 746:41: -> ^( STRING[$s] $s)
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:746:44: ^( STRING[$s] $s)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(STRING, s),
                    root_1);

                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 8:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:747:4: s= SYMBOL_LIT
        {
          s = (Token) match(input, SYMBOL_LIT, FOLLOW_SYMBOL_LIT_in_literal8225);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_SYMBOL_LIT.add(s);

          // AST REWRITE
          // elements: s
          // token labels: s
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s = new RewriteRuleTokenStream(
                adaptor, "token s", s);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 747:41: -> ^( SYMBOL[$s] $s)
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:747:44: ^( SYMBOL[$s] $s)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(SYMBOL, s),
                    root_1);

                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 9:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:748:4: r= RAW_LIT
        {
          r = (Token) match(input, RAW_LIT, FOLLOW_RAW_LIT_in_literal8266);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_RAW_LIT.add(r);

          // AST REWRITE
          // elements: r
          // token labels: r
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_r = new RewriteRuleTokenStream(
                adaptor, "token r", r);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 748:41: -> ^( RAW[$r] $r)
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:748:44: ^( RAW[$r] $r)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(RAW, r),
                    root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 102, literal_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "literal"

  public static class intLiteral_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "intLiteral"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:751:1: intLiteral : (h= HEX_LIT -> ^( INT[$h] $h) | o= OCT_LIT -> ^( INT[$o] $o) | d= DEC_LIT -> ^( INT[$d] $d) | b= BIN_LIT -> ^( INT[$b] $b) );
  public final AntlrPilarParser.intLiteral_return intLiteral()
      throws RecognitionException {
    AntlrPilarParser.intLiteral_return retval = new AntlrPilarParser.intLiteral_return();
    retval.start = input.LT(1);
    int intLiteral_StartIndex = input.index();
    Object root_0 = null;

    Token h = null;
    Token o = null;
    Token d = null;
    Token b = null;

    Object h_tree = null;
    Object o_tree = null;
    Object d_tree = null;
    Object b_tree = null;
    RewriteRuleTokenStream stream_HEX_LIT = new RewriteRuleTokenStream(adaptor,
        "token HEX_LIT");
    RewriteRuleTokenStream stream_DEC_LIT = new RewriteRuleTokenStream(adaptor,
        "token DEC_LIT");
    RewriteRuleTokenStream stream_OCT_LIT = new RewriteRuleTokenStream(adaptor,
        "token OCT_LIT");
    RewriteRuleTokenStream stream_BIN_LIT = new RewriteRuleTokenStream(adaptor,
        "token BIN_LIT");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 103)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:752:2: (h= HEX_LIT -> ^( INT[$h] $h) | o= OCT_LIT -> ^( INT[$o] $o) | d= DEC_LIT -> ^( INT[$d] $d) | b= BIN_LIT -> ^( INT[$b] $b) )
      int alt119 = 4;
      switch (input.LA(1)) {
        case HEX_LIT: {
          alt119 = 1;
        }
          break;
        case OCT_LIT: {
          alt119 = 2;
        }
          break;
        case DEC_LIT: {
          alt119 = 3;
        }
          break;
        case BIN_LIT: {
          alt119 = 4;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 119, 0,
              input);

          throw nvae;
      }

      switch (alt119) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:752:4: h= HEX_LIT
        {
          h = (Token) match(input, HEX_LIT, FOLLOW_HEX_LIT_in_intLiteral8316);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_HEX_LIT.add(h);

          // AST REWRITE
          // elements: h
          // token labels: h
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_h = new RewriteRuleTokenStream(
                adaptor, "token h", h);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 752:41: -> ^( INT[$h] $h)
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:752:44: ^( INT[$h] $h)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(INT, h),
                    root_1);

                adaptor.addChild(root_1, stream_h.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:753:4: o= OCT_LIT
        {
          o = (Token) match(input, OCT_LIT, FOLLOW_OCT_LIT_in_intLiteral8361);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_OCT_LIT.add(o);

          // AST REWRITE
          // elements: o
          // token labels: o
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_o = new RewriteRuleTokenStream(
                adaptor, "token o", o);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 753:41: -> ^( INT[$o] $o)
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:753:44: ^( INT[$o] $o)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(INT, o),
                    root_1);

                adaptor.addChild(root_1, stream_o.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:754:4: d= DEC_LIT
        {
          d = (Token) match(input, DEC_LIT, FOLLOW_DEC_LIT_in_intLiteral8405);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_DEC_LIT.add(d);

          // AST REWRITE
          // elements: d
          // token labels: d
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d = new RewriteRuleTokenStream(
                adaptor, "token d", d);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 754:41: -> ^( INT[$d] $d)
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:754:44: ^( INT[$d] $d)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(INT, d),
                    root_1);

                adaptor.addChild(root_1, stream_d.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:755:4: b= BIN_LIT
        {
          b = (Token) match(input, BIN_LIT, FOLLOW_BIN_LIT_in_intLiteral8449);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_BIN_LIT.add(b);

          // AST REWRITE
          // elements: b
          // token labels: b
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b = new RewriteRuleTokenStream(
                adaptor, "token b", b);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 755:41: -> ^( INT[$b] $b)
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:755:44: ^( INT[$b] $b)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(INT, b),
                    root_1);

                adaptor.addChild(root_1, stream_b.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 103, intLiteral_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "intLiteral"

  public static class realLiteral_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "realLiteral"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:758:1: realLiteral : (f= FLOAT_LIT -> ^( FLOAT[$f] $f) | r= RATIONAL_LIT -> ^( RATIONAL[$r] $r) );
  public final AntlrPilarParser.realLiteral_return realLiteral()
      throws RecognitionException {
    AntlrPilarParser.realLiteral_return retval = new AntlrPilarParser.realLiteral_return();
    retval.start = input.LT(1);
    int realLiteral_StartIndex = input.index();
    Object root_0 = null;

    Token f = null;
    Token r = null;

    Object f_tree = null;
    Object r_tree = null;
    RewriteRuleTokenStream stream_FLOAT_LIT = new RewriteRuleTokenStream(
        adaptor, "token FLOAT_LIT");
    RewriteRuleTokenStream stream_RATIONAL_LIT = new RewriteRuleTokenStream(
        adaptor, "token RATIONAL_LIT");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 104)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:759:2: (f= FLOAT_LIT -> ^( FLOAT[$f] $f) | r= RATIONAL_LIT -> ^( RATIONAL[$r] $r) )
      int alt120 = 2;
      int LA120_0 = input.LA(1);

      if ((LA120_0 == FLOAT_LIT)) {
        alt120 = 1;
      } else if ((LA120_0 == RATIONAL_LIT)) {
        alt120 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 120, 0, input);

        throw nvae;
      }
      switch (alt120) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:759:4: f= FLOAT_LIT
        {
          f = (Token) match(
              input,
              FLOAT_LIT,
              FOLLOW_FLOAT_LIT_in_realLiteral8499);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_FLOAT_LIT.add(f);

          // AST REWRITE
          // elements: f
          // token labels: f
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f = new RewriteRuleTokenStream(
                adaptor, "token f", f);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 759:41: -> ^( FLOAT[$f] $f)
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:759:44: ^( FLOAT[$f] $f)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(FLOAT, f),
                    root_1);

                adaptor.addChild(root_1, stream_f.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:760:4: r= RATIONAL_LIT
        {
          r = (Token) match(
              input,
              RATIONAL_LIT,
              FOLLOW_RATIONAL_LIT_in_realLiteral8541);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_RATIONAL_LIT.add(r);

          // AST REWRITE
          // elements: r
          // token labels: r
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_r = new RewriteRuleTokenStream(
                adaptor, "token r", r);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 760:41: -> ^( RATIONAL[$r] $r)
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:760:44: ^( RATIONAL[$r] $r)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(RATIONAL, r),
                    root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 104, realLiteral_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "realLiteral"

  public static class tuple_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "tuple"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:763:1: tuple : t= '(' ( annotatedExp ( ',' annotatedExp )* )? ')' -> ^( TUPLE[$t] ^( LIST ( annotatedExp )* ) ) ;
  public final AntlrPilarParser.tuple_return tuple()
      throws RecognitionException {
    AntlrPilarParser.tuple_return retval = new AntlrPilarParser.tuple_return();
    retval.start = input.LT(1);
    int tuple_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal385 = null;
    Token char_literal387 = null;
    AntlrPilarParser.annotatedExp_return annotatedExp384 = null;

    AntlrPilarParser.annotatedExp_return annotatedExp386 = null;

    Object t_tree = null;
    Object char_literal385_tree = null;
    Object char_literal387_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleSubtreeStream stream_annotatedExp = new RewriteRuleSubtreeStream(
        adaptor, "rule annotatedExp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 105)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:764:2: (t= '(' ( annotatedExp ( ',' annotatedExp )* )? ')' -> ^( TUPLE[$t] ^( LIST ( annotatedExp )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:764:4: t= '(' ( annotatedExp ( ',' annotatedExp )* )? ')'
      {
        t = (Token) match(input, 169, FOLLOW_169_in_tuple8587);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_169.add(t);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:764:10: ( annotatedExp ( ',' annotatedExp )* )?
        int alt122 = 2;
        int LA122_0 = input.LA(1);

        if (((LA122_0 >= HEX_LIT && LA122_0 <= OCT_LIT) || LA122_0 == ID
            || LA122_0 == GLOBALID
            || (LA122_0 >= ADD_OP && LA122_0 <= RATIONAL_LIT) || LA122_0 == 169
            || LA122_0 == 177 || LA122_0 == 204 || LA122_0 == 208
            || LA122_0 == 215 || (LA122_0 >= 217 && LA122_0 <= 221) || LA122_0 == 223)) {
          alt122 = 1;
        }
        switch (alt122) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:764:12: annotatedExp ( ',' annotatedExp )*
          {
            pushFollow(FOLLOW_annotatedExp_in_tuple8591);
            annotatedExp384 = annotatedExp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_annotatedExp.add(annotatedExp384.getTree());
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:765:8: ( ',' annotatedExp )*
            loop121: do {
              int alt121 = 2;
              int LA121_0 = input.LA(1);

              if ((LA121_0 == 172)) {
                alt121 = 1;
              }

              switch (alt121) {
                case 1:
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:765:10: ',' annotatedExp
                {
                  char_literal385 = (Token) match(
                      input,
                      172,
                      FOLLOW_172_in_tuple8602);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_172.add(char_literal385);

                  pushFollow(FOLLOW_annotatedExp_in_tuple8604);
                  annotatedExp386 = annotatedExp();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_annotatedExp.add(annotatedExp386.getTree());

                }
                  break;

                default:
                  break loop121;
              }
            } while (true);

          }
            break;

        }

        char_literal387 = (Token) match(input, 170, FOLLOW_170_in_tuple8612);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_170.add(char_literal387);

        // AST REWRITE
        // elements: annotatedExp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 765:41: -> ^( TUPLE[$t] ^( LIST ( annotatedExp )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:765:44: ^( TUPLE[$t] ^( LIST ( annotatedExp )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TUPLE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:765:56: ^( LIST ( annotatedExp )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:765:63: ( annotatedExp )*
                while (stream_annotatedExp.hasNext()) {
                  adaptor.addChild(root_2, stream_annotatedExp.nextTree());

                }
                stream_annotatedExp.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 105, tuple_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "tuple"

  public static class annotatedExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotatedExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:768:1: annotatedExp : exp annotationList -> ^( ANN_EXP exp annotationList ) ;
  public final AntlrPilarParser.annotatedExp_return annotatedExp()
      throws RecognitionException {
    AntlrPilarParser.annotatedExp_return retval = new AntlrPilarParser.annotatedExp_return();
    retval.start = input.LT(1);
    int annotatedExp_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.exp_return exp388 = null;

    AntlrPilarParser.annotationList_return annotationList389 = null;

    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 106)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:769:2: ( exp annotationList -> ^( ANN_EXP exp annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:769:4: exp annotationList
      {
        pushFollow(FOLLOW_exp_in_annotatedExp8643);
        exp388 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp388.getTree());
        pushFollow(FOLLOW_annotationList_in_annotatedExp8645);
        annotationList389 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList389.getTree());

        // AST REWRITE
        // elements: annotationList, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 769:41: -> ^( ANN_EXP exp annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:769:44: ^( ANN_EXP exp annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ANN_EXP, "ANN_EXP"),
                  root_1);

              adaptor.addChild(root_1, stream_exp.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 106, annotatedExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotatedExp"

  public static class newExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:772:1: newExp : t= 'new' baseType ( newMultiArrayTypeFragment )* ( typeFragment )* -> ^( NEW_EXP[$t] baseType ^( LIST ( newMultiArrayTypeFragment )* ) ^( LIST ( typeFragment )* ) ) ;
  public final AntlrPilarParser.newExp_return newExp()
      throws RecognitionException {
    AntlrPilarParser.newExp_return retval = new AntlrPilarParser.newExp_return();
    retval.start = input.LT(1);
    int newExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    AntlrPilarParser.baseType_return baseType390 = null;

    AntlrPilarParser.newMultiArrayTypeFragment_return newMultiArrayTypeFragment391 = null;

    AntlrPilarParser.typeFragment_return typeFragment392 = null;

    Object t_tree = null;
    RewriteRuleTokenStream stream_221 = new RewriteRuleTokenStream(adaptor,
        "token 221");
    RewriteRuleSubtreeStream stream_newMultiArrayTypeFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule newMultiArrayTypeFragment");
    RewriteRuleSubtreeStream stream_baseType = new RewriteRuleSubtreeStream(
        adaptor, "rule baseType");
    RewriteRuleSubtreeStream stream_typeFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule typeFragment");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 107)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:773:2: (t= 'new' baseType ( newMultiArrayTypeFragment )* ( typeFragment )* -> ^( NEW_EXP[$t] baseType ^( LIST ( newMultiArrayTypeFragment )* ) ^( LIST ( typeFragment )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:773:4: t= 'new' baseType ( newMultiArrayTypeFragment )* ( typeFragment )*
      {
        t = (Token) match(input, 221, FOLLOW_221_in_newExp8686);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_221.add(t);

        pushFollow(FOLLOW_baseType_in_newExp8688);
        baseType390 = baseType();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_baseType.add(baseType390.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:774:4: ( newMultiArrayTypeFragment )*
        loop123: do {
          int alt123 = 2;
          alt123 = dfa123.predict(input);
          switch (alt123) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: newMultiArrayTypeFragment
            {
              pushFollow(FOLLOW_newMultiArrayTypeFragment_in_newExp8693);
              newMultiArrayTypeFragment391 = newMultiArrayTypeFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_newMultiArrayTypeFragment
                    .add(newMultiArrayTypeFragment391.getTree());

            }
              break;

            default:
              break loop123;
          }
        } while (true);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:775:4: ( typeFragment )*
        loop124: do {
          int alt124 = 2;
          alt124 = dfa124.predict(input);
          switch (alt124) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeFragment
            {
              pushFollow(FOLLOW_typeFragment_in_newExp8699);
              typeFragment392 = typeFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeFragment.add(typeFragment392.getTree());

            }
              break;

            default:
              break loop124;
          }
        } while (true);

        // AST REWRITE
        // elements: baseType, newMultiArrayTypeFragment, typeFragment
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 775:41: -> ^( NEW_EXP[$t] baseType ^( LIST ( newMultiArrayTypeFragment )* ) ^( LIST ( typeFragment )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:775:44: ^( NEW_EXP[$t] baseType ^( LIST ( newMultiArrayTypeFragment )* ) ^( LIST ( typeFragment )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NEW_EXP, t),
                  root_1);

              adaptor.addChild(root_1, stream_baseType.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:775:67: ^( LIST ( newMultiArrayTypeFragment )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:775:74: ( newMultiArrayTypeFragment )*
                while (stream_newMultiArrayTypeFragment.hasNext()) {
                  adaptor.addChild(
                      root_2,
                      stream_newMultiArrayTypeFragment.nextTree());

                }
                stream_newMultiArrayTypeFragment.reset();

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:775:102: ^( LIST ( typeFragment )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:775:109: ( typeFragment )*
                while (stream_typeFragment.hasNext()) {
                  adaptor.addChild(root_2, stream_typeFragment.nextTree());

                }
                stream_typeFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 107, newExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newExp"

  public static class newMultiArrayTypeFragment_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newMultiArrayTypeFragment"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:778:1: newMultiArrayTypeFragment : t= '[' exp ( ',' exp )* ']' -> ^( NEW_MULTI_ARRAY_FRAGMENT[$t] ^( LIST ( exp )+ ) ) ;
  public final AntlrPilarParser.newMultiArrayTypeFragment_return newMultiArrayTypeFragment()
      throws RecognitionException {
    AntlrPilarParser.newMultiArrayTypeFragment_return retval = new AntlrPilarParser.newMultiArrayTypeFragment_return();
    retval.start = input.LT(1);
    int newMultiArrayTypeFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal394 = null;
    Token char_literal396 = null;
    AntlrPilarParser.exp_return exp393 = null;

    AntlrPilarParser.exp_return exp395 = null;

    Object t_tree = null;
    Object char_literal394_tree = null;
    Object char_literal396_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_203 = new RewriteRuleTokenStream(adaptor,
        "token 203");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 108)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:779:2: (t= '[' exp ( ',' exp )* ']' -> ^( NEW_MULTI_ARRAY_FRAGMENT[$t] ^( LIST ( exp )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:779:4: t= '[' exp ( ',' exp )* ']'
      {
        t = (Token) match(
            input,
            202,
            FOLLOW_202_in_newMultiArrayTypeFragment8763);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_202.add(t);

        pushFollow(FOLLOW_exp_in_newMultiArrayTypeFragment8765);
        exp393 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp393.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:779:14: ( ',' exp )*
        loop125: do {
          int alt125 = 2;
          int LA125_0 = input.LA(1);

          if ((LA125_0 == 172)) {
            alt125 = 1;
          }

          switch (alt125) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:779:16: ',' exp
            {
              char_literal394 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_newMultiArrayTypeFragment8769);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal394);

              pushFollow(FOLLOW_exp_in_newMultiArrayTypeFragment8771);
              exp395 = exp();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_exp.add(exp395.getTree());

            }
              break;

            default:
              break loop125;
          }
        } while (true);

        char_literal396 = (Token) match(
            input,
            203,
            FOLLOW_203_in_newMultiArrayTypeFragment8776);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_203.add(char_literal396);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 779:41: -> ^( NEW_MULTI_ARRAY_FRAGMENT[$t] ^( LIST ( exp )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:779:44: ^( NEW_MULTI_ARRAY_FRAGMENT[$t] ^( LIST ( exp )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NEW_MULTI_ARRAY_FRAGMENT, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:779:75: ^( LIST ( exp )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_exp.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_exp.hasNext()) {
                  adaptor.addChild(root_2, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 108, newMultiArrayTypeFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newMultiArrayTypeFragment"

  public static class newListRanged_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newListRanged"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:782:1: newListRanged : t= '`' '[' exp '..' exp ']' -> ^( NLIST_RANGE[$t] ( exp )+ ) ;
  public final AntlrPilarParser.newListRanged_return newListRanged()
      throws RecognitionException {
    AntlrPilarParser.newListRanged_return retval = new AntlrPilarParser.newListRanged_return();
    retval.start = input.LT(1);
    int newListRanged_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal397 = null;
    Token string_literal399 = null;
    Token char_literal401 = null;
    AntlrPilarParser.exp_return exp398 = null;

    AntlrPilarParser.exp_return exp400 = null;

    Object t_tree = null;
    Object char_literal397_tree = null;
    Object string_literal399_tree = null;
    Object char_literal401_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_203 = new RewriteRuleTokenStream(adaptor,
        "token 203");
    RewriteRuleTokenStream stream_212 = new RewriteRuleTokenStream(adaptor,
        "token 212");
    RewriteRuleTokenStream stream_217 = new RewriteRuleTokenStream(adaptor,
        "token 217");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 109)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:783:2: (t= '`' '[' exp '..' exp ']' -> ^( NLIST_RANGE[$t] ( exp )+ ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:783:4: t= '`' '[' exp '..' exp ']'
      {
        t = (Token) match(input, 217, FOLLOW_217_in_newListRanged8813);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_217.add(t);

        char_literal397 = (Token) match(
            input,
            202,
            FOLLOW_202_in_newListRanged8815);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_202.add(char_literal397);

        pushFollow(FOLLOW_exp_in_newListRanged8817);
        exp398 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp398.getTree());
        string_literal399 = (Token) match(
            input,
            212,
            FOLLOW_212_in_newListRanged8819);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_212.add(string_literal399);

        pushFollow(FOLLOW_exp_in_newListRanged8821);
        exp400 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp400.getTree());
        char_literal401 = (Token) match(
            input,
            203,
            FOLLOW_203_in_newListRanged8823);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_203.add(char_literal401);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 783:41: -> ^( NLIST_RANGE[$t] ( exp )+ )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:783:44: ^( NLIST_RANGE[$t] ( exp )+ )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NLIST_RANGE, t),
                  root_1);

              if (!(stream_exp.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_exp.hasNext()) {
                adaptor.addChild(root_1, stream_exp.nextTree());

              }
              stream_exp.reset();

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 109, newListRanged_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newListRanged"

  public static class newMultiArray_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newMultiArray"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:786:1: newMultiArray : t= '`' '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* )? ']' -> ^( NMULTI_ARRAY[$t] ^( LIST ( newMultiArrayFragment )* ) ) ;
  public final AntlrPilarParser.newMultiArray_return newMultiArray()
      throws RecognitionException {
    AntlrPilarParser.newMultiArray_return retval = new AntlrPilarParser.newMultiArray_return();
    retval.start = input.LT(1);
    int newMultiArray_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal402 = null;
    Token char_literal404 = null;
    Token char_literal406 = null;
    AntlrPilarParser.newMultiArrayFragment_return newMultiArrayFragment403 = null;

    AntlrPilarParser.newMultiArrayFragment_return newMultiArrayFragment405 = null;

    Object t_tree = null;
    Object char_literal402_tree = null;
    Object char_literal404_tree = null;
    Object char_literal406_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_203 = new RewriteRuleTokenStream(adaptor,
        "token 203");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_217 = new RewriteRuleTokenStream(adaptor,
        "token 217");
    RewriteRuleSubtreeStream stream_newMultiArrayFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule newMultiArrayFragment");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 110)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:787:2: (t= '`' '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* )? ']' -> ^( NMULTI_ARRAY[$t] ^( LIST ( newMultiArrayFragment )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:787:4: t= '`' '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* )? ']'
      {
        t = (Token) match(input, 217, FOLLOW_217_in_newMultiArray8856);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_217.add(t);

        char_literal402 = (Token) match(
            input,
            202,
            FOLLOW_202_in_newMultiArray8858);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_202.add(char_literal402);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:788:4: ( newMultiArrayFragment ( ',' newMultiArrayFragment )* )?
        int alt127 = 2;
        int LA127_0 = input.LA(1);

        if (((LA127_0 >= HEX_LIT && LA127_0 <= OCT_LIT) || LA127_0 == ID
            || LA127_0 == GLOBALID
            || (LA127_0 >= ADD_OP && LA127_0 <= RATIONAL_LIT) || LA127_0 == 169
            || LA127_0 == 177 || LA127_0 == 202 || LA127_0 == 204
            || LA127_0 == 208 || LA127_0 == 215
            || (LA127_0 >= 217 && LA127_0 <= 221) || LA127_0 == 223)) {
          alt127 = 1;
        }
        switch (alt127) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:788:6: newMultiArrayFragment ( ',' newMultiArrayFragment )*
          {
            pushFollow(FOLLOW_newMultiArrayFragment_in_newMultiArray8866);
            newMultiArrayFragment403 = newMultiArrayFragment();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_newMultiArrayFragment.add(newMultiArrayFragment403
                  .getTree());
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:789:6: ( ',' newMultiArrayFragment )*
            loop126: do {
              int alt126 = 2;
              int LA126_0 = input.LA(1);

              if ((LA126_0 == 172)) {
                alt126 = 1;
              }

              switch (alt126) {
                case 1:
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:789:8: ',' newMultiArrayFragment
                {
                  char_literal404 = (Token) match(
                      input,
                      172,
                      FOLLOW_172_in_newMultiArray8876);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_172.add(char_literal404);

                  pushFollow(FOLLOW_newMultiArrayFragment_in_newMultiArray8878);
                  newMultiArrayFragment405 = newMultiArrayFragment();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_newMultiArrayFragment.add(newMultiArrayFragment405
                        .getTree());

                }
                  break;

                default:
                  break loop126;
              }
            } while (true);

          }
            break;

        }

        char_literal406 = (Token) match(
            input,
            203,
            FOLLOW_203_in_newMultiArray8890);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_203.add(char_literal406);

        // AST REWRITE
        // elements: newMultiArrayFragment
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 790:41: -> ^( NMULTI_ARRAY[$t] ^( LIST ( newMultiArrayFragment )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:790:44: ^( NMULTI_ARRAY[$t] ^( LIST ( newMultiArrayFragment )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NMULTI_ARRAY, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:790:63: ^( LIST ( newMultiArrayFragment )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:790:70: ( newMultiArrayFragment )*
                while (stream_newMultiArrayFragment.hasNext()) {
                  adaptor.addChild(
                      root_2,
                      stream_newMultiArrayFragment.nextTree());

                }
                stream_newMultiArrayFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 110, newMultiArray_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newMultiArray"

  public static class newMultiArrayFragment_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newMultiArrayFragment"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:793:1: newMultiArrayFragment : (t= '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* -> ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) ) )? ']' | exp );
  public final AntlrPilarParser.newMultiArrayFragment_return newMultiArrayFragment()
      throws RecognitionException {
    AntlrPilarParser.newMultiArrayFragment_return retval = new AntlrPilarParser.newMultiArrayFragment_return();
    retval.start = input.LT(1);
    int newMultiArrayFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal408 = null;
    Token char_literal410 = null;
    AntlrPilarParser.newMultiArrayFragment_return newMultiArrayFragment407 = null;

    AntlrPilarParser.newMultiArrayFragment_return newMultiArrayFragment409 = null;

    AntlrPilarParser.exp_return exp411 = null;

    Object t_tree = null;
    Object char_literal408_tree = null;
    Object char_literal410_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_203 = new RewriteRuleTokenStream(adaptor,
        "token 203");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleSubtreeStream stream_newMultiArrayFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule newMultiArrayFragment");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 111)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:794:2: (t= '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* -> ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) ) )? ']' | exp )
      int alt130 = 2;
      int LA130_0 = input.LA(1);

      if ((LA130_0 == 202)) {
        alt130 = 1;
      } else if (((LA130_0 >= HEX_LIT && LA130_0 <= OCT_LIT) || LA130_0 == ID
          || LA130_0 == GLOBALID
          || (LA130_0 >= ADD_OP && LA130_0 <= RATIONAL_LIT) || LA130_0 == 169
          || LA130_0 == 177 || LA130_0 == 204 || LA130_0 == 208
          || LA130_0 == 215 || (LA130_0 >= 217 && LA130_0 <= 221) || LA130_0 == 223)) {
        alt130 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 130, 0, input);

        throw nvae;
      }
      switch (alt130) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:794:4: t= '[' ( newMultiArrayFragment ( ',' newMultiArrayFragment )* -> ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) ) )? ']'
        {
          t = (Token) match(input, 202, FOLLOW_202_in_newMultiArrayFragment8947);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_202.add(t);

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:794:10: ( newMultiArrayFragment ( ',' newMultiArrayFragment )* -> ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) ) )?
          int alt129 = 2;
          int LA129_0 = input.LA(1);

          if (((LA129_0 >= HEX_LIT && LA129_0 <= OCT_LIT) || LA129_0 == ID
              || LA129_0 == GLOBALID
              || (LA129_0 >= ADD_OP && LA129_0 <= RATIONAL_LIT)
              || LA129_0 == 169 || LA129_0 == 177 || LA129_0 == 202
              || LA129_0 == 204 || LA129_0 == 208 || LA129_0 == 215
              || (LA129_0 >= 217 && LA129_0 <= 221) || LA129_0 == 223)) {
            alt129 = 1;
          }
          switch (alt129) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:794:12: newMultiArrayFragment ( ',' newMultiArrayFragment )*
            {
              pushFollow(FOLLOW_newMultiArrayFragment_in_newMultiArrayFragment8951);
              newMultiArrayFragment407 = newMultiArrayFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_newMultiArrayFragment.add(newMultiArrayFragment407
                    .getTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:10: ( ',' newMultiArrayFragment )*
              loop128: do {
                int alt128 = 2;
                int LA128_0 = input.LA(1);

                if ((LA128_0 == 172)) {
                  alt128 = 1;
                }

                switch (alt128) {
                  case 1:
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:12: ',' newMultiArrayFragment
                  {
                    char_literal408 = (Token) match(
                        input,
                        172,
                        FOLLOW_172_in_newMultiArrayFragment8965);
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_172.add(char_literal408);

                    pushFollow(FOLLOW_newMultiArrayFragment_in_newMultiArrayFragment8967);
                    newMultiArrayFragment409 = newMultiArrayFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_newMultiArrayFragment.add(newMultiArrayFragment409
                          .getTree());

                  }
                    break;

                  default:
                    break loop128;
                }
              } while (true);

              // AST REWRITE
              // elements: newMultiArrayFragment
              // token labels: 
              // rule labels: retval
              // token list labels: 
              // rule list labels: 
              // wildcard labels: 
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (Object) adaptor.nil();
                // 795:41: -> ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) )
                {
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:44: ^( NMULTI_ARRAY_FRAGMENT[$t] ^( LIST ( newMultiArrayFragment )* ) )
                  {
                    Object root_1 = (Object) adaptor.nil();
                    root_1 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(NMULTI_ARRAY_FRAGMENT, t),
                        root_1);

                    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:72: ^( LIST ( newMultiArrayFragment )* )
                    {
                      Object root_2 = (Object) adaptor.nil();
                      root_2 = (Object) adaptor.becomeRoot(
                          (Object) adaptor.create(LIST, "LIST"),
                          root_2);

                      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:795:79: ( newMultiArrayFragment )*
                      while (stream_newMultiArrayFragment.hasNext()) {
                        adaptor.addChild(
                            root_2,
                            stream_newMultiArrayFragment.nextTree());

                      }
                      stream_newMultiArrayFragment.reset();

                      adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                  }

                }

                retval.tree = root_0;
              }
            }
              break;

          }

          char_literal410 = (Token) match(
              input,
              203,
              FOLLOW_203_in_newMultiArrayFragment8998);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_203.add(char_literal410);

        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:797:4: exp
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_exp_in_newMultiArrayFragment9003);
          exp411 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, exp411.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 111, newMultiArrayFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newMultiArrayFragment"

  public static class newList_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newList"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:800:1: newList : t= '`' '[' ( exp ( ',' exp )* )? ']' -> ^( NLIST[$t] ^( LIST ( exp )* ) ) ;
  public final AntlrPilarParser.newList_return newList()
      throws RecognitionException {
    AntlrPilarParser.newList_return retval = new AntlrPilarParser.newList_return();
    retval.start = input.LT(1);
    int newList_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal412 = null;
    Token char_literal414 = null;
    Token char_literal416 = null;
    AntlrPilarParser.exp_return exp413 = null;

    AntlrPilarParser.exp_return exp415 = null;

    Object t_tree = null;
    Object char_literal412_tree = null;
    Object char_literal414_tree = null;
    Object char_literal416_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_203 = new RewriteRuleTokenStream(adaptor,
        "token 203");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_217 = new RewriteRuleTokenStream(adaptor,
        "token 217");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 112)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:801:2: (t= '`' '[' ( exp ( ',' exp )* )? ']' -> ^( NLIST[$t] ^( LIST ( exp )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:801:4: t= '`' '[' ( exp ( ',' exp )* )? ']'
      {
        t = (Token) match(input, 217, FOLLOW_217_in_newList9016);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_217.add(t);

        char_literal412 = (Token) match(input, 202, FOLLOW_202_in_newList9018);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_202.add(char_literal412);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:801:14: ( exp ( ',' exp )* )?
        int alt132 = 2;
        int LA132_0 = input.LA(1);

        if (((LA132_0 >= HEX_LIT && LA132_0 <= OCT_LIT) || LA132_0 == ID
            || LA132_0 == GLOBALID
            || (LA132_0 >= ADD_OP && LA132_0 <= RATIONAL_LIT) || LA132_0 == 169
            || LA132_0 == 177 || LA132_0 == 204 || LA132_0 == 208
            || LA132_0 == 215 || (LA132_0 >= 217 && LA132_0 <= 221) || LA132_0 == 223)) {
          alt132 = 1;
        }
        switch (alt132) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:801:16: exp ( ',' exp )*
          {
            pushFollow(FOLLOW_exp_in_newList9022);
            exp413 = exp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_exp.add(exp413.getTree());
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:801:20: ( ',' exp )*
            loop131: do {
              int alt131 = 2;
              int LA131_0 = input.LA(1);

              if ((LA131_0 == 172)) {
                alt131 = 1;
              }

              switch (alt131) {
                case 1:
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:801:22: ',' exp
                {
                  char_literal414 = (Token) match(
                      input,
                      172,
                      FOLLOW_172_in_newList9026);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_172.add(char_literal414);

                  pushFollow(FOLLOW_exp_in_newList9028);
                  exp415 = exp();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_exp.add(exp415.getTree());

                }
                  break;

                default:
                  break loop131;
              }
            } while (true);

          }
            break;

        }

        char_literal416 = (Token) match(input, 203, FOLLOW_203_in_newList9036);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_203.add(char_literal416);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 801:41: -> ^( NLIST[$t] ^( LIST ( exp )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:801:44: ^( NLIST[$t] ^( LIST ( exp )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NLIST, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:801:56: ^( LIST ( exp )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:801:63: ( exp )*
                while (stream_exp.hasNext()) {
                  adaptor.addChild(root_2, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 112, newList_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newList"

  public static class newSet_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newSet"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:804:1: newSet : t= '`' '{' ( exp ( ',' exp )* )? '}' -> ^( NSET[$t] ^( LIST ( exp )* ) ) ;
  public final AntlrPilarParser.newSet_return newSet()
      throws RecognitionException {
    AntlrPilarParser.newSet_return retval = new AntlrPilarParser.newSet_return();
    retval.start = input.LT(1);
    int newSet_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal417 = null;
    Token char_literal419 = null;
    Token char_literal421 = null;
    AntlrPilarParser.exp_return exp418 = null;

    AntlrPilarParser.exp_return exp420 = null;

    Object t_tree = null;
    Object char_literal417_tree = null;
    Object char_literal419_tree = null;
    Object char_literal421_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleTokenStream stream_217 = new RewriteRuleTokenStream(adaptor,
        "token 217");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 113)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:2: (t= '`' '{' ( exp ( ',' exp )* )? '}' -> ^( NSET[$t] ^( LIST ( exp )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:4: t= '`' '{' ( exp ( ',' exp )* )? '}'
      {
        t = (Token) match(input, 217, FOLLOW_217_in_newSet9064);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_217.add(t);

        char_literal417 = (Token) match(input, 177, FOLLOW_177_in_newSet9066);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(char_literal417);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:14: ( exp ( ',' exp )* )?
        int alt134 = 2;
        int LA134_0 = input.LA(1);

        if (((LA134_0 >= HEX_LIT && LA134_0 <= OCT_LIT) || LA134_0 == ID
            || LA134_0 == GLOBALID
            || (LA134_0 >= ADD_OP && LA134_0 <= RATIONAL_LIT) || LA134_0 == 169
            || LA134_0 == 177 || LA134_0 == 204 || LA134_0 == 208
            || LA134_0 == 215 || (LA134_0 >= 217 && LA134_0 <= 221) || LA134_0 == 223)) {
          alt134 = 1;
        }
        switch (alt134) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:16: exp ( ',' exp )*
          {
            pushFollow(FOLLOW_exp_in_newSet9070);
            exp418 = exp();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_exp.add(exp418.getTree());
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:20: ( ',' exp )*
            loop133: do {
              int alt133 = 2;
              int LA133_0 = input.LA(1);

              if ((LA133_0 == 172)) {
                alt133 = 1;
              }

              switch (alt133) {
                case 1:
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:22: ',' exp
                {
                  char_literal419 = (Token) match(
                      input,
                      172,
                      FOLLOW_172_in_newSet9074);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_172.add(char_literal419);

                  pushFollow(FOLLOW_exp_in_newSet9076);
                  exp420 = exp();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_exp.add(exp420.getTree());

                }
                  break;

                default:
                  break loop133;
              }
            } while (true);

          }
            break;

        }

        char_literal421 = (Token) match(input, 178, FOLLOW_178_in_newSet9084);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal421);

        // AST REWRITE
        // elements: exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 805:41: -> ^( NSET[$t] ^( LIST ( exp )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:44: ^( NSET[$t] ^( LIST ( exp )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NSET, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:55: ^( LIST ( exp )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:805:62: ( exp )*
                while (stream_exp.hasNext()) {
                  adaptor.addChild(root_2, stream_exp.nextTree());

                }
                stream_exp.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 113, newSet_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newSet"

  public static class newRecord_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newRecord"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:808:1: newRecord : t= '`' name ( typeTuple )? '{' ( attrInit ( ',' attrInit )* )? '}' -> ^( NRECORD[$t] ^( NAME_TYPE name ^( OPTION ) ^( OPTION ( typeTuple )? ) ) ^( LIST ( attrInit )* ) ) ;
  public final AntlrPilarParser.newRecord_return newRecord()
      throws RecognitionException {
    AntlrPilarParser.newRecord_return retval = new AntlrPilarParser.newRecord_return();
    retval.start = input.LT(1);
    int newRecord_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal424 = null;
    Token char_literal426 = null;
    Token char_literal428 = null;
    AntlrPilarParser.name_return name422 = null;

    AntlrPilarParser.typeTuple_return typeTuple423 = null;

    AntlrPilarParser.attrInit_return attrInit425 = null;

    AntlrPilarParser.attrInit_return attrInit427 = null;

    Object t_tree = null;
    Object char_literal424_tree = null;
    Object char_literal426_tree = null;
    Object char_literal428_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleTokenStream stream_217 = new RewriteRuleTokenStream(adaptor,
        "token 217");
    RewriteRuleSubtreeStream stream_typeTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeTuple");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    RewriteRuleSubtreeStream stream_attrInit = new RewriteRuleSubtreeStream(
        adaptor, "rule attrInit");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 114)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:809:2: (t= '`' name ( typeTuple )? '{' ( attrInit ( ',' attrInit )* )? '}' -> ^( NRECORD[$t] ^( NAME_TYPE name ^( OPTION ) ^( OPTION ( typeTuple )? ) ) ^( LIST ( attrInit )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:809:4: t= '`' name ( typeTuple )? '{' ( attrInit ( ',' attrInit )* )? '}'
      {
        t = (Token) match(input, 217, FOLLOW_217_in_newRecord9112);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_217.add(t);

        pushFollow(FOLLOW_name_in_newRecord9114);
        name422 = name();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_name.add(name422.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:809:15: ( typeTuple )?
        int alt135 = 2;
        int LA135_0 = input.LA(1);

        if ((LA135_0 == 167)) {
          alt135 = 1;
        }
        switch (alt135) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeTuple
          {
            pushFollow(FOLLOW_typeTuple_in_newRecord9116);
            typeTuple423 = typeTuple();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_typeTuple.add(typeTuple423.getTree());

          }
            break;

        }

        char_literal424 = (Token) match(input, 177, FOLLOW_177_in_newRecord9122);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(char_literal424);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:810:8: ( attrInit ( ',' attrInit )* )?
        int alt137 = 2;
        int LA137_0 = input.LA(1);

        if ((LA137_0 == ID)) {
          alt137 = 1;
        }
        switch (alt137) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:810:10: attrInit ( ',' attrInit )*
          {
            pushFollow(FOLLOW_attrInit_in_newRecord9126);
            attrInit425 = attrInit();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_attrInit.add(attrInit425.getTree());
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:810:19: ( ',' attrInit )*
            loop136: do {
              int alt136 = 2;
              int LA136_0 = input.LA(1);

              if ((LA136_0 == 172)) {
                alt136 = 1;
              }

              switch (alt136) {
                case 1:
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:810:21: ',' attrInit
                {
                  char_literal426 = (Token) match(
                      input,
                      172,
                      FOLLOW_172_in_newRecord9130);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_172.add(char_literal426);

                  pushFollow(FOLLOW_attrInit_in_newRecord9132);
                  attrInit427 = attrInit();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_attrInit.add(attrInit427.getTree());

                }
                  break;

                default:
                  break loop136;
              }
            } while (true);

          }
            break;

        }

        char_literal428 = (Token) match(input, 178, FOLLOW_178_in_newRecord9143);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal428);

        // AST REWRITE
        // elements: typeTuple, name, attrInit
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 811:41: -> ^( NRECORD[$t] ^( NAME_TYPE name ^( OPTION ) ^( OPTION ( typeTuple )? ) ) ^( LIST ( attrInit )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:811:44: ^( NRECORD[$t] ^( NAME_TYPE name ^( OPTION ) ^( OPTION ( typeTuple )? ) ) ^( LIST ( attrInit )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NRECORD, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:811:58: ^( NAME_TYPE name ^( OPTION ) ^( OPTION ( typeTuple )? ) )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(NAME_TYPE, "NAME_TYPE"),
                    root_2);

                adaptor.addChild(root_2, stream_name.nextTree());
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:811:75: ^( OPTION )
                {
                  Object root_3 = (Object) adaptor.nil();
                  root_3 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_3);

                  adaptor.addChild(root_2, root_3);
                }
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:811:85: ^( OPTION ( typeTuple )? )
                {
                  Object root_3 = (Object) adaptor.nil();
                  root_3 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_3);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:811:94: ( typeTuple )?
                  if (stream_typeTuple.hasNext()) {
                    adaptor.addChild(root_3, stream_typeTuple.nextTree());

                  }
                  stream_typeTuple.reset();

                  adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
              }
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:811:107: ^( LIST ( attrInit )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:811:114: ( attrInit )*
                while (stream_attrInit.hasNext()) {
                  adaptor.addChild(root_2, stream_attrInit.nextTree());

                }
                stream_attrInit.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 114, newRecord_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newRecord"

  public static class attrInit_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "attrInit"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:814:1: attrInit : t= ID '=' exp -> ^( ATTR_INIT[$t] ID exp ) ;
  public final AntlrPilarParser.attrInit_return attrInit()
      throws RecognitionException {
    AntlrPilarParser.attrInit_return retval = new AntlrPilarParser.attrInit_return();
    retval.start = input.LT(1);
    int attrInit_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal429 = null;
    AntlrPilarParser.exp_return exp430 = null;

    Object t_tree = null;
    Object char_literal429_tree = null;
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 115)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:815:2: (t= ID '=' exp -> ^( ATTR_INIT[$t] ID exp ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:815:4: t= ID '=' exp
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_attrInit9220);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        char_literal429 = (Token) match(input, 173, FOLLOW_173_in_attrInit9222);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal429);

        pushFollow(FOLLOW_exp_in_attrInit9224);
        exp430 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp430.getTree());

        // AST REWRITE
        // elements: exp, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 815:41: -> ^( ATTR_INIT[$t] ID exp )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:815:44: ^( ATTR_INIT[$t] ID exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ATTR_INIT, t),
                  root_1);

              adaptor.addChild(root_1, stream_ID.nextNode());
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 115, attrInit_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "attrInit"

  public static class newFunction_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "newFunction"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:818:1: newFunction : t= '`' '{' ( '->' -> ^( NFUNCTION[$t] ^( OPTION ) ) | mapping ( ',' mapping )* -> ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) ) ) '}' ;
  public final AntlrPilarParser.newFunction_return newFunction()
      throws RecognitionException {
    AntlrPilarParser.newFunction_return retval = new AntlrPilarParser.newFunction_return();
    retval.start = input.LT(1);
    int newFunction_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal431 = null;
    Token string_literal432 = null;
    Token char_literal434 = null;
    Token char_literal436 = null;
    AntlrPilarParser.mapping_return mapping433 = null;

    AntlrPilarParser.mapping_return mapping435 = null;

    Object t_tree = null;
    Object char_literal431_tree = null;
    Object string_literal432_tree = null;
    Object char_literal434_tree = null;
    Object char_literal436_tree = null;
    RewriteRuleTokenStream stream_222 = new RewriteRuleTokenStream(adaptor,
        "token 222");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleTokenStream stream_217 = new RewriteRuleTokenStream(adaptor,
        "token 217");
    RewriteRuleSubtreeStream stream_mapping = new RewriteRuleSubtreeStream(
        adaptor, "rule mapping");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 116)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:819:2: (t= '`' '{' ( '->' -> ^( NFUNCTION[$t] ^( OPTION ) ) | mapping ( ',' mapping )* -> ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) ) ) '}' )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:819:4: t= '`' '{' ( '->' -> ^( NFUNCTION[$t] ^( OPTION ) ) | mapping ( ',' mapping )* -> ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) ) ) '}'
      {
        t = (Token) match(input, 217, FOLLOW_217_in_newFunction9272);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_217.add(t);

        char_literal431 = (Token) match(
            input,
            177,
            FOLLOW_177_in_newFunction9274);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(char_literal431);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:819:14: ( '->' -> ^( NFUNCTION[$t] ^( OPTION ) ) | mapping ( ',' mapping )* -> ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) ) )
        int alt139 = 2;
        int LA139_0 = input.LA(1);

        if ((LA139_0 == 222)) {
          alt139 = 1;
        } else if (((LA139_0 >= HEX_LIT && LA139_0 <= OCT_LIT) || LA139_0 == ID
            || LA139_0 == GLOBALID
            || (LA139_0 >= ADD_OP && LA139_0 <= RATIONAL_LIT) || LA139_0 == 169
            || LA139_0 == 177 || LA139_0 == 204 || LA139_0 == 208
            || LA139_0 == 215 || (LA139_0 >= 217 && LA139_0 <= 221) || LA139_0 == 223)) {
          alt139 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 139, 0,
              input);

          throw nvae;
        }
        switch (alt139) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:819:16: '->'
          {
            string_literal432 = (Token) match(
                input,
                222,
                FOLLOW_222_in_newFunction9278);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_222.add(string_literal432);

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (Object) adaptor.nil();
              // 819:41: -> ^( NFUNCTION[$t] ^( OPTION ) )
              {
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:819:44: ^( NFUNCTION[$t] ^( OPTION ) )
                {
                  Object root_1 = (Object) adaptor.nil();
                  root_1 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(NFUNCTION, t),
                      root_1);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:819:60: ^( OPTION )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(OPTION, "OPTION"),
                        root_2);

                    adaptor.addChild(root_1, root_2);
                  }

                  adaptor.addChild(root_0, root_1);
                }

              }

              retval.tree = root_0;
            }
          }
            break;
          case 2:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:820:10: mapping ( ',' mapping )*
          {
            pushFollow(FOLLOW_mapping_in_newFunction9320);
            mapping433 = mapping();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_mapping.add(mapping433.getTree());
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:820:18: ( ',' mapping )*
            loop138: do {
              int alt138 = 2;
              int LA138_0 = input.LA(1);

              if ((LA138_0 == 172)) {
                alt138 = 1;
              }

              switch (alt138) {
                case 1:
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:820:20: ',' mapping
                {
                  char_literal434 = (Token) match(
                      input,
                      172,
                      FOLLOW_172_in_newFunction9324);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_172.add(char_literal434);

                  pushFollow(FOLLOW_mapping_in_newFunction9326);
                  mapping435 = mapping();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_mapping.add(mapping435.getTree());

                }
                  break;

                default:
                  break loop138;
              }
            } while (true);

            // AST REWRITE
            // elements: mapping
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (Object) adaptor.nil();
              // 820:41: -> ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) )
              {
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:820:44: ^( NFUNCTION[$t] ^( OPTION ^( LIST ( mapping )+ ) ) )
                {
                  Object root_1 = (Object) adaptor.nil();
                  root_1 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(NFUNCTION, t),
                      root_1);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:820:60: ^( OPTION ^( LIST ( mapping )+ ) )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(OPTION, "OPTION"),
                        root_2);

                    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:820:69: ^( LIST ( mapping )+ )
                    {
                      Object root_3 = (Object) adaptor.nil();
                      root_3 = (Object) adaptor.becomeRoot(
                          (Object) adaptor.create(LIST, "LIST"),
                          root_3);

                      if (!(stream_mapping.hasNext())) {
                        throw new RewriteEarlyExitException();
                      }
                      while (stream_mapping.hasNext()) {
                        adaptor.addChild(root_3, stream_mapping.nextTree());

                      }
                      stream_mapping.reset();

                      adaptor.addChild(root_2, root_3);
                    }

                    adaptor.addChild(root_1, root_2);
                  }

                  adaptor.addChild(root_0, root_1);
                }

              }

              retval.tree = root_0;
            }
          }
            break;

        }

        char_literal436 = (Token) match(
            input,
            178,
            FOLLOW_178_in_newFunction9364);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal436);

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 116, newFunction_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "newFunction"

  public static class mapping_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "mapping"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:824:1: mapping : e1= exp '->' e2= exp -> ^( MAPPING $e1 $e2) ;
  public final AntlrPilarParser.mapping_return mapping()
      throws RecognitionException {
    AntlrPilarParser.mapping_return retval = new AntlrPilarParser.mapping_return();
    retval.start = input.LT(1);
    int mapping_StartIndex = input.index();
    Object root_0 = null;

    Token string_literal437 = null;
    AntlrPilarParser.exp_return e1 = null;

    AntlrPilarParser.exp_return e2 = null;

    Object string_literal437_tree = null;
    RewriteRuleTokenStream stream_222 = new RewriteRuleTokenStream(adaptor,
        "token 222");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 117)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:825:2: (e1= exp '->' e2= exp -> ^( MAPPING $e1 $e2) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:825:4: e1= exp '->' e2= exp
      {
        pushFollow(FOLLOW_exp_in_mapping9377);
        e1 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e1.getTree());
        string_literal437 = (Token) match(input, 222, FOLLOW_222_in_mapping9379);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_222.add(string_literal437);

        pushFollow(FOLLOW_exp_in_mapping9383);
        e2 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(e2.getTree());

        // AST REWRITE
        // elements: e1, e2
        // token labels: 
        // rule labels: retval, e1, e2
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);
          RewriteRuleSubtreeStream stream_e1 = new RewriteRuleSubtreeStream(
              adaptor, "rule e1", e1 != null ? e1.tree : null);
          RewriteRuleSubtreeStream stream_e2 = new RewriteRuleSubtreeStream(
              adaptor, "rule e2", e2 != null ? e2.tree : null);

          root_0 = (Object) adaptor.nil();
          // 825:41: -> ^( MAPPING $e1 $e2)
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:825:44: ^( MAPPING $e1 $e2)
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(MAPPING, "MAPPING"),
                  root_1);

              adaptor.addChild(root_1, stream_e1.nextTree());
              adaptor.addChild(root_1, stream_e2.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 117, mapping_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "mapping"

  public static class funExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "funExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:828:1: funExp : t= '{' matching ( '|' matching )* '}' -> ^( FUN_EXP[$t] ^( LIST ( matching )+ ) ) ;
  public final AntlrPilarParser.funExp_return funExp()
      throws RecognitionException {
    AntlrPilarParser.funExp_return retval = new AntlrPilarParser.funExp_return();
    retval.start = input.LT(1);
    int funExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal439 = null;
    Token char_literal441 = null;
    AntlrPilarParser.matching_return matching438 = null;

    AntlrPilarParser.matching_return matching440 = null;

    Object t_tree = null;
    Object char_literal439_tree = null;
    Object char_literal441_tree = null;
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_194 = new RewriteRuleTokenStream(adaptor,
        "token 194");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleSubtreeStream stream_matching = new RewriteRuleSubtreeStream(
        adaptor, "rule matching");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 118)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:829:2: (t= '{' matching ( '|' matching )* '}' -> ^( FUN_EXP[$t] ^( LIST ( matching )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:829:4: t= '{' matching ( '|' matching )* '}'
      {
        t = (Token) match(input, 177, FOLLOW_177_in_funExp9427);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(t);

        pushFollow(FOLLOW_matching_in_funExp9429);
        matching438 = matching();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_matching.add(matching438.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:830:8: ( '|' matching )*
        loop140: do {
          int alt140 = 2;
          int LA140_0 = input.LA(1);

          if ((LA140_0 == 194)) {
            alt140 = 1;
          }

          switch (alt140) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:830:10: '|' matching
            {
              char_literal439 = (Token) match(
                  input,
                  194,
                  FOLLOW_194_in_funExp9440);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_194.add(char_literal439);

              pushFollow(FOLLOW_matching_in_funExp9442);
              matching440 = matching();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_matching.add(matching440.getTree());

            }
              break;

            default:
              break loop140;
          }
        } while (true);

        char_literal441 = (Token) match(input, 178, FOLLOW_178_in_funExp9447);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal441);

        // AST REWRITE
        // elements: matching
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 830:41: -> ^( FUN_EXP[$t] ^( LIST ( matching )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:830:44: ^( FUN_EXP[$t] ^( LIST ( matching )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(FUN_EXP, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:830:58: ^( LIST ( matching )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_matching.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_matching.hasNext()) {
                  adaptor.addChild(root_2, stream_matching.nextTree());

                }
                stream_matching.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 118, funExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "funExp"

  public static class matching_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "matching"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:833:1: matching : (t= '=>' exp -> ^( MATCHING[$t] ^( OPTION ) exp ) | paramList '=>' exp -> ^( MATCHING ^( OPTION ^( LIST paramList ) ) exp ) );
  public final AntlrPilarParser.matching_return matching()
      throws RecognitionException {
    AntlrPilarParser.matching_return retval = new AntlrPilarParser.matching_return();
    retval.start = input.LT(1);
    int matching_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token string_literal444 = null;
    AntlrPilarParser.exp_return exp442 = null;

    AntlrPilarParser.paramList_return paramList443 = null;

    AntlrPilarParser.exp_return exp445 = null;

    Object t_tree = null;
    Object string_literal444_tree = null;
    RewriteRuleTokenStream stream_210 = new RewriteRuleTokenStream(adaptor,
        "token 210");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_paramList = new RewriteRuleSubtreeStream(
        adaptor, "rule paramList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 119)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:834:2: (t= '=>' exp -> ^( MATCHING[$t] ^( OPTION ) exp ) | paramList '=>' exp -> ^( MATCHING ^( OPTION ^( LIST paramList ) ) exp ) )
      int alt141 = 2;
      int LA141_0 = input.LA(1);

      if ((LA141_0 == 210)) {
        alt141 = 1;
      } else if (((LA141_0 >= ID && LA141_0 <= TYPEVARID) || LA141_0 == 169 || LA141_0 == 177)) {
        alt141 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 141, 0, input);

        throw nvae;
      }
      switch (alt141) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:834:4: t= '=>' exp
        {
          t = (Token) match(input, 210, FOLLOW_210_in_matching9485);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_210.add(t);

          pushFollow(FOLLOW_exp_in_matching9487);
          exp442 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp442.getTree());

          // AST REWRITE
          // elements: exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 834:41: -> ^( MATCHING[$t] ^( OPTION ) exp )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:834:44: ^( MATCHING[$t] ^( OPTION ) exp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(MATCHING, t),
                    root_1);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:834:59: ^( OPTION )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_exp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:835:4: paramList '=>' exp
        {
          pushFollow(FOLLOW_paramList_in_matching9531);
          paramList443 = paramList();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_paramList.add(paramList443.getTree());
          string_literal444 = (Token) match(
              input,
              210,
              FOLLOW_210_in_matching9533);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_210.add(string_literal444);

          pushFollow(FOLLOW_exp_in_matching9535);
          exp445 = exp();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_exp.add(exp445.getTree());

          // AST REWRITE
          // elements: paramList, exp
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 835:41: -> ^( MATCHING ^( OPTION ^( LIST paramList ) ) exp )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:835:44: ^( MATCHING ^( OPTION ^( LIST paramList ) ) exp )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(MATCHING, "MATCHING"),
                    root_1);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:835:55: ^( OPTION ^( LIST paramList ) )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:835:64: ^( LIST paramList )
                  {
                    Object root_3 = (Object) adaptor.nil();
                    root_3 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(LIST, "LIST"),
                        root_3);

                    adaptor.addChild(root_3, stream_paramList.nextTree());

                    adaptor.addChild(root_2, root_3);
                  }

                  adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_exp.nextTree());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 119, matching_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "matching"

  public static class letExp_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "letExp"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:838:1: letExp : t= 'let' binding ( ',' binding )* 'in' exp -> ^( LET_EXP[$t] ^( LIST ( binding )+ ) exp ) ;
  public final AntlrPilarParser.letExp_return letExp()
      throws RecognitionException {
    AntlrPilarParser.letExp_return retval = new AntlrPilarParser.letExp_return();
    retval.start = input.LT(1);
    int letExp_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal447 = null;
    Token string_literal449 = null;
    AntlrPilarParser.binding_return binding446 = null;

    AntlrPilarParser.binding_return binding448 = null;

    AntlrPilarParser.exp_return exp450 = null;

    Object t_tree = null;
    Object char_literal447_tree = null;
    Object string_literal449_tree = null;
    RewriteRuleTokenStream stream_223 = new RewriteRuleTokenStream(adaptor,
        "token 223");
    RewriteRuleTokenStream stream_224 = new RewriteRuleTokenStream(adaptor,
        "token 224");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    RewriteRuleSubtreeStream stream_binding = new RewriteRuleSubtreeStream(
        adaptor, "rule binding");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 120)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:839:2: (t= 'let' binding ( ',' binding )* 'in' exp -> ^( LET_EXP[$t] ^( LIST ( binding )+ ) exp ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:839:4: t= 'let' binding ( ',' binding )* 'in' exp
      {
        t = (Token) match(input, 223, FOLLOW_223_in_letExp9584);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_223.add(t);

        pushFollow(FOLLOW_binding_in_letExp9586);
        binding446 = binding();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_binding.add(binding446.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:840:9: ( ',' binding )*
        loop142: do {
          int alt142 = 2;
          int LA142_0 = input.LA(1);

          if ((LA142_0 == 172)) {
            alt142 = 1;
          }

          switch (alt142) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:840:11: ',' binding
            {
              char_literal447 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_letExp9598);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal447);

              pushFollow(FOLLOW_binding_in_letExp9600);
              binding448 = binding();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_binding.add(binding448.getTree());

            }
              break;

            default:
              break loop142;
          }
        } while (true);

        string_literal449 = (Token) match(input, 224, FOLLOW_224_in_letExp9614);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_224.add(string_literal449);

        pushFollow(FOLLOW_exp_in_letExp9616);
        exp450 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp450.getTree());

        // AST REWRITE
        // elements: binding, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 841:41: -> ^( LET_EXP[$t] ^( LIST ( binding )+ ) exp )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:841:44: ^( LET_EXP[$t] ^( LIST ( binding )+ ) exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LET_EXP, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:841:58: ^( LIST ( binding )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_binding.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_binding.hasNext()) {
                  adaptor.addChild(root_2, stream_binding.nextTree());

                }
                stream_binding.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 120, letExp_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "letExp"

  public static class binding_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "binding"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:844:1: binding : t= ID ( ',' ID )* '=' exp -> ^( LET_BINDING[$t] ^( LIST ( ID )+ ) exp ) ;
  public final AntlrPilarParser.binding_return binding()
      throws RecognitionException {
    AntlrPilarParser.binding_return retval = new AntlrPilarParser.binding_return();
    retval.start = input.LT(1);
    int binding_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal451 = null;
    Token ID452 = null;
    Token char_literal453 = null;
    AntlrPilarParser.exp_return exp454 = null;

    Object t_tree = null;
    Object char_literal451_tree = null;
    Object ID452_tree = null;
    Object char_literal453_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_173 = new RewriteRuleTokenStream(adaptor,
        "token 173");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_exp = new RewriteRuleSubtreeStream(adaptor,
        "rule exp");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 121)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:845:2: (t= ID ( ',' ID )* '=' exp -> ^( LET_BINDING[$t] ^( LIST ( ID )+ ) exp ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:845:4: t= ID ( ',' ID )* '=' exp
      {
        t = (Token) match(input, ID, FOLLOW_ID_in_binding9668);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(t);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:845:9: ( ',' ID )*
        loop143: do {
          int alt143 = 2;
          int LA143_0 = input.LA(1);

          if ((LA143_0 == 172)) {
            alt143 = 1;
          }

          switch (alt143) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:845:11: ',' ID
            {
              char_literal451 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_binding9672);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal451);

              ID452 = (Token) match(input, ID, FOLLOW_ID_in_binding9674);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ID452);

            }
              break;

            default:
              break loop143;
          }
        } while (true);

        char_literal453 = (Token) match(input, 173, FOLLOW_173_in_binding9679);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_173.add(char_literal453);

        pushFollow(FOLLOW_exp_in_binding9681);
        exp454 = exp();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_exp.add(exp454.getTree());

        // AST REWRITE
        // elements: ID, exp
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 845:41: -> ^( LET_BINDING[$t] ^( LIST ( ID )+ ) exp )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:845:44: ^( LET_BINDING[$t] ^( LIST ( ID )+ ) exp )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(LET_BINDING, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:845:62: ^( LIST ( ID )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_ID.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_exp.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 121, binding_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "binding"

  public static class name_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "name"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:848:1: name : (ids+= ID '::' )* id= ID -> ^( NAME[$id] ^( LIST ( $ids)* ) $id) ;
  public final AntlrPilarParser.name_return name() throws RecognitionException {
    AntlrPilarParser.name_return retval = new AntlrPilarParser.name_return();
    retval.start = input.LT(1);
    int name_StartIndex = input.index();
    Object root_0 = null;

    Token id = null;
    Token string_literal455 = null;
    Token ids = null;
    List list_ids = null;

    Object id_tree = null;
    Object string_literal455_tree = null;
    Object ids_tree = null;
    RewriteRuleTokenStream stream_225 = new RewriteRuleTokenStream(adaptor,
        "token 225");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 122)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:849:2: ( (ids+= ID '::' )* id= ID -> ^( NAME[$id] ^( LIST ( $ids)* ) $id) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:849:4: (ids+= ID '::' )* id= ID
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:849:4: (ids+= ID '::' )*
        loop144: do {
          int alt144 = 2;
          int LA144_0 = input.LA(1);

          if ((LA144_0 == ID)) {
            int LA144_1 = input.LA(2);

            if ((LA144_1 == 225)) {
              alt144 = 1;
            }

          }

          switch (alt144) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:849:5: ids+= ID '::'
            {
              ids = (Token) match(input, ID, FOLLOW_ID_in_name9723);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ids);

              if (list_ids == null) list_ids = new ArrayList();
              list_ids.add(ids);

              string_literal455 = (Token) match(
                  input,
                  225,
                  FOLLOW_225_in_name9725);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_225.add(string_literal455);

            }
              break;

            default:
              break loop144;
          }
        } while (true);

        id = (Token) match(input, ID, FOLLOW_ID_in_name9732);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ID.add(id);

        // AST REWRITE
        // elements: id, ids
        // token labels: id
        // rule labels: retval
        // token list labels: ids
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleTokenStream stream_id = new RewriteRuleTokenStream(
              adaptor, "token id", id);
          RewriteRuleTokenStream stream_ids = new RewriteRuleTokenStream(
              adaptor, "token ids", list_ids);
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 849:41: -> ^( NAME[$id] ^( LIST ( $ids)* ) $id)
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:849:44: ^( NAME[$id] ^( LIST ( $ids)* ) $id)
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NAME, id),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:849:56: ^( LIST ( $ids)* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:849:63: ( $ids)*
                while (stream_ids.hasNext()) {
                  adaptor.addChild(root_2, stream_ids.nextNode());

                }
                stream_ids.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_id.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 122, name_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "name"

  public static class globalName_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "globalName"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:852:1: globalName : ( ID '::' )* t= GLOBALID -> ^( NAME[$t] ^( LIST ( ID )* ) GLOBALID ) ;
  public final AntlrPilarParser.globalName_return globalName()
      throws RecognitionException {
    AntlrPilarParser.globalName_return retval = new AntlrPilarParser.globalName_return();
    retval.start = input.LT(1);
    int globalName_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token ID456 = null;
    Token string_literal457 = null;

    Object t_tree = null;
    Object ID456_tree = null;
    Object string_literal457_tree = null;
    RewriteRuleTokenStream stream_GLOBALID = new RewriteRuleTokenStream(
        adaptor, "token GLOBALID");
    RewriteRuleTokenStream stream_225 = new RewriteRuleTokenStream(adaptor,
        "token 225");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 123)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:853:2: ( ( ID '::' )* t= GLOBALID -> ^( NAME[$t] ^( LIST ( ID )* ) GLOBALID ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:853:4: ( ID '::' )* t= GLOBALID
      {
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:853:4: ( ID '::' )*
        loop145: do {
          int alt145 = 2;
          int LA145_0 = input.LA(1);

          if ((LA145_0 == ID)) {
            alt145 = 1;
          }

          switch (alt145) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:853:7: ID '::'
            {
              ID456 = (Token) match(input, ID, FOLLOW_ID_in_globalName9778);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ID456);

              string_literal457 = (Token) match(
                  input,
                  225,
                  FOLLOW_225_in_globalName9780);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_225.add(string_literal457);

            }
              break;

            default:
              break loop145;
          }
        } while (true);

        t = (Token) match(input, GLOBALID, FOLLOW_GLOBALID_in_globalName9787);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_GLOBALID.add(t);

        // AST REWRITE
        // elements: ID, GLOBALID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 853:41: -> ^( NAME[$t] ^( LIST ( ID )* ) GLOBALID )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:853:44: ^( NAME[$t] ^( LIST ( ID )* ) GLOBALID )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(NAME, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:853:55: ^( LIST ( ID )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:853:62: ( ID )*
                while (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_GLOBALID.nextNode());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 123, globalName_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "globalName"

  public static class type_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "type"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:856:1: type : baseType ( typeFragment )* -> ^( TYPE baseType ^( LIST ( typeFragment )* ) ) ;
  public final AntlrPilarParser.type_return type() throws RecognitionException {
    AntlrPilarParser.type_return retval = new AntlrPilarParser.type_return();
    retval.start = input.LT(1);
    int type_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.baseType_return baseType458 = null;

    AntlrPilarParser.typeFragment_return typeFragment459 = null;

    RewriteRuleSubtreeStream stream_baseType = new RewriteRuleSubtreeStream(
        adaptor, "rule baseType");
    RewriteRuleSubtreeStream stream_typeFragment = new RewriteRuleSubtreeStream(
        adaptor, "rule typeFragment");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 124)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:2: ( baseType ( typeFragment )* -> ^( TYPE baseType ^( LIST ( typeFragment )* ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:4: baseType ( typeFragment )*
      {
        pushFollow(FOLLOW_baseType_in_type9831);
        baseType458 = baseType();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_baseType.add(baseType458.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:13: ( typeFragment )*
        loop146: do {
          int alt146 = 2;
          alt146 = dfa146.predict(input);
          switch (alt146) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeFragment
            {
              pushFollow(FOLLOW_typeFragment_in_type9833);
              typeFragment459 = typeFragment();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeFragment.add(typeFragment459.getTree());

            }
              break;

            default:
              break loop146;
          }
        } while (true);

        // AST REWRITE
        // elements: baseType, typeFragment
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 857:41: -> ^( TYPE baseType ^( LIST ( typeFragment )* ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:44: ^( TYPE baseType ^( LIST ( typeFragment )* ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPE, "TYPE"),
                  root_1);

              adaptor.addChild(root_1, stream_baseType.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:60: ^( LIST ( typeFragment )* )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:67: ( typeFragment )*
                while (stream_typeFragment.hasNext()) {
                  adaptor.addChild(root_2, stream_typeFragment.nextTree());

                }
                stream_typeFragment.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 124, type_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "type"

  public static class typeFragment_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeFragment"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:860:1: typeFragment : (t= '*' -> ^( ARRAY_FRAGMENT[$t] ) | t= '[' ']' -> ^( LIST_FRAGMENT[$t] ) | t= '[' ( ',' )+ ']' -> ^( MULTIARRAY_FRAGMENT[$t] ^( LIST ( ',' )+ ) ) | t= '{' '}' -> ^( SET_FRAGMENT[$t] ) );
  public final AntlrPilarParser.typeFragment_return typeFragment()
      throws RecognitionException {
    AntlrPilarParser.typeFragment_return retval = new AntlrPilarParser.typeFragment_return();
    retval.start = input.LT(1);
    int typeFragment_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal460 = null;
    Token char_literal461 = null;
    Token char_literal462 = null;
    Token char_literal463 = null;

    Object t_tree = null;
    Object char_literal460_tree = null;
    Object char_literal461_tree = null;
    Object char_literal462_tree = null;
    Object char_literal463_tree = null;
    RewriteRuleTokenStream stream_202 = new RewriteRuleTokenStream(adaptor,
        "token 202");
    RewriteRuleTokenStream stream_203 = new RewriteRuleTokenStream(adaptor,
        "token 203");
    RewriteRuleTokenStream stream_215 = new RewriteRuleTokenStream(adaptor,
        "token 215");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 125)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:861:2: (t= '*' -> ^( ARRAY_FRAGMENT[$t] ) | t= '[' ']' -> ^( LIST_FRAGMENT[$t] ) | t= '[' ( ',' )+ ']' -> ^( MULTIARRAY_FRAGMENT[$t] ^( LIST ( ',' )+ ) ) | t= '{' '}' -> ^( SET_FRAGMENT[$t] ) )
      int alt148 = 4;
      switch (input.LA(1)) {
        case 215: {
          alt148 = 1;
        }
          break;
        case 202: {
          int LA148_2 = input.LA(2);

          if ((LA148_2 == 203)) {
            alt148 = 2;
          } else if ((LA148_2 == 172)) {
            alt148 = 3;
          } else {
            if (state.backtracking > 0) {
              state.failed = true;
              return retval;
            }
            NoViableAltException nvae = new NoViableAltException("", 148, 2,
                input);

            throw nvae;
          }
        }
          break;
        case 177: {
          alt148 = 4;
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 148, 0,
              input);

          throw nvae;
      }

      switch (alt148) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:861:4: t= '*'
        {
          t = (Token) match(input, 215, FOLLOW_215_in_typeFragment9877);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_215.add(t);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 861:41: -> ^( ARRAY_FRAGMENT[$t] )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:861:44: ^( ARRAY_FRAGMENT[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(ARRAY_FRAGMENT, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:862:4: t= '[' ']'
        {
          t = (Token) match(input, 202, FOLLOW_202_in_typeFragment9922);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_202.add(t);

          char_literal460 = (Token) match(
              input,
              203,
              FOLLOW_203_in_typeFragment9924);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_203.add(char_literal460);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 862:41: -> ^( LIST_FRAGMENT[$t] )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:862:44: ^( LIST_FRAGMENT[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST_FRAGMENT, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:4: t= '[' ( ',' )+ ']'
        {
          t = (Token) match(input, 202, FOLLOW_202_in_typeFragment9965);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_202.add(t);

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:10: ( ',' )+
          int cnt147 = 0;
          loop147: do {
            int alt147 = 2;
            int LA147_0 = input.LA(1);

            if ((LA147_0 == 172)) {
              alt147 = 1;
            }

            switch (alt147) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ','
              {
                char_literal461 = (Token) match(
                    input,
                    172,
                    FOLLOW_172_in_typeFragment9967);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_172.add(char_literal461);

              }
                break;

              default:
                if (cnt147 >= 1) break loop147;
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                EarlyExitException eee = new EarlyExitException(147, input);
                throw eee;
            }
            cnt147++;
          } while (true);

          char_literal462 = (Token) match(
              input,
              203,
              FOLLOW_203_in_typeFragment9970);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_203.add(char_literal462);

          // AST REWRITE
          // elements: 172
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 863:41: -> ^( MULTIARRAY_FRAGMENT[$t] ^( LIST ( ',' )+ ) )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:44: ^( MULTIARRAY_FRAGMENT[$t] ^( LIST ( ',' )+ ) )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(MULTIARRAY_FRAGMENT, t),
                    root_1);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:863:70: ^( LIST ( ',' )+ )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(LIST, "LIST"),
                      root_2);

                  if (!(stream_172.hasNext())) {
                    throw new RewriteEarlyExitException();
                  }
                  while (stream_172.hasNext()) {
                    adaptor.addChild(root_2, stream_172.nextNode());

                  }
                  stream_172.reset();

                  adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:864:4: t= '{' '}'
        {
          t = (Token) match(input, 177, FOLLOW_177_in_typeFragment10013);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_177.add(t);

          char_literal463 = (Token) match(
              input,
              178,
              FOLLOW_178_in_typeFragment10015);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_178.add(char_literal463);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 864:41: -> ^( SET_FRAGMENT[$t] )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:864:44: ^( SET_FRAGMENT[$t] )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(SET_FRAGMENT, t),
                    root_1);

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 125, typeFragment_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeFragment"

  public static class baseType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "baseType"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:867:1: baseType : (t= TYPEVARID -> ^( TYPEVARID_TYPE[$t] $t) | name ( '.' ID )? ( typeTuple )? -> ^( NAME_TYPE name ^( OPTION ( ID )? ) ^( OPTION ( typeTuple )? ) ) | procedureType | tupleType | functionType | relationType );
  public final AntlrPilarParser.baseType_return baseType()
      throws RecognitionException {
    AntlrPilarParser.baseType_return retval = new AntlrPilarParser.baseType_return();
    retval.start = input.LT(1);
    int baseType_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal465 = null;
    Token ID466 = null;
    AntlrPilarParser.name_return name464 = null;

    AntlrPilarParser.typeTuple_return typeTuple467 = null;

    AntlrPilarParser.procedureType_return procedureType468 = null;

    AntlrPilarParser.tupleType_return tupleType469 = null;

    AntlrPilarParser.functionType_return functionType470 = null;

    AntlrPilarParser.relationType_return relationType471 = null;

    Object t_tree = null;
    Object char_literal465_tree = null;
    Object ID466_tree = null;
    RewriteRuleTokenStream stream_216 = new RewriteRuleTokenStream(adaptor,
        "token 216");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleTokenStream stream_TYPEVARID = new RewriteRuleTokenStream(
        adaptor, "token TYPEVARID");
    RewriteRuleSubtreeStream stream_typeTuple = new RewriteRuleSubtreeStream(
        adaptor, "rule typeTuple");
    RewriteRuleSubtreeStream stream_name = new RewriteRuleSubtreeStream(
        adaptor, "rule name");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 126)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:868:2: (t= TYPEVARID -> ^( TYPEVARID_TYPE[$t] $t) | name ( '.' ID )? ( typeTuple )? -> ^( NAME_TYPE name ^( OPTION ( ID )? ) ^( OPTION ( typeTuple )? ) ) | procedureType | tupleType | functionType | relationType )
      int alt151 = 6;
      switch (input.LA(1)) {
        case TYPEVARID: {
          alt151 = 1;
        }
          break;
        case ID: {
          alt151 = 2;
        }
          break;
        case 169: {
          int LA151_3 = input.LA(2);

          if ((synpred207_AntlrPilar())) {
            alt151 = 3;
          } else if ((synpred208_AntlrPilar())) {
            alt151 = 4;
          } else {
            if (state.backtracking > 0) {
              state.failed = true;
              return retval;
            }
            NoViableAltException nvae = new NoViableAltException("", 151, 3,
                input);

            throw nvae;
          }
        }
          break;
        case 177: {
          int LA151_4 = input.LA(2);

          if ((synpred209_AntlrPilar())) {
            alt151 = 5;
          } else if ((true)) {
            alt151 = 6;
          } else {
            if (state.backtracking > 0) {
              state.failed = true;
              return retval;
            }
            NoViableAltException nvae = new NoViableAltException("", 151, 4,
                input);

            throw nvae;
          }
        }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 151, 0,
              input);

          throw nvae;
      }

      switch (alt151) {
        case 1:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:868:4: t= TYPEVARID
        {
          t = (Token) match(input, TYPEVARID, FOLLOW_TYPEVARID_in_baseType10062);
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_TYPEVARID.add(t);

          // AST REWRITE
          // elements: t
          // token labels: t
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t = new RewriteRuleTokenStream(
                adaptor, "token t", t);
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 868:41: -> ^( TYPEVARID_TYPE[$t] $t)
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:868:44: ^( TYPEVARID_TYPE[$t] $t)
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(TYPEVARID_TYPE, t),
                    root_1);

                adaptor.addChild(root_1, stream_t.nextNode());

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 2:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:4: name ( '.' ID )? ( typeTuple )?
        {
          pushFollow(FOLLOW_name_in_baseType10102);
          name464 = name();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_name.add(name464.getTree());
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:9: ( '.' ID )?
          int alt149 = 2;
          int LA149_0 = input.LA(1);

          if ((LA149_0 == 216)) {
            int LA149_1 = input.LA(2);

            if ((LA149_1 == ID)) {
              int LA149_3 = input.LA(3);

              if ((synpred204_AntlrPilar())) {
                alt149 = 1;
              }
            }
          }
          switch (alt149) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:11: '.' ID
            {
              char_literal465 = (Token) match(
                  input,
                  216,
                  FOLLOW_216_in_baseType10106);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_216.add(char_literal465);

              ID466 = (Token) match(input, ID, FOLLOW_ID_in_baseType10108);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_ID.add(ID466);

            }
              break;

          }

          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:20: ( typeTuple )?
          int alt150 = 2;
          alt150 = dfa150.predict(input);
          switch (alt150) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: typeTuple
            {
              pushFollow(FOLLOW_typeTuple_in_baseType10112);
              typeTuple467 = typeTuple();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeTuple.add(typeTuple467.getTree());

            }
              break;

          }

          // AST REWRITE
          // elements: ID, name, typeTuple
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (Object) adaptor.nil();
            // 869:41: -> ^( NAME_TYPE name ^( OPTION ( ID )? ) ^( OPTION ( typeTuple )? ) )
            {
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:44: ^( NAME_TYPE name ^( OPTION ( ID )? ) ^( OPTION ( typeTuple )? ) )
              {
                Object root_1 = (Object) adaptor.nil();
                root_1 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(NAME_TYPE, "NAME_TYPE"),
                    root_1);

                adaptor.addChild(root_1, stream_name.nextTree());
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:61: ^( OPTION ( ID )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:70: ( ID )?
                  if (stream_ID.hasNext()) {
                    adaptor.addChild(root_2, stream_ID.nextNode());

                  }
                  stream_ID.reset();

                  adaptor.addChild(root_1, root_2);
                }
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:75: ^( OPTION ( typeTuple )? )
                {
                  Object root_2 = (Object) adaptor.nil();
                  root_2 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(OPTION, "OPTION"),
                      root_2);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:84: ( typeTuple )?
                  if (stream_typeTuple.hasNext()) {
                    adaptor.addChild(root_2, stream_typeTuple.nextTree());

                  }
                  stream_typeTuple.reset();

                  adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
              }

            }

            retval.tree = root_0;
          }
        }
          break;
        case 3:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:870:4: procedureType
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_procedureType_in_baseType10150);
          procedureType468 = procedureType();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, procedureType468.getTree());

        }
          break;
        case 4:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:871:4: tupleType
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_tupleType_in_baseType10155);
          tupleType469 = tupleType();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, tupleType469.getTree());

        }
          break;
        case 5:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:872:4: functionType
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_functionType_in_baseType10160);
          functionType470 = functionType();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, functionType470.getTree());

        }
          break;
        case 6:
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:873:4: relationType
        {
          root_0 = (Object) adaptor.nil();

          pushFollow(FOLLOW_relationType_in_baseType10165);
          relationType471 = relationType();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            adaptor.addChild(root_0, relationType471.getTree());

        }
          break;

      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 126, baseType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "baseType"

  public static class procedureType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "procedureType"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:876:1: procedureType : t= '(' ( ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? ) )? ( '->' ( annotatedType )? ')' -> ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) | '-!>' ( annotatedType )? ')' -> ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) ) ;
  public final AntlrPilarParser.procedureType_return procedureType()
      throws RecognitionException {
    AntlrPilarParser.procedureType_return retval = new AntlrPilarParser.procedureType_return();
    retval.start = input.LT(1);
    int procedureType_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal474 = null;
    Token char_literal476 = null;
    Token string_literal478 = null;
    Token char_literal480 = null;
    Token string_literal481 = null;
    Token char_literal483 = null;
    AntlrPilarParser.procedureTypeParamVariable_return procedureTypeParamVariable472 = null;

    AntlrPilarParser.typeParam_return typeParam473 = null;

    AntlrPilarParser.typeParam_return typeParam475 = null;

    AntlrPilarParser.procedureTypeParamVariable_return procedureTypeParamVariable477 = null;

    AntlrPilarParser.annotatedType_return annotatedType479 = null;

    AntlrPilarParser.annotatedType_return annotatedType482 = null;

    Object t_tree = null;
    Object char_literal474_tree = null;
    Object char_literal476_tree = null;
    Object string_literal478_tree = null;
    Object char_literal480_tree = null;
    Object string_literal481_tree = null;
    Object char_literal483_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_222 = new RewriteRuleTokenStream(adaptor,
        "token 222");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_226 = new RewriteRuleTokenStream(adaptor,
        "token 226");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleSubtreeStream stream_procedureTypeParamVariable = new RewriteRuleSubtreeStream(
        adaptor, "rule procedureTypeParamVariable");
    RewriteRuleSubtreeStream stream_annotatedType = new RewriteRuleSubtreeStream(
        adaptor, "rule annotatedType");
    RewriteRuleSubtreeStream stream_typeParam = new RewriteRuleSubtreeStream(
        adaptor, "rule typeParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 127)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:877:2: (t= '(' ( ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? ) )? ( '->' ( annotatedType )? ')' -> ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) | '-!>' ( annotatedType )? ')' -> ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:877:4: t= '(' ( ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? ) )? ( '->' ( annotatedType )? ')' -> ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) | '-!>' ( annotatedType )? ')' -> ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) )
      {
        t = (Token) match(input, 169, FOLLOW_169_in_procedureType10178);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_169.add(t);

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:878:4: ( ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? ) )?
        int alt155 = 2;
        int LA155_0 = input.LA(1);

        if (((LA155_0 >= ID && LA155_0 <= TYPEVARID) || LA155_0 == 169 || LA155_0 == 177)) {
          alt155 = 1;
        }
        switch (alt155) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:878:7: ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:878:7: ( procedureTypeParamVariable | typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )? )
            int alt154 = 2;
            switch (input.LA(1)) {
              case TYPEVARID: {
                int LA154_1 = input.LA(2);

                if ((synpred210_AntlrPilar())) {
                  alt154 = 1;
                } else if ((true)) {
                  alt154 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 154,
                      1, input);

                  throw nvae;
                }
              }
                break;
              case ID: {
                int LA154_2 = input.LA(2);

                if ((synpred210_AntlrPilar())) {
                  alt154 = 1;
                } else if ((true)) {
                  alt154 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 154,
                      2, input);

                  throw nvae;
                }
              }
                break;
              case 169: {
                int LA154_3 = input.LA(2);

                if ((synpred210_AntlrPilar())) {
                  alt154 = 1;
                } else if ((true)) {
                  alt154 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 154,
                      3, input);

                  throw nvae;
                }
              }
                break;
              case 177: {
                int LA154_4 = input.LA(2);

                if ((synpred210_AntlrPilar())) {
                  alt154 = 1;
                } else if ((true)) {
                  alt154 = 2;
                } else {
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 154,
                      4, input);

                  throw nvae;
                }
              }
                break;
              default:
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 154,
                    0, input);

                throw nvae;
            }

            switch (alt154) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:878:9: procedureTypeParamVariable
              {
                pushFollow(FOLLOW_procedureTypeParamVariable_in_procedureType10189);
                procedureTypeParamVariable472 = procedureTypeParamVariable();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_procedureTypeParamVariable
                      .add(procedureTypeParamVariable472.getTree());

              }
                break;
              case 2:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:879:9: typeParam ( ',' typeParam )* ( ',' procedureTypeParamVariable )?
              {
                pushFollow(FOLLOW_typeParam_in_procedureType10199);
                typeParam473 = typeParam();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_typeParam.add(typeParam473.getTree());
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:9: ( ',' typeParam )*
                loop152: do {
                  int alt152 = 2;
                  int LA152_0 = input.LA(1);

                  if ((LA152_0 == 172)) {
                    int LA152_1 = input.LA(2);

                    if ((synpred211_AntlrPilar())) {
                      alt152 = 1;
                    }

                  }

                  switch (alt152) {
                    case 1:
                    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:11: ',' typeParam
                    {
                      char_literal474 = (Token) match(
                          input,
                          172,
                          FOLLOW_172_in_procedureType10212);
                      if (state.failed) return retval;
                      if (state.backtracking == 0)
                        stream_172.add(char_literal474);

                      pushFollow(FOLLOW_typeParam_in_procedureType10214);
                      typeParam475 = typeParam();

                      state._fsp--;
                      if (state.failed) return retval;
                      if (state.backtracking == 0)
                        stream_typeParam.add(typeParam475.getTree());

                    }
                      break;

                    default:
                      break loop152;
                  }
                } while (true);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:881:9: ( ',' procedureTypeParamVariable )?
                int alt153 = 2;
                int LA153_0 = input.LA(1);

                if ((LA153_0 == 172)) {
                  alt153 = 1;
                }
                switch (alt153) {
                  case 1:
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:881:11: ',' procedureTypeParamVariable
                  {
                    char_literal476 = (Token) match(
                        input,
                        172,
                        FOLLOW_172_in_procedureType10230);
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_172.add(char_literal476);

                    pushFollow(FOLLOW_procedureTypeParamVariable_in_procedureType10232);
                    procedureTypeParamVariable477 = procedureTypeParamVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_procedureTypeParamVariable
                          .add(procedureTypeParamVariable477.getTree());

                  }
                    break;

                }

              }
                break;

            }

          }
            break;

        }

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:4: ( '->' ( annotatedType )? ')' -> ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) | '-!>' ( annotatedType )? ')' -> ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) ) )
        int alt158 = 2;
        int LA158_0 = input.LA(1);

        if ((LA158_0 == 222)) {
          alt158 = 1;
        } else if ((LA158_0 == 226)) {
          alt158 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 158, 0,
              input);

          throw nvae;
        }
        switch (alt158) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:6: '->' ( annotatedType )? ')'
          {
            string_literal478 = (Token) match(
                input,
                222,
                FOLLOW_222_in_procedureType10266);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_222.add(string_literal478);

            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:11: ( annotatedType )?
            int alt156 = 2;
            int LA156_0 = input.LA(1);

            if (((LA156_0 >= ID && LA156_0 <= TYPEVARID) || LA156_0 == 169 || LA156_0 == 177)) {
              alt156 = 1;
            }
            switch (alt156) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotatedType
              {
                pushFollow(FOLLOW_annotatedType_in_procedureType10268);
                annotatedType479 = annotatedType();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotatedType.add(annotatedType479.getTree());

              }
                break;

            }

            char_literal480 = (Token) match(
                input,
                170,
                FOLLOW_170_in_procedureType10271);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_170.add(char_literal480);

            // AST REWRITE
            // elements: procedureTypeParamVariable, annotatedType, typeParam
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (Object) adaptor.nil();
              // 885:41: -> ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) )
              {
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:44: ^( FUN_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) )
                {
                  Object root_1 = (Object) adaptor.nil();
                  root_1 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(FUN_TYPE, t),
                      root_1);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:59: ^( LIST ( typeParam )* ( procedureTypeParamVariable )? )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(LIST, "LIST"),
                        root_2);

                    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:66: ( typeParam )*
                    while (stream_typeParam.hasNext()) {
                      adaptor.addChild(root_2, stream_typeParam.nextTree());

                    }
                    stream_typeParam.reset();
                    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:77: ( procedureTypeParamVariable )?
                    if (stream_procedureTypeParamVariable.hasNext()) {
                      adaptor.addChild(
                          root_2,
                          stream_procedureTypeParamVariable.nextTree());

                    }
                    stream_procedureTypeParamVariable.reset();

                    adaptor.addChild(root_1, root_2);
                  }
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:106: ^( OPTION ( annotatedType )? )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(OPTION, "OPTION"),
                        root_2);

                    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:885:115: ( annotatedType )?
                    if (stream_annotatedType.hasNext()) {
                      adaptor.addChild(root_2, stream_annotatedType.nextTree());

                    }
                    stream_annotatedType.reset();

                    adaptor.addChild(root_1, root_2);
                  }

                  adaptor.addChild(root_0, root_1);
                }

              }

              retval.tree = root_0;
            }
          }
            break;
          case 2:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:886:6: '-!>' ( annotatedType )? ')'
          {
            string_literal481 = (Token) match(
                input,
                226,
                FOLLOW_226_in_procedureType10313);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_226.add(string_literal481);

            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:886:12: ( annotatedType )?
            int alt157 = 2;
            int LA157_0 = input.LA(1);

            if (((LA157_0 >= ID && LA157_0 <= TYPEVARID) || LA157_0 == 169 || LA157_0 == 177)) {
              alt157 = 1;
            }
            switch (alt157) {
              case 1:
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: annotatedType
              {
                pushFollow(FOLLOW_annotatedType_in_procedureType10315);
                annotatedType482 = annotatedType();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotatedType.add(annotatedType482.getTree());

              }
                break;

            }

            char_literal483 = (Token) match(
                input,
                170,
                FOLLOW_170_in_procedureType10318);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_170.add(char_literal483);

            // AST REWRITE
            // elements: annotatedType, procedureTypeParamVariable, typeParam
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (Object) adaptor.nil();
              // 886:41: -> ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) )
              {
                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:886:44: ^( PROCEDURE_TYPE[$t] ^( LIST ( typeParam )* ( procedureTypeParamVariable )? ) ^( OPTION ( annotatedType )? ) )
                {
                  Object root_1 = (Object) adaptor.nil();
                  root_1 = (Object) adaptor.becomeRoot(
                      (Object) adaptor.create(PROCEDURE_TYPE, t),
                      root_1);

                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:886:65: ^( LIST ( typeParam )* ( procedureTypeParamVariable )? )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(LIST, "LIST"),
                        root_2);

                    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:886:72: ( typeParam )*
                    while (stream_typeParam.hasNext()) {
                      adaptor.addChild(root_2, stream_typeParam.nextTree());

                    }
                    stream_typeParam.reset();
                    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:886:83: ( procedureTypeParamVariable )?
                    if (stream_procedureTypeParamVariable.hasNext()) {
                      adaptor.addChild(
                          root_2,
                          stream_procedureTypeParamVariable.nextTree());

                    }
                    stream_procedureTypeParamVariable.reset();

                    adaptor.addChild(root_1, root_2);
                  }
                  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:886:112: ^( OPTION ( annotatedType )? )
                  {
                    Object root_2 = (Object) adaptor.nil();
                    root_2 = (Object) adaptor.becomeRoot(
                        (Object) adaptor.create(OPTION, "OPTION"),
                        root_2);

                    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:886:121: ( annotatedType )?
                    if (stream_annotatedType.hasNext()) {
                      adaptor.addChild(root_2, stream_annotatedType.nextTree());

                    }
                    stream_annotatedType.reset();

                    adaptor.addChild(root_1, root_2);
                  }

                  adaptor.addChild(root_0, root_1);
                }

              }

              retval.tree = root_0;
            }
          }
            break;

        }

      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 127, procedureType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "procedureType"

  public static class typeParam_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "typeParam"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:890:1: typeParam : type ( ID )? annotationList -> ^( TYPE_PARAM type ^( OPTION ( ID )? ) annotationList ) ;
  public final AntlrPilarParser.typeParam_return typeParam()
      throws RecognitionException {
    AntlrPilarParser.typeParam_return retval = new AntlrPilarParser.typeParam_return();
    retval.start = input.LT(1);
    int typeParam_StartIndex = input.index();
    Object root_0 = null;

    Token ID485 = null;
    AntlrPilarParser.type_return type484 = null;

    AntlrPilarParser.annotationList_return annotationList486 = null;

    Object ID485_tree = null;
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 128)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:891:2: ( type ( ID )? annotationList -> ^( TYPE_PARAM type ^( OPTION ( ID )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:891:4: type ( ID )? annotationList
      {
        pushFollow(FOLLOW_type_in_typeParam10368);
        type484 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type484.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:891:9: ( ID )?
        int alt159 = 2;
        int LA159_0 = input.LA(1);

        if ((LA159_0 == ID)) {
          alt159 = 1;
        }
        switch (alt159) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ID
          {
            ID485 = (Token) match(input, ID, FOLLOW_ID_in_typeParam10370);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ID.add(ID485);

          }
            break;

        }

        pushFollow(FOLLOW_annotationList_in_typeParam10373);
        annotationList486 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList486.getTree());

        // AST REWRITE
        // elements: type, annotationList, ID
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 891:41: -> ^( TYPE_PARAM type ^( OPTION ( ID )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:891:44: ^( TYPE_PARAM type ^( OPTION ( ID )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TYPE_PARAM, "TYPE_PARAM"),
                  root_1);

              adaptor.addChild(root_1, stream_type.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:891:62: ^( OPTION ( ID )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:891:71: ( ID )?
                if (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 128, typeParam_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "typeParam"

  public static class annotatedType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "annotatedType"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:894:1: annotatedType : type annotationList -> ^( ANNOTATED_TYPE type annotationList ) ;
  public final AntlrPilarParser.annotatedType_return annotatedType()
      throws RecognitionException {
    AntlrPilarParser.annotatedType_return retval = new AntlrPilarParser.annotatedType_return();
    retval.start = input.LT(1);
    int annotatedType_StartIndex = input.index();
    Object root_0 = null;

    AntlrPilarParser.type_return type487 = null;

    AntlrPilarParser.annotationList_return annotationList488 = null;

    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 129)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:895:2: ( type annotationList -> ^( ANNOTATED_TYPE type annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:895:4: type annotationList
      {
        pushFollow(FOLLOW_type_in_annotatedType10414);
        type487 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type487.getTree());
        pushFollow(FOLLOW_annotationList_in_annotatedType10416);
        annotationList488 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList488.getTree());

        // AST REWRITE
        // elements: annotationList, type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 895:41: -> ^( ANNOTATED_TYPE type annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:895:44: ^( ANNOTATED_TYPE type annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(ANNOTATED_TYPE, "ANNOTATED_TYPE"),
                  root_1);

              adaptor.addChild(root_1, stream_type.nextTree());
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 129, annotatedType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "annotatedType"

  public static class procedureTypeParamVariable_return extends
      ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "procedureTypeParamVariable"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:898:1: procedureTypeParamVariable : type ( ID )? '...' annotationList -> ^( PROCEDURE_TYPE_PARAM_VARIABLE type ^( OPTION ( ID )? ) annotationList ) ;
  public final AntlrPilarParser.procedureTypeParamVariable_return procedureTypeParamVariable()
      throws RecognitionException {
    AntlrPilarParser.procedureTypeParamVariable_return retval = new AntlrPilarParser.procedureTypeParamVariable_return();
    retval.start = input.LT(1);
    int procedureTypeParamVariable_StartIndex = input.index();
    Object root_0 = null;

    Token ID490 = null;
    Token string_literal491 = null;
    AntlrPilarParser.type_return type489 = null;

    AntlrPilarParser.annotationList_return annotationList492 = null;

    Object ID490_tree = null;
    Object string_literal491_tree = null;
    RewriteRuleTokenStream stream_185 = new RewriteRuleTokenStream(adaptor,
        "token 185");
    RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor,
        "token ID");
    RewriteRuleSubtreeStream stream_annotationList = new RewriteRuleSubtreeStream(
        adaptor, "rule annotationList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(
        adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 130)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:899:2: ( type ( ID )? '...' annotationList -> ^( PROCEDURE_TYPE_PARAM_VARIABLE type ^( OPTION ( ID )? ) annotationList ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:899:4: type ( ID )? '...' annotationList
      {
        pushFollow(FOLLOW_type_in_procedureTypeParamVariable10455);
        type489 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type489.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:899:9: ( ID )?
        int alt160 = 2;
        int LA160_0 = input.LA(1);

        if ((LA160_0 == ID)) {
          alt160 = 1;
        }
        switch (alt160) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:0:0: ID
          {
            ID490 = (Token) match(
                input,
                ID,
                FOLLOW_ID_in_procedureTypeParamVariable10457);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ID.add(ID490);

          }
            break;

        }

        string_literal491 = (Token) match(
            input,
            185,
            FOLLOW_185_in_procedureTypeParamVariable10460);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_185.add(string_literal491);

        pushFollow(FOLLOW_annotationList_in_procedureTypeParamVariable10462);
        annotationList492 = annotationList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_annotationList.add(annotationList492.getTree());

        // AST REWRITE
        // elements: ID, annotationList, type
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 899:41: -> ^( PROCEDURE_TYPE_PARAM_VARIABLE type ^( OPTION ( ID )? ) annotationList )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:899:44: ^( PROCEDURE_TYPE_PARAM_VARIABLE type ^( OPTION ( ID )? ) annotationList )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(
                  PROCEDURE_TYPE_PARAM_VARIABLE,
                  "PROCEDURE_TYPE_PARAM_VARIABLE"), root_1);

              adaptor.addChild(root_1, stream_type.nextTree());
              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:899:81: ^( OPTION ( ID )? )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(OPTION, "OPTION"),
                    root_2);

                // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:899:90: ( ID )?
                if (stream_ID.hasNext()) {
                  adaptor.addChild(root_2, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_annotationList.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 130, procedureTypeParamVariable_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "procedureTypeParamVariable"

  public static class tupleType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "tupleType"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:902:1: tupleType : t= '(' typeParam ( ',' typeParam )* ')' -> ^( TUPLE_TYPE[$t] ^( LIST ( typeParam )+ ) ) ;
  public final AntlrPilarParser.tupleType_return tupleType()
      throws RecognitionException {
    AntlrPilarParser.tupleType_return retval = new AntlrPilarParser.tupleType_return();
    retval.start = input.LT(1);
    int tupleType_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal494 = null;
    Token char_literal496 = null;
    AntlrPilarParser.typeParam_return typeParam493 = null;

    AntlrPilarParser.typeParam_return typeParam495 = null;

    Object t_tree = null;
    Object char_literal494_tree = null;
    Object char_literal496_tree = null;
    RewriteRuleTokenStream stream_170 = new RewriteRuleTokenStream(adaptor,
        "token 170");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_169 = new RewriteRuleTokenStream(adaptor,
        "token 169");
    RewriteRuleSubtreeStream stream_typeParam = new RewriteRuleSubtreeStream(
        adaptor, "rule typeParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 131)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:903:2: (t= '(' typeParam ( ',' typeParam )* ')' -> ^( TUPLE_TYPE[$t] ^( LIST ( typeParam )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:903:4: t= '(' typeParam ( ',' typeParam )* ')'
      {
        t = (Token) match(input, 169, FOLLOW_169_in_tupleType10499);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_169.add(t);

        pushFollow(FOLLOW_typeParam_in_tupleType10501);
        typeParam493 = typeParam();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_typeParam.add(typeParam493.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:904:8: ( ',' typeParam )*
        loop161: do {
          int alt161 = 2;
          int LA161_0 = input.LA(1);

          if ((LA161_0 == 172)) {
            alt161 = 1;
          }

          switch (alt161) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:904:10: ',' typeParam
            {
              char_literal494 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_tupleType10513);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal494);

              pushFollow(FOLLOW_typeParam_in_tupleType10515);
              typeParam495 = typeParam();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeParam.add(typeParam495.getTree());

            }
              break;

            default:
              break loop161;
          }
        } while (true);

        char_literal496 = (Token) match(
            input,
            170,
            FOLLOW_170_in_tupleType10519);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_170.add(char_literal496);

        // AST REWRITE
        // elements: typeParam
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 904:41: -> ^( TUPLE_TYPE[$t] ^( LIST ( typeParam )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:904:44: ^( TUPLE_TYPE[$t] ^( LIST ( typeParam )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(TUPLE_TYPE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:904:61: ^( LIST ( typeParam )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_typeParam.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_typeParam.hasNext()) {
                  adaptor.addChild(root_2, stream_typeParam.nextTree());

                }
                stream_typeParam.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 131, tupleType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "tupleType"

  public static class functionType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "functionType"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:907:1: functionType : t= '{' i+= typeParam ( ',' i+= typeParam )* '->' o= annotatedType '}' -> ^( FUNCTION_TYPE[$t] ^( LIST ( $i)+ ) $o) ;
  public final AntlrPilarParser.functionType_return functionType()
      throws RecognitionException {
    AntlrPilarParser.functionType_return retval = new AntlrPilarParser.functionType_return();
    retval.start = input.LT(1);
    int functionType_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal497 = null;
    Token string_literal498 = null;
    Token char_literal499 = null;
    List list_i = null;
    AntlrPilarParser.annotatedType_return o = null;

    RuleReturnScope i = null;
    Object t_tree = null;
    Object char_literal497_tree = null;
    Object string_literal498_tree = null;
    Object char_literal499_tree = null;
    RewriteRuleTokenStream stream_222 = new RewriteRuleTokenStream(adaptor,
        "token 222");
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleSubtreeStream stream_annotatedType = new RewriteRuleSubtreeStream(
        adaptor, "rule annotatedType");
    RewriteRuleSubtreeStream stream_typeParam = new RewriteRuleSubtreeStream(
        adaptor, "rule typeParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 132)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:908:2: (t= '{' i+= typeParam ( ',' i+= typeParam )* '->' o= annotatedType '}' -> ^( FUNCTION_TYPE[$t] ^( LIST ( $i)+ ) $o) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:908:4: t= '{' i+= typeParam ( ',' i+= typeParam )* '->' o= annotatedType '}'
      {
        t = (Token) match(input, 177, FOLLOW_177_in_functionType10557);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(t);

        pushFollow(FOLLOW_typeParam_in_functionType10561);
        i = typeParam();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_typeParam.add(i.getTree());
        if (list_i == null) list_i = new ArrayList();
        list_i.add(i.getTree());

        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:909:8: ( ',' i+= typeParam )*
        loop162: do {
          int alt162 = 2;
          int LA162_0 = input.LA(1);

          if ((LA162_0 == 172)) {
            alt162 = 1;
          }

          switch (alt162) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:909:10: ',' i+= typeParam
            {
              char_literal497 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_functionType10573);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal497);

              pushFollow(FOLLOW_typeParam_in_functionType10577);
              i = typeParam();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_typeParam.add(i.getTree());
              if (list_i == null) list_i = new ArrayList();
              list_i.add(i.getTree());

            }
              break;

            default:
              break loop162;
          }
        } while (true);

        string_literal498 = (Token) match(
            input,
            222,
            FOLLOW_222_in_functionType10582);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_222.add(string_literal498);

        pushFollow(FOLLOW_annotatedType_in_functionType10594);
        o = annotatedType();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_annotatedType.add(o.getTree());
        char_literal499 = (Token) match(
            input,
            178,
            FOLLOW_178_in_functionType10596);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal499);

        // AST REWRITE
        // elements: i, o
        // token labels: 
        // rule labels: retval, o
        // token list labels: 
        // rule list labels: i
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);
          RewriteRuleSubtreeStream stream_o = new RewriteRuleSubtreeStream(
              adaptor, "rule o", o != null ? o.tree : null);
          RewriteRuleSubtreeStream stream_i = new RewriteRuleSubtreeStream(
              adaptor, "token i", list_i);
          root_0 = (Object) adaptor.nil();
          // 910:41: -> ^( FUNCTION_TYPE[$t] ^( LIST ( $i)+ ) $o)
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:910:44: ^( FUNCTION_TYPE[$t] ^( LIST ( $i)+ ) $o)
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(FUNCTION_TYPE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:910:64: ^( LIST ( $i)+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_i.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_i.hasNext()) {
                  adaptor.addChild(root_2, stream_i.nextTree());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
              }
              adaptor.addChild(root_1, stream_o.nextTree());

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 132, functionType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "functionType"

  public static class relationType_return extends ParserRuleReturnScope {
    Object tree;

    public Object getTree() {
      return tree;
    }
  };

  // $ANTLR start "relationType"
  // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:913:1: relationType : t= '{' typeParam ( ',' typeParam )+ '}' -> ^( RELATION_TYPE[$t] ^( LIST ( typeParam )+ ) ) ;
  public final AntlrPilarParser.relationType_return relationType()
      throws RecognitionException {
    AntlrPilarParser.relationType_return retval = new AntlrPilarParser.relationType_return();
    retval.start = input.LT(1);
    int relationType_StartIndex = input.index();
    Object root_0 = null;

    Token t = null;
    Token char_literal501 = null;
    Token char_literal503 = null;
    AntlrPilarParser.typeParam_return typeParam500 = null;

    AntlrPilarParser.typeParam_return typeParam502 = null;

    Object t_tree = null;
    Object char_literal501_tree = null;
    Object char_literal503_tree = null;
    RewriteRuleTokenStream stream_172 = new RewriteRuleTokenStream(adaptor,
        "token 172");
    RewriteRuleTokenStream stream_178 = new RewriteRuleTokenStream(adaptor,
        "token 178");
    RewriteRuleTokenStream stream_177 = new RewriteRuleTokenStream(adaptor,
        "token 177");
    RewriteRuleSubtreeStream stream_typeParam = new RewriteRuleSubtreeStream(
        adaptor, "rule typeParam");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 133)) {
        return retval;
      }
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:914:2: (t= '{' typeParam ( ',' typeParam )+ '}' -> ^( RELATION_TYPE[$t] ^( LIST ( typeParam )+ ) ) )
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:914:4: t= '{' typeParam ( ',' typeParam )+ '}'
      {
        t = (Token) match(input, 177, FOLLOW_177_in_relationType10649);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_177.add(t);

        pushFollow(FOLLOW_typeParam_in_relationType10651);
        typeParam500 = typeParam();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_typeParam.add(typeParam500.getTree());
        // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:915:8: ( ',' typeParam )+
        int cnt163 = 0;
        loop163: do {
          int alt163 = 2;
          int LA163_0 = input.LA(1);

          if ((LA163_0 == 172)) {
            alt163 = 1;
          }

          switch (alt163) {
            case 1:
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:915:10: ',' typeParam
            {
              char_literal501 = (Token) match(
                  input,
                  172,
                  FOLLOW_172_in_relationType10663);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_172.add(char_literal501);

              pushFollow(FOLLOW_typeParam_in_relationType10665);
              typeParam502 = typeParam();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_typeParam.add(typeParam502.getTree());

            }
              break;

            default:
              if (cnt163 >= 1) break loop163;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(163, input);
              throw eee;
          }
          cnt163++;
        } while (true);

        char_literal503 = (Token) match(
            input,
            178,
            FOLLOW_178_in_relationType10670);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_178.add(char_literal503);

        // AST REWRITE
        // elements: typeParam
        // token labels: 
        // rule labels: retval
        // token list labels: 
        // rule list labels: 
        // wildcard labels: 
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
              adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (Object) adaptor.nil();
          // 915:41: -> ^( RELATION_TYPE[$t] ^( LIST ( typeParam )+ ) )
          {
            // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:915:44: ^( RELATION_TYPE[$t] ^( LIST ( typeParam )+ ) )
            {
              Object root_1 = (Object) adaptor.nil();
              root_1 = (Object) adaptor.becomeRoot(
                  (Object) adaptor.create(RELATION_TYPE, t),
                  root_1);

              // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:915:64: ^( LIST ( typeParam )+ )
              {
                Object root_2 = (Object) adaptor.nil();
                root_2 = (Object) adaptor.becomeRoot(
                    (Object) adaptor.create(LIST, "LIST"),
                    root_2);

                if (!(stream_typeParam.hasNext())) {
                  throw new RewriteEarlyExitException();
                }
                while (stream_typeParam.hasNext()) {
                  adaptor.addChild(root_2, stream_typeParam.nextTree());

                }
                stream_typeParam.reset();

                adaptor.addChild(root_1, root_2);
              }

              adaptor.addChild(root_0, root_1);
            }

          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (Object) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (Object) adaptor.errorNode(
          input,
          retval.start,
          input.LT(-1),
          re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 133, relationType_StartIndex);
      }
    }
    return retval;
  }

  // $ANTLR end "relationType"

  // $ANTLR start synpred9_AntlrPilar
  public final void synpred9_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:228:13: ( annotationParams )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:228:13: annotationParams
    {
      pushFollow(FOLLOW_annotationParams_in_synpred9_AntlrPilar1451);
      annotationParams();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred9_AntlrPilar

  // $ANTLR start synpred11_AntlrPilar
  public final void synpred11_AntlrPilar_fragment() throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:232:4: (t= '(' annotationParam ( ',' annotationParam )* ')' )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:232:4: t= '(' annotationParam ( ',' annotationParam )* ')'
    {
      t = (Token) match(input, 169, FOLLOW_169_in_synpred11_AntlrPilar1495);
      if (state.failed) return;
      pushFollow(FOLLOW_annotationParam_in_synpred11_AntlrPilar1497);
      annotationParam();

      state._fsp--;
      if (state.failed) return;
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:233:8: ( ',' annotationParam )*
      loop164: do {
        int alt164 = 2;
        int LA164_0 = input.LA(1);

        if ((LA164_0 == 172)) {
          alt164 = 1;
        }

        switch (alt164) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:233:10: ',' annotationParam
          {
            match(input, 172, FOLLOW_172_in_synpred11_AntlrPilar1508);
            if (state.failed) return;
            pushFollow(FOLLOW_annotationParam_in_synpred11_AntlrPilar1510);
            annotationParam();

            state._fsp--;
            if (state.failed) return;

          }
            break;

          default:
            break loop164;
        }
      } while (true);

      match(input, 170, FOLLOW_170_in_synpred11_AntlrPilar1515);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred11_AntlrPilar

  // $ANTLR start synpred12_AntlrPilar
  public final void synpred12_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:234:10: ( ',' exp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:234:10: ',' exp
    {
      match(input, 172, FOLLOW_172_in_synpred12_AntlrPilar1538);
      if (state.failed) return;
      pushFollow(FOLLOW_exp_in_synpred12_AntlrPilar1540);
      exp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred12_AntlrPilar

  // $ANTLR start synpred42_AntlrPilar
  public final void synpred42_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:340:8: ( paramVariable )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:340:8: paramVariable
    {
      pushFollow(FOLLOW_paramVariable_in_synpred42_AntlrPilar2678);
      paramVariable();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred42_AntlrPilar

  // $ANTLR start synpred46_AntlrPilar
  public final void synpred46_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:350:12: ( ',' param )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:350:12: ',' param
    {
      match(input, 172, FOLLOW_172_in_synpred46_AntlrPilar2827);
      if (state.failed) return;
      pushFollow(FOLLOW_param_in_synpred46_AntlrPilar2829);
      param();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred46_AntlrPilar

  // $ANTLR start synpred70_AntlrPilar
  public final void synpred70_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:429:4: ( extParamVariable )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:429:4: extParamVariable
    {
      pushFollow(FOLLOW_extParamVariable_in_synpred70_AntlrPilar3699);
      extParamVariable();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred70_AntlrPilar

  // $ANTLR start synpred73_AntlrPilar
  public final void synpred73_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:4: ( type )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:4: type
    {
      pushFollow(FOLLOW_type_in_synpred73_AntlrPilar3790);
      type();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred73_AntlrPilar

  // $ANTLR start synpred74_AntlrPilar
  public final void synpred74_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:10: ( ID )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:435:10: ID
    {
      match(input, ID, FOLLOW_ID_in_synpred74_AntlrPilar3793);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred74_AntlrPilar

  // $ANTLR start synpred75_AntlrPilar
  public final void synpred75_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:439:4: ( type )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:439:4: type
    {
      pushFollow(FOLLOW_type_in_synpred75_AntlrPilar3841);
      type();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred75_AntlrPilar

  // $ANTLR start synpred85_AntlrPilar
  public final void synpred85_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:464:6: ( transformation ( '|' transformation )* )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:464:6: transformation ( '|' transformation )*
    {
      pushFollow(FOLLOW_transformation_in_synpred85_AntlrPilar4134);
      transformation();

      state._fsp--;
      if (state.failed) return;
      // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:465:6: ( '|' transformation )*
      loop170: do {
        int alt170 = 2;
        int LA170_0 = input.LA(1);

        if ((LA170_0 == 194)) {
          alt170 = 1;
        }

        switch (alt170) {
          case 1:
          // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:465:8: '|' transformation
          {
            match(input, 194, FOLLOW_194_in_synpred85_AntlrPilar4144);
            if (state.failed) return;
            pushFollow(FOLLOW_transformation_in_synpred85_AntlrPilar4146);
            transformation();

            state._fsp--;
            if (state.failed) return;

          }
            break;

          default:
            break loop170;
        }
      } while (true);

    }
  }

  // $ANTLR end synpred85_AntlrPilar

  // $ANTLR start synpred86_AntlrPilar
  public final void synpred86_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:470:31: ( guard )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:470:31: guard
    {
      pushFollow(FOLLOW_guard_in_synpred86_AntlrPilar4233);
      guard();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred86_AntlrPilar

  // $ANTLR start synpred89_AntlrPilar
  public final void synpred89_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:488:4: ( action )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:488:4: action
    {
      pushFollow(FOLLOW_action_in_synpred89_AntlrPilar4448);
      action();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred89_AntlrPilar

  // $ANTLR start synpred91_AntlrPilar
  public final void synpred91_AntlrPilar_fragment() throws RecognitionException {
    Token t = null;
    AntlrPilarParser.exp_return e1 = null;

    AntlrPilarParser.exp_return e2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:492:4: (t= 'assert' '(' e1= exp ',' e2= exp ')' annotationList ';' )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:492:4: t= 'assert' '(' e1= exp ',' e2= exp ')' annotationList ';'
    {
      t = (Token) match(input, 197, FOLLOW_197_in_synpred91_AntlrPilar4505);
      if (state.failed) return;
      match(input, 169, FOLLOW_169_in_synpred91_AntlrPilar4507);
      if (state.failed) return;
      pushFollow(FOLLOW_exp_in_synpred91_AntlrPilar4511);
      e1 = exp();

      state._fsp--;
      if (state.failed) return;
      match(input, 172, FOLLOW_172_in_synpred91_AntlrPilar4513);
      if (state.failed) return;
      pushFollow(FOLLOW_exp_in_synpred91_AntlrPilar4517);
      e2 = exp();

      state._fsp--;
      if (state.failed) return;
      match(input, 170, FOLLOW_170_in_synpred91_AntlrPilar4519);
      if (state.failed) return;
      pushFollow(FOLLOW_annotationList_in_synpred91_AntlrPilar4524);
      annotationList();

      state._fsp--;
      if (state.failed) return;
      match(input, 175, FOLLOW_175_in_synpred91_AntlrPilar4526);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred91_AntlrPilar

  // $ANTLR start synpred92_AntlrPilar
  public final void synpred92_AntlrPilar_fragment() throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:494:4: (t= 'assert' exp annotationList ';' )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:494:4: t= 'assert' exp annotationList ';'
    {
      t = (Token) match(input, 197, FOLLOW_197_in_synpred92_AntlrPilar4566);
      if (state.failed) return;
      pushFollow(FOLLOW_exp_in_synpred92_AntlrPilar4568);
      exp();

      state._fsp--;
      if (state.failed) return;
      pushFollow(FOLLOW_annotationList_in_synpred92_AntlrPilar4570);
      annotationList();

      state._fsp--;
      if (state.failed) return;
      match(input, 175, FOLLOW_175_in_synpred92_AntlrPilar4572);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred92_AntlrPilar

  // $ANTLR start synpred93_AntlrPilar
  public final void synpred93_AntlrPilar_fragment() throws RecognitionException {
    Token t = null;
    AntlrPilarParser.exp_return e1 = null;

    AntlrPilarParser.exp_return e2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:495:4: (t= 'assume' '(' e1= exp ',' e2= exp ')' annotationList ';' )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:495:4: t= 'assume' '(' e1= exp ',' e2= exp ')' annotationList ';'
    {
      t = (Token) match(input, 198, FOLLOW_198_in_synpred93_AntlrPilar4593);
      if (state.failed) return;
      match(input, 169, FOLLOW_169_in_synpred93_AntlrPilar4595);
      if (state.failed) return;
      pushFollow(FOLLOW_exp_in_synpred93_AntlrPilar4599);
      e1 = exp();

      state._fsp--;
      if (state.failed) return;
      match(input, 172, FOLLOW_172_in_synpred93_AntlrPilar4601);
      if (state.failed) return;
      pushFollow(FOLLOW_exp_in_synpred93_AntlrPilar4605);
      e2 = exp();

      state._fsp--;
      if (state.failed) return;
      match(input, 170, FOLLOW_170_in_synpred93_AntlrPilar4607);
      if (state.failed) return;
      pushFollow(FOLLOW_annotationList_in_synpred93_AntlrPilar4612);
      annotationList();

      state._fsp--;
      if (state.failed) return;
      match(input, 175, FOLLOW_175_in_synpred93_AntlrPilar4614);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred93_AntlrPilar

  // $ANTLR start synpred94_AntlrPilar
  public final void synpred94_AntlrPilar_fragment() throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:497:4: (t= 'assume' exp annotationList ';' )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:497:4: t= 'assume' exp annotationList ';'
    {
      t = (Token) match(input, 198, FOLLOW_198_in_synpred94_AntlrPilar4654);
      if (state.failed) return;
      pushFollow(FOLLOW_exp_in_synpred94_AntlrPilar4656);
      exp();

      state._fsp--;
      if (state.failed) return;
      pushFollow(FOLLOW_annotationList_in_synpred94_AntlrPilar4658);
      annotationList();

      state._fsp--;
      if (state.failed) return;
      match(input, 175, FOLLOW_175_in_synpred94_AntlrPilar4660);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred94_AntlrPilar

  // $ANTLR start synpred96_AntlrPilar
  public final void synpred96_AntlrPilar_fragment() throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:499:4: ( assignment )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:499:4: assignment
    {
      pushFollow(FOLLOW_assignment_in_synpred96_AntlrPilar4707);
      assignment();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred96_AntlrPilar

  // $ANTLR start synpred114_AntlrPilar
  public final void synpred114_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:571:4: ( type )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:571:4: type
    {
      pushFollow(FOLLOW_type_in_synpred114_AntlrPilar5516);
      type();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred114_AntlrPilar

  // $ANTLR start synpred117_AntlrPilar
  public final void synpred117_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:584:5: ( 'else' ifThenExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:584:5: 'else' ifThenExp
    {
      match(input, 196, FOLLOW_196_in_synpred117_AntlrPilar5652);
      if (state.failed) return;
      pushFollow(FOLLOW_ifThenExp_in_synpred117_AntlrPilar5654);
      ifThenExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred117_AntlrPilar

  // $ANTLR start synpred119_AntlrPilar
  public final void synpred119_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:586:17: ( switchCaseExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:586:17: switchCaseExp
    {
      pushFollow(FOLLOW_switchCaseExp_in_synpred119_AntlrPilar5712);
      switchCaseExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred119_AntlrPilar

  // $ANTLR start synpred120_AntlrPilar
  public final void synpred120_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:587:4: ( switchDefaultExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:587:4: switchDefaultExp
    {
      pushFollow(FOLLOW_switchDefaultExp_in_synpred120_AntlrPilar5728);
      switchDefaultExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred120_AntlrPilar

  // $ANTLR start synpred121_AntlrPilar
  public final void synpred121_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.conditionalOrExp_return c2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:610:8: (t= '==>' c2= conditionalOrExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:610:8: t= '==>' c2= conditionalOrExp
    {
      t = (Token) match(input, 213, FOLLOW_213_in_synpred121_AntlrPilar6023);
      if (state.failed) return;
      pushFollow(FOLLOW_conditionalOrExp_in_synpred121_AntlrPilar6027);
      c2 = conditionalOrExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred121_AntlrPilar

  // $ANTLR start synpred122_AntlrPilar
  public final void synpred122_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.conditionalOrExp_return c2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:611:8: (t= '<==' c2= conditionalOrExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:611:8: t= '<==' c2= conditionalOrExp
    {
      t = (Token) match(input, 214, FOLLOW_214_in_synpred122_AntlrPilar6058);
      if (state.failed) return;
      pushFollow(FOLLOW_conditionalOrExp_in_synpred122_AntlrPilar6062);
      c2 = conditionalOrExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred122_AntlrPilar

  // $ANTLR start synpred123_AntlrPilar
  public final void synpred123_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.conditionalAndExp_return c2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:617:8: (t= COND_OR_OP c2= conditionalAndExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:617:8: t= COND_OR_OP c2= conditionalAndExp
    {
      t = (Token) match(
          input,
          COND_OR_OP,
          FOLLOW_COND_OR_OP_in_synpred123_AntlrPilar6137);
      if (state.failed) return;
      pushFollow(FOLLOW_conditionalAndExp_in_synpred123_AntlrPilar6149);
      c2 = conditionalAndExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred123_AntlrPilar

  // $ANTLR start synpred124_AntlrPilar
  public final void synpred124_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.inclusiveOrExp_return i2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:624:8: (t= COND_AND_OP i2= inclusiveOrExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:624:8: t= COND_AND_OP i2= inclusiveOrExp
    {
      t = (Token) match(
          input,
          COND_AND_OP,
          FOLLOW_COND_AND_OP_in_synpred124_AntlrPilar6232);
      if (state.failed) return;
      pushFollow(FOLLOW_inclusiveOrExp_in_synpred124_AntlrPilar6236);
      i2 = inclusiveOrExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred124_AntlrPilar

  // $ANTLR start synpred125_AntlrPilar
  public final void synpred125_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.exclusiveOrExp_return e2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:630:8: (t= OR_OP e2= exclusiveOrExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:630:8: t= OR_OP e2= exclusiveOrExp
    {
      t = (Token) match(input, OR_OP, FOLLOW_OR_OP_in_synpred125_AntlrPilar6308);
      if (state.failed) return;
      pushFollow(FOLLOW_exclusiveOrExp_in_synpred125_AntlrPilar6312);
      e2 = exclusiveOrExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred125_AntlrPilar

  // $ANTLR start synpred126_AntlrPilar
  public final void synpred126_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.andExp_return a2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:637:8: (t= XOR_OP a2= andExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:637:8: t= XOR_OP a2= andExp
    {
      t = (Token) match(
          input,
          XOR_OP,
          FOLLOW_XOR_OP_in_synpred126_AntlrPilar6399);
      if (state.failed) return;
      pushFollow(FOLLOW_andExp_in_synpred126_AntlrPilar6403);
      a2 = andExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred126_AntlrPilar

  // $ANTLR start synpred127_AntlrPilar
  public final void synpred127_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.equalityExp_return e2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:643:8: (t= AND_OP e2= equalityExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:643:8: t= AND_OP e2= equalityExp
    {
      t = (Token) match(
          input,
          AND_OP,
          FOLLOW_AND_OP_in_synpred127_AntlrPilar6491);
      if (state.failed) return;
      pushFollow(FOLLOW_equalityExp_in_synpred127_AntlrPilar6495);
      e2 = equalityExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred127_AntlrPilar

  // $ANTLR start synpred128_AntlrPilar
  public final void synpred128_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.typeTestExp_return t2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:649:8: (t= EQ_OP t2= typeTestExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:649:8: t= EQ_OP t2= typeTestExp
    {
      t = (Token) match(input, EQ_OP, FOLLOW_EQ_OP_in_synpred128_AntlrPilar6578);
      if (state.failed) return;
      pushFollow(FOLLOW_typeTestExp_in_synpred128_AntlrPilar6582);
      t2 = typeTestExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred128_AntlrPilar

  // $ANTLR start synpred129_AntlrPilar
  public final void synpred129_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.relationalExp_return r2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:655:8: (t= COLON_OP r2= relationalExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:655:8: t= COLON_OP r2= relationalExp
    {
      t = (Token) match(
          input,
          COLON_OP,
          FOLLOW_COLON_OP_in_synpred129_AntlrPilar6666);
      if (state.failed) return;
      pushFollow(FOLLOW_relationalExp_in_synpred129_AntlrPilar6670);
      r2 = relationalExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred129_AntlrPilar

  // $ANTLR start synpred130_AntlrPilar
  public final void synpred130_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.shiftExp_return s2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:661:8: (t= REL_OP s2= shiftExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:661:8: t= REL_OP s2= shiftExp
    {
      t = (Token) match(
          input,
          REL_OP,
          FOLLOW_REL_OP_in_synpred130_AntlrPilar6753);
      if (state.failed) return;
      pushFollow(FOLLOW_shiftExp_in_synpred130_AntlrPilar6757);
      s2 = shiftExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred130_AntlrPilar

  // $ANTLR start synpred131_AntlrPilar
  public final void synpred131_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.shiftExp_return s2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:662:8: (t= '<' s2= shiftExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:662:8: t= '<' s2= shiftExp
    {
      t = (Token) match(input, 167, FOLLOW_167_in_synpred131_AntlrPilar6795);
      if (state.failed) return;
      pushFollow(FOLLOW_shiftExp_in_synpred131_AntlrPilar6799);
      s2 = shiftExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred131_AntlrPilar

  // $ANTLR start synpred132_AntlrPilar
  public final void synpred132_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.shiftExp_return s2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:663:8: (t= '>' s2= shiftExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:663:8: t= '>' s2= shiftExp
    {
      t = (Token) match(input, 168, FOLLOW_168_in_synpred132_AntlrPilar6840);
      if (state.failed) return;
      pushFollow(FOLLOW_shiftExp_in_synpred132_AntlrPilar6844);
      s2 = shiftExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred132_AntlrPilar

  // $ANTLR start synpred133_AntlrPilar
  public final void synpred133_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.additiveExp_return a2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:669:8: (t= SHIFT_OP a2= additiveExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:669:8: t= SHIFT_OP a2= additiveExp
    {
      t = (Token) match(
          input,
          SHIFT_OP,
          FOLLOW_SHIFT_OP_in_synpred133_AntlrPilar6933);
      if (state.failed) return;
      pushFollow(FOLLOW_additiveExp_in_synpred133_AntlrPilar6937);
      a2 = additiveExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred133_AntlrPilar

  // $ANTLR start synpred134_AntlrPilar
  public final void synpred134_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.multiplicativeExp_return m2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:675:8: (t= ADD_OP m2= multiplicativeExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:675:8: t= ADD_OP m2= multiplicativeExp
    {
      t = (Token) match(
          input,
          ADD_OP,
          FOLLOW_ADD_OP_in_synpred134_AntlrPilar7012);
      if (state.failed) return;
      pushFollow(FOLLOW_multiplicativeExp_in_synpred134_AntlrPilar7016);
      m2 = multiplicativeExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred134_AntlrPilar

  // $ANTLR start synpred135_AntlrPilar
  public final void synpred135_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.unaryExp_return u2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:681:8: (t= MUL_OP u2= unaryExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:681:8: t= MUL_OP u2= unaryExp
    {
      t = (Token) match(
          input,
          MUL_OP,
          FOLLOW_MUL_OP_in_synpred135_AntlrPilar7098);
      if (state.failed) return;
      pushFollow(FOLLOW_unaryExp_in_synpred135_AntlrPilar7102);
      u2 = unaryExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred135_AntlrPilar

  // $ANTLR start synpred136_AntlrPilar
  public final void synpred136_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;
    AntlrPilarParser.unaryExp_return u2 = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:682:8: (t= '*' u2= unaryExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:682:8: t= '*' u2= unaryExp
    {
      t = (Token) match(input, 215, FOLLOW_215_in_synpred136_AntlrPilar7140);
      if (state.failed) return;
      pushFollow(FOLLOW_unaryExp_in_synpred136_AntlrPilar7144);
      u2 = unaryExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred136_AntlrPilar

  // $ANTLR start synpred141_AntlrPilar
  public final void synpred141_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:695:4: (t= '(' type ')' primaryExp )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:695:4: t= '(' type ')' primaryExp
    {
      t = (Token) match(input, 169, FOLLOW_169_in_synpred141_AntlrPilar7374);
      if (state.failed) return;
      pushFollow(FOLLOW_type_in_synpred141_AntlrPilar7376);
      type();

      state._fsp--;
      if (state.failed) return;
      match(input, 170, FOLLOW_170_in_synpred141_AntlrPilar7378);
      if (state.failed) return;
      pushFollow(FOLLOW_primaryExp_in_synpred141_AntlrPilar7380);
      primaryExp();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred141_AntlrPilar

  // $ANTLR start synpred142_AntlrPilar
  public final void synpred142_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:701:8: (t= '[' expList ']' )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:701:8: t= '[' expList ']'
    {
      t = (Token) match(input, 202, FOLLOW_202_in_synpred142_AntlrPilar7463);
      if (state.failed) return;
      pushFollow(FOLLOW_expList_in_synpred142_AntlrPilar7465);
      expList();

      state._fsp--;
      if (state.failed) return;
      match(input, 203, FOLLOW_203_in_synpred142_AntlrPilar7467);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred142_AntlrPilar

  // $ANTLR start synpred143_AntlrPilar
  public final void synpred143_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:702:8: (t= '.' ID )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:702:8: t= '.' ID
    {
      t = (Token) match(input, 216, FOLLOW_216_in_synpred143_AntlrPilar7505);
      if (state.failed) return;
      match(input, ID, FOLLOW_ID_in_synpred143_AntlrPilar7507);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred143_AntlrPilar

  // $ANTLR start synpred144_AntlrPilar
  public final void synpred144_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:703:8: ( callArg )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:703:8: callArg
    {
      pushFollow(FOLLOW_callArg_in_synpred144_AntlrPilar7552);
      callArg();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred144_AntlrPilar

  // $ANTLR start synpred146_AntlrPilar
  public final void synpred146_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:713:8: (t= '[' expList ']' )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:713:8: t= '[' expList ']'
    {
      t = (Token) match(input, 202, FOLLOW_202_in_synpred146_AntlrPilar7700);
      if (state.failed) return;
      pushFollow(FOLLOW_expList_in_synpred146_AntlrPilar7702);
      expList();

      state._fsp--;
      if (state.failed) return;
      match(input, 203, FOLLOW_203_in_synpred146_AntlrPilar7704);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred146_AntlrPilar

  // $ANTLR start synpred147_AntlrPilar
  public final void synpred147_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:714:8: (t= '.' ID )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:714:8: t= '.' ID
    {
      t = (Token) match(input, 216, FOLLOW_216_in_synpred147_AntlrPilar7742);
      if (state.failed) return;
      match(input, ID, FOLLOW_ID_in_synpred147_AntlrPilar7744);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred147_AntlrPilar

  // $ANTLR start synpred151_AntlrPilar
  public final void synpred151_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:722:4: ( newListRanged )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:722:4: newListRanged
    {
      pushFollow(FOLLOW_newListRanged_in_synpred151_AntlrPilar7816);
      newListRanged();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred151_AntlrPilar

  // $ANTLR start synpred152_AntlrPilar
  public final void synpred152_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:723:4: ( newList )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:723:4: newList
    {
      pushFollow(FOLLOW_newList_in_synpred152_AntlrPilar7821);
      newList();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred152_AntlrPilar

  // $ANTLR start synpred153_AntlrPilar
  public final void synpred153_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:724:4: ( newMultiArray )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:724:4: newMultiArray
    {
      pushFollow(FOLLOW_newMultiArray_in_synpred153_AntlrPilar7826);
      newMultiArray();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred153_AntlrPilar

  // $ANTLR start synpred154_AntlrPilar
  public final void synpred154_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:725:4: ( newRecord )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:725:4: newRecord
    {
      pushFollow(FOLLOW_newRecord_in_synpred154_AntlrPilar7831);
      newRecord();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred154_AntlrPilar

  // $ANTLR start synpred155_AntlrPilar
  public final void synpred155_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:726:4: ( newSet )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:726:4: newSet
    {
      pushFollow(FOLLOW_newSet_in_synpred155_AntlrPilar7836);
      newSet();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred155_AntlrPilar

  // $ANTLR start synpred156_AntlrPilar
  public final void synpred156_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:727:4: ( newFunction )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:727:4: newFunction
    {
      pushFollow(FOLLOW_newFunction_in_synpred156_AntlrPilar7841);
      newFunction();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred156_AntlrPilar

  // $ANTLR start synpred157_AntlrPilar
  public final void synpred157_AntlrPilar_fragment()
      throws RecognitionException {
    Token t = null;

    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:728:4: (t= '`' type )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:728:4: t= '`' type
    {
      t = (Token) match(input, 217, FOLLOW_217_in_synpred157_AntlrPilar7849);
      if (state.failed) return;
      pushFollow(FOLLOW_type_in_synpred157_AntlrPilar7851);
      type();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred157_AntlrPilar

  // $ANTLR start synpred175_AntlrPilar
  public final void synpred175_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:774:4: ( newMultiArrayTypeFragment )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:774:4: newMultiArrayTypeFragment
    {
      pushFollow(FOLLOW_newMultiArrayTypeFragment_in_synpred175_AntlrPilar8693);
      newMultiArrayTypeFragment();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred175_AntlrPilar

  // $ANTLR start synpred176_AntlrPilar
  public final void synpred176_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:775:4: ( typeFragment )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:775:4: typeFragment
    {
      pushFollow(FOLLOW_typeFragment_in_synpred176_AntlrPilar8699);
      typeFragment();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred176_AntlrPilar

  // $ANTLR start synpred198_AntlrPilar
  public final void synpred198_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:13: ( typeFragment )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:857:13: typeFragment
    {
      pushFollow(FOLLOW_typeFragment_in_synpred198_AntlrPilar9833);
      typeFragment();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred198_AntlrPilar

  // $ANTLR start synpred204_AntlrPilar
  public final void synpred204_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:11: ( '.' ID )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:11: '.' ID
    {
      match(input, 216, FOLLOW_216_in_synpred204_AntlrPilar10106);
      if (state.failed) return;
      match(input, ID, FOLLOW_ID_in_synpred204_AntlrPilar10108);
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred204_AntlrPilar

  // $ANTLR start synpred205_AntlrPilar
  public final void synpred205_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:20: ( typeTuple )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:869:20: typeTuple
    {
      pushFollow(FOLLOW_typeTuple_in_synpred205_AntlrPilar10112);
      typeTuple();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred205_AntlrPilar

  // $ANTLR start synpred207_AntlrPilar
  public final void synpred207_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:870:4: ( procedureType )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:870:4: procedureType
    {
      pushFollow(FOLLOW_procedureType_in_synpred207_AntlrPilar10150);
      procedureType();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred207_AntlrPilar

  // $ANTLR start synpred208_AntlrPilar
  public final void synpred208_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:871:4: ( tupleType )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:871:4: tupleType
    {
      pushFollow(FOLLOW_tupleType_in_synpred208_AntlrPilar10155);
      tupleType();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred208_AntlrPilar

  // $ANTLR start synpred209_AntlrPilar
  public final void synpred209_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:872:4: ( functionType )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:872:4: functionType
    {
      pushFollow(FOLLOW_functionType_in_synpred209_AntlrPilar10160);
      functionType();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred209_AntlrPilar

  // $ANTLR start synpred210_AntlrPilar
  public final void synpred210_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:878:9: ( procedureTypeParamVariable )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:878:9: procedureTypeParamVariable
    {
      pushFollow(FOLLOW_procedureTypeParamVariable_in_synpred210_AntlrPilar10189);
      procedureTypeParamVariable();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred210_AntlrPilar

  // $ANTLR start synpred211_AntlrPilar
  public final void synpred211_AntlrPilar_fragment()
      throws RecognitionException {
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:11: ( ',' typeParam )
    // /Users/robby/Repositories/sireum-parser/sireum-parser/src/main/java/org/sireum/pilar/parser/AntlrPilar.g:880:11: ',' typeParam
    {
      match(input, 172, FOLLOW_172_in_synpred211_AntlrPilar10212);
      if (state.failed) return;
      pushFollow(FOLLOW_typeParam_in_synpred211_AntlrPilar10214);
      typeParam();

      state._fsp--;
      if (state.failed) return;

    }
  }

  // $ANTLR end synpred211_AntlrPilar

  // Delegated rules

  public final boolean synpred207_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred207_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred86_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred86_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred94_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred94_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred73_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred73_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred204_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred204_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred147_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred147_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred157_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred157_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred122_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred122_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred127_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred127_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred85_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred85_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred154_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred154_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred143_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred143_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred123_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred123_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred131_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred131_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred120_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred120_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred89_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred89_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred210_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred210_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred126_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred126_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred151_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred151_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred46_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred46_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred134_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred134_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred156_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred156_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred114_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred114_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred175_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred175_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred205_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred205_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred91_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred91_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred176_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred176_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred155_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred155_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred211_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred211_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred135_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred135_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred198_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred198_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred119_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred119_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred9_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred9_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred128_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred128_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred74_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred74_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred75_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred75_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred141_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred141_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred70_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred70_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred144_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred144_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred129_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred129_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred125_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred125_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred117_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred117_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred12_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred12_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred146_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred146_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred96_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred96_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred132_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred132_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred142_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred142_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred153_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred153_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred208_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred208_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred11_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred11_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred124_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred124_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred92_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred92_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred121_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred121_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred42_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred42_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred152_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred152_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred130_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred130_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred136_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred136_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred133_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred133_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred209_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred209_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  public final boolean synpred93_AntlrPilar() {
    state.backtracking++;
    int start = input.mark();
    try {
      synpred93_AntlrPilar_fragment(); // can never throw exception
    } catch (RecognitionException re) {
      System.err.println("impossible: " + re);
    }
    boolean success = !state.failed;
    input.rewind(start);
    state.backtracking--;
    state.failed = false;
    return success;
  }

  protected DFA9 dfa9 = new DFA9(this);
  protected DFA12 dfa12 = new DFA12(this);
  protected DFA11 dfa11 = new DFA11(this);
  protected DFA60 dfa60 = new DFA60(this);
  protected DFA61 dfa61 = new DFA61(this);
  protected DFA74 dfa74 = new DFA74(this);
  protected DFA77 dfa77 = new DFA77(this);
  protected DFA79 dfa79 = new DFA79(this);
  protected DFA89 dfa89 = new DFA89(this);
  protected DFA112 dfa112 = new DFA112(this);
  protected DFA113 dfa113 = new DFA113(this);
  protected DFA116 dfa116 = new DFA116(this);
  protected DFA117 dfa117 = new DFA117(this);
  protected DFA123 dfa123 = new DFA123(this);
  protected DFA124 dfa124 = new DFA124(this);
  protected DFA146 dfa146 = new DFA146(this);
  protected DFA150 dfa150 = new DFA150(this);
  static final String DFA9_eotS = "\101\uffff";
  static final String DFA9_eofS = "\1\33\100\uffff";
  static final String DFA9_minS = "\1\115\32\0\46\uffff";
  static final String DFA9_maxS = "\1\u00e2\32\0\46\uffff";
  static final String DFA9_acceptS = "\33\uffff\1\2\44\uffff\1\1";
  static final String DFA9_specialS = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"
      + "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"
      + "\46\uffff}>";
  static final String[] DFA9_transitionS = {
      "\1\12\1\14\1\13\56\uffff\1\23\1\33\1\24\2\33\11\uffff\1\3\1"
          + "\4\1\2\1\11\1\20\1\21\1\22\1\15\1\16\1\17\22\uffff\1\33\1\1"
          + "\7\33\1\27\13\33\5\uffff\2\33\1\uffff\5\33\2\uffff\1\32\3\33"
          + "\1\31\1\uffff\2\33\3\uffff\1\5\1\uffff\1\25\1\6\1\7\1\10\1\26"
          + "\1\33\1\30\2\uffff\1\33", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
  static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
  static final char[] DFA9_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA9_minS);
  static final char[] DFA9_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA9_maxS);
  static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
  static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
  static final short[][] DFA9_transition;

  static {
    int numStates = DFA9_transitionS.length;
    DFA9_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
    }
  }

  class DFA9 extends DFA {

    public DFA9(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 9;
      this.eot = DFA9_eot;
      this.eof = DFA9_eof;
      this.min = DFA9_min;
      this.max = DFA9_max;
      this.accept = DFA9_accept;
      this.special = DFA9_special;
      this.transition = DFA9_transition;
    }

    public String getDescription() {
      return "228:13: ( annotationParams )?";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA9_1 = input.LA(1);

          int index9_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA9_2 = input.LA(1);

          int index9_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_2);
          if (s >= 0) return s;
          break;
        case 2:
          int LA9_3 = input.LA(1);

          int index9_3 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_3);
          if (s >= 0) return s;
          break;
        case 3:
          int LA9_4 = input.LA(1);

          int index9_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_4);
          if (s >= 0) return s;
          break;
        case 4:
          int LA9_5 = input.LA(1);

          int index9_5 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_5);
          if (s >= 0) return s;
          break;
        case 5:
          int LA9_6 = input.LA(1);

          int index9_6 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_6);
          if (s >= 0) return s;
          break;
        case 6:
          int LA9_7 = input.LA(1);

          int index9_7 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_7);
          if (s >= 0) return s;
          break;
        case 7:
          int LA9_8 = input.LA(1);

          int index9_8 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_8);
          if (s >= 0) return s;
          break;
        case 8:
          int LA9_9 = input.LA(1);

          int index9_9 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_9);
          if (s >= 0) return s;
          break;
        case 9:
          int LA9_10 = input.LA(1);

          int index9_10 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_10);
          if (s >= 0) return s;
          break;
        case 10:
          int LA9_11 = input.LA(1);

          int index9_11 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_11);
          if (s >= 0) return s;
          break;
        case 11:
          int LA9_12 = input.LA(1);

          int index9_12 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_12);
          if (s >= 0) return s;
          break;
        case 12:
          int LA9_13 = input.LA(1);

          int index9_13 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_13);
          if (s >= 0) return s;
          break;
        case 13:
          int LA9_14 = input.LA(1);

          int index9_14 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_14);
          if (s >= 0) return s;
          break;
        case 14:
          int LA9_15 = input.LA(1);

          int index9_15 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_15);
          if (s >= 0) return s;
          break;
        case 15:
          int LA9_16 = input.LA(1);

          int index9_16 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_16);
          if (s >= 0) return s;
          break;
        case 16:
          int LA9_17 = input.LA(1);

          int index9_17 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_17);
          if (s >= 0) return s;
          break;
        case 17:
          int LA9_18 = input.LA(1);

          int index9_18 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_18);
          if (s >= 0) return s;
          break;
        case 18:
          int LA9_19 = input.LA(1);

          int index9_19 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_19);
          if (s >= 0) return s;
          break;
        case 19:
          int LA9_20 = input.LA(1);

          int index9_20 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_20);
          if (s >= 0) return s;
          break;
        case 20:
          int LA9_21 = input.LA(1);

          int index9_21 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_21);
          if (s >= 0) return s;
          break;
        case 21:
          int LA9_22 = input.LA(1);

          int index9_22 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_22);
          if (s >= 0) return s;
          break;
        case 22:
          int LA9_23 = input.LA(1);

          int index9_23 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_23);
          if (s >= 0) return s;
          break;
        case 23:
          int LA9_24 = input.LA(1);

          int index9_24 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_24);
          if (s >= 0) return s;
          break;
        case 24:
          int LA9_25 = input.LA(1);

          int index9_25 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_25);
          if (s >= 0) return s;
          break;
        case 25:
          int LA9_26 = input.LA(1);

          int index9_26 = input.index();
          input.rewind();
          s = -1;
          if ((synpred9_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 27;
          }

          input.seek(index9_26);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(), 9,
          _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA12_eotS = "\34\uffff";
  static final String DFA12_eofS = "\34\uffff";
  static final String DFA12_minS = "\1\115\1\0\32\uffff";
  static final String DFA12_maxS = "\1\u00df\1\0\32\uffff";
  static final String DFA12_acceptS = "\2\uffff\1\2\30\uffff\1\1";
  static final String DFA12_specialS = "\1\uffff\1\0\32\uffff}>";
  static final String[] DFA12_transitionS = {
      "\3\2\56\uffff\1\2\1\uffff\1\2\13\uffff\12\2\23\uffff\1\1\7\uffff"
          + "\1\2\32\uffff\1\2\3\uffff\1\2\6\uffff\1\2\1\uffff\5\2\1\uffff"
          + "\1\2", "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
  static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
  static final char[] DFA12_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA12_minS);
  static final char[] DFA12_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA12_maxS);
  static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
  static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
  static final short[][] DFA12_transition;

  static {
    int numStates = DFA12_transitionS.length;
    DFA12_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
    }
  }

  class DFA12 extends DFA {

    public DFA12(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 12;
      this.eot = DFA12_eot;
      this.eof = DFA12_eof;
      this.min = DFA12_min;
      this.max = DFA12_max;
      this.accept = DFA12_accept;
      this.special = DFA12_special;
      this.transition = DFA12_transition;
    }

    public String getDescription() {
      return "231:1: annotationParams : (t= '(' annotationParam ( ',' annotationParam )* ')' -> ^( LIST[$t] ( annotationParam )+ ) | exp ( ',' exp )* -> ^( LIST ( exp )+ ) );";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA12_1 = input.LA(1);

          int index12_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred11_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index12_1);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          12, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA11_eotS = "\101\uffff";
  static final String DFA11_eofS = "\1\1\100\uffff";
  static final String DFA11_minS = "\1\115\15\uffff\1\0\62\uffff";
  static final String DFA11_maxS = "\1\u00e2\15\uffff\1\0\62\uffff";
  static final String DFA11_acceptS = "\1\uffff\1\2\76\uffff\1\1";
  static final String DFA11_specialS = "\16\uffff\1\0\62\uffff}>";
  static final String[] DFA11_transitionS = {
      "\3\1\56\uffff\5\1\11\uffff\12\1\22\uffff\4\1\1\16\20\1\5\uffff"
          + "\2\1\1\uffff\5\1\2\uffff\5\1\1\uffff\2\1\3\uffff\1\1\1\uffff"
          + "\7\1\2\uffff\1\1", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
  static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
  static final char[] DFA11_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA11_minS);
  static final char[] DFA11_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA11_maxS);
  static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
  static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
  static final short[][] DFA11_transition;

  static {
    int numStates = DFA11_transitionS.length;
    DFA11_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
    }
  }

  class DFA11 extends DFA {

    public DFA11(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 11;
      this.eot = DFA11_eot;
      this.eof = DFA11_eof;
      this.min = DFA11_min;
      this.max = DFA11_max;
      this.accept = DFA11_accept;
      this.special = DFA11_special;
      this.transition = DFA11_transition;
    }

    public String getDescription() {
      return "()* loopback of 234:8: ( ',' exp )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA11_14 = input.LA(1);

          int index11_14 = input.index();
          input.rewind();
          s = -1;
          if ((synpred12_AntlrPilar())) {
            s = 64;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index11_14);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          11, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA60_eotS = "\12\uffff";
  static final String DFA60_eofS = "\12\uffff";
  static final String DFA60_minS = "\1\176\5\0\4\uffff";
  static final String DFA60_maxS = "\1\u00b9\5\0\4\uffff";
  static final String DFA60_acceptS = "\6\uffff\1\2\2\uffff\1\1";
  static final String DFA60_specialS = "\1\uffff\1\0\1\1\1\2\1\3\1\4\4\uffff}>";
  static final String[] DFA60_transitionS = {
      "\1\2\1\1\51\uffff\1\3\3\6\4\uffff\1\4\7\uffff\1\5", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "", "", "", "" };

  static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
  static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
  static final char[] DFA60_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA60_minS);
  static final char[] DFA60_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA60_maxS);
  static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
  static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
  static final short[][] DFA60_transition;

  static {
    int numStates = DFA60_transitionS.length;
    DFA60_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
    }
  }

  class DFA60 extends DFA {

    public DFA60(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 60;
      this.eot = DFA60_eot;
      this.eof = DFA60_eof;
      this.min = DFA60_min;
      this.max = DFA60_max;
      this.accept = DFA60_accept;
      this.special = DFA60_special;
      this.transition = DFA60_transition;
    }

    public String getDescription() {
      return "428:1: extParamList : ( extParamVariable -> ^( LIST ( extParamVariable )? ) | extParam ( ',' extParam )* ( extParamVariable )? -> ^( LIST ( extParam )+ ( extParamVariable )? ) );";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA60_1 = input.LA(1);

          int index60_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred70_AntlrPilar())) {
            s = 9;
          }

          else if ((true)) {
            s = 6;
          }

          input.seek(index60_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA60_2 = input.LA(1);

          int index60_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred70_AntlrPilar())) {
            s = 9;
          }

          else if ((true)) {
            s = 6;
          }

          input.seek(index60_2);
          if (s >= 0) return s;
          break;
        case 2:
          int LA60_3 = input.LA(1);

          int index60_3 = input.index();
          input.rewind();
          s = -1;
          if ((synpred70_AntlrPilar())) {
            s = 9;
          }

          else if ((true)) {
            s = 6;
          }

          input.seek(index60_3);
          if (s >= 0) return s;
          break;
        case 3:
          int LA60_4 = input.LA(1);

          int index60_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred70_AntlrPilar())) {
            s = 9;
          }

          else if ((true)) {
            s = 6;
          }

          input.seek(index60_4);
          if (s >= 0) return s;
          break;
        case 4:
          int LA60_5 = input.LA(1);

          int index60_5 = input.index();
          input.rewind();
          s = -1;
          if ((synpred70_AntlrPilar())) {
            s = 9;
          }

          else if ((true)) {
            s = 6;
          }

          input.seek(index60_5);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          60, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA61_eotS = "\13\uffff";
  static final String DFA61_eofS = "\1\5\12\uffff";
  static final String DFA61_minS = "\1\176\4\0\6\uffff";
  static final String DFA61_maxS = "\1\u00b9\4\0\6\uffff";
  static final String DFA61_acceptS = "\5\uffff\1\2\4\uffff\1\1";
  static final String DFA61_specialS = "\1\uffff\1\0\1\1\1\2\1\3\6\uffff}>";
  static final String[] DFA61_transitionS = {
      "\1\2\1\1\51\uffff\1\3\3\5\4\uffff\1\4\7\uffff\1\5", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "", "", "", "", "", "" };

  static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
  static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
  static final char[] DFA61_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA61_minS);
  static final char[] DFA61_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA61_maxS);
  static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
  static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
  static final short[][] DFA61_transition;

  static {
    int numStates = DFA61_transitionS.length;
    DFA61_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
    }
  }

  class DFA61 extends DFA {

    public DFA61(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 61;
      this.eot = DFA61_eot;
      this.eof = DFA61_eof;
      this.min = DFA61_min;
      this.max = DFA61_max;
      this.accept = DFA61_accept;
      this.special = DFA61_special;
      this.transition = DFA61_transition;
    }

    public String getDescription() {
      return "435:4: ( type )?";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA61_1 = input.LA(1);

          int index61_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred73_AntlrPilar())) {
            s = 10;
          }

          else if ((true)) {
            s = 5;
          }

          input.seek(index61_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA61_2 = input.LA(1);

          int index61_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred73_AntlrPilar())) {
            s = 10;
          }

          else if ((true)) {
            s = 5;
          }

          input.seek(index61_2);
          if (s >= 0) return s;
          break;
        case 2:
          int LA61_3 = input.LA(1);

          int index61_3 = input.index();
          input.rewind();
          s = -1;
          if ((synpred73_AntlrPilar())) {
            s = 10;
          }

          else if ((true)) {
            s = 5;
          }

          input.seek(index61_3);
          if (s >= 0) return s;
          break;
        case 3:
          int LA61_4 = input.LA(1);

          int index61_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred73_AntlrPilar())) {
            s = 10;
          }

          else if ((true)) {
            s = 5;
          }

          input.seek(index61_4);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          61, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA74_eotS = "\50\uffff";
  static final String DFA74_eofS = "\1\34\47\uffff";
  static final String DFA74_minS = "\1\115\32\0\15\uffff";
  static final String DFA74_maxS = "\1\u00df\32\0\15\uffff";
  static final String DFA74_acceptS = "\33\uffff\1\1\1\2\13\uffff";
  static final String DFA74_specialS = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"
      + "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"
      + "\15\uffff}>";
  static final String[] DFA74_transitionS = {
      "\1\12\1\14\1\13\56\uffff\1\23\1\uffff\1\24\1\34\12\uffff\1\2"
          + "\1\3\1\1\1\11\1\20\1\21\1\22\1\15\1\16\1\17\23\uffff\1\5\7\uffff"
          + "\1\27\1\34\17\uffff\1\34\1\uffff\1\33\3\34\1\uffff\1\34\2\uffff"
          + "\1\32\3\34\1\31\2\uffff\1\34\3\uffff\1\4\1\uffff\1\25\1\6\1"
          + "\7\1\10\1\26\1\uffff\1\30", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "", "", "",
      "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
  static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
  static final char[] DFA74_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA74_minS);
  static final char[] DFA74_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA74_maxS);
  static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
  static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
  static final short[][] DFA74_transition;

  static {
    int numStates = DFA74_transitionS.length;
    DFA74_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
    }
  }

  class DFA74 extends DFA {

    public DFA74(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 74;
      this.eot = DFA74_eot;
      this.eof = DFA74_eof;
      this.min = DFA74_min;
      this.max = DFA74_max;
      this.accept = DFA74_accept;
      this.special = DFA74_special;
      this.transition = DFA74_transition;
    }

    public String getDescription() {
      return "470:31: ( guard )?";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA74_1 = input.LA(1);

          int index74_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA74_2 = input.LA(1);

          int index74_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_2);
          if (s >= 0) return s;
          break;
        case 2:
          int LA74_3 = input.LA(1);

          int index74_3 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_3);
          if (s >= 0) return s;
          break;
        case 3:
          int LA74_4 = input.LA(1);

          int index74_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_4);
          if (s >= 0) return s;
          break;
        case 4:
          int LA74_5 = input.LA(1);

          int index74_5 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_5);
          if (s >= 0) return s;
          break;
        case 5:
          int LA74_6 = input.LA(1);

          int index74_6 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_6);
          if (s >= 0) return s;
          break;
        case 6:
          int LA74_7 = input.LA(1);

          int index74_7 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_7);
          if (s >= 0) return s;
          break;
        case 7:
          int LA74_8 = input.LA(1);

          int index74_8 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_8);
          if (s >= 0) return s;
          break;
        case 8:
          int LA74_9 = input.LA(1);

          int index74_9 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_9);
          if (s >= 0) return s;
          break;
        case 9:
          int LA74_10 = input.LA(1);

          int index74_10 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_10);
          if (s >= 0) return s;
          break;
        case 10:
          int LA74_11 = input.LA(1);

          int index74_11 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_11);
          if (s >= 0) return s;
          break;
        case 11:
          int LA74_12 = input.LA(1);

          int index74_12 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_12);
          if (s >= 0) return s;
          break;
        case 12:
          int LA74_13 = input.LA(1);

          int index74_13 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_13);
          if (s >= 0) return s;
          break;
        case 13:
          int LA74_14 = input.LA(1);

          int index74_14 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_14);
          if (s >= 0) return s;
          break;
        case 14:
          int LA74_15 = input.LA(1);

          int index74_15 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_15);
          if (s >= 0) return s;
          break;
        case 15:
          int LA74_16 = input.LA(1);

          int index74_16 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_16);
          if (s >= 0) return s;
          break;
        case 16:
          int LA74_17 = input.LA(1);

          int index74_17 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_17);
          if (s >= 0) return s;
          break;
        case 17:
          int LA74_18 = input.LA(1);

          int index74_18 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_18);
          if (s >= 0) return s;
          break;
        case 18:
          int LA74_19 = input.LA(1);

          int index74_19 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_19);
          if (s >= 0) return s;
          break;
        case 19:
          int LA74_20 = input.LA(1);

          int index74_20 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_20);
          if (s >= 0) return s;
          break;
        case 20:
          int LA74_21 = input.LA(1);

          int index74_21 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_21);
          if (s >= 0) return s;
          break;
        case 21:
          int LA74_22 = input.LA(1);

          int index74_22 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_22);
          if (s >= 0) return s;
          break;
        case 22:
          int LA74_23 = input.LA(1);

          int index74_23 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_23);
          if (s >= 0) return s;
          break;
        case 23:
          int LA74_24 = input.LA(1);

          int index74_24 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_24);
          if (s >= 0) return s;
          break;
        case 24:
          int LA74_25 = input.LA(1);

          int index74_25 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_25);
          if (s >= 0) return s;
          break;
        case 25:
          int LA74_26 = input.LA(1);

          int index74_26 = input.index();
          input.rewind();
          s = -1;
          if ((synpred86_AntlrPilar())) {
            s = 27;
          }

          else if ((true)) {
            s = 28;
          }

          input.seek(index74_26);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          74, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA77_eotS = "\47\uffff";
  static final String DFA77_eofS = "\1\1\46\uffff";
  static final String DFA77_minS = "\1\115\2\uffff\2\0\42\uffff";
  static final String DFA77_maxS = "\1\u00df\2\uffff\2\0\42\uffff";
  static final String DFA77_acceptS = "\1\uffff\1\2\11\uffff\1\1\33\uffff";
  static final String DFA77_specialS = "\3\uffff\1\0\1\1\42\uffff}>";
  static final String[] DFA77_transitionS = {
      "\3\13\56\uffff\1\13\1\uffff\1\13\1\1\12\uffff\12\13\23\uffff"
          + "\1\13\7\uffff\1\13\1\1\17\uffff\1\1\2\uffff\3\13\1\uffff\1\13"
          + "\2\uffff\1\4\3\1\1\3\2\uffff\1\1\3\uffff\1\13\1\uffff\5\13\1"
          + "\uffff\1\13", "", "", "\1\uffff", "\1\uffff", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
  static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
  static final char[] DFA77_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA77_minS);
  static final char[] DFA77_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA77_maxS);
  static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
  static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
  static final short[][] DFA77_transition;

  static {
    int numStates = DFA77_transitionS.length;
    DFA77_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
    }
  }

  class DFA77 extends DFA {

    public DFA77(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 77;
      this.eot = DFA77_eot;
      this.eof = DFA77_eof;
      this.min = DFA77_min;
      this.max = DFA77_max;
      this.accept = DFA77_accept;
      this.special = DFA77_special;
      this.transition = DFA77_transition;
    }

    public String getDescription() {
      return "()* loopback of 488:4: ( action )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA77_3 = input.LA(1);

          int index77_3 = input.index();
          input.rewind();
          s = -1;
          if ((synpred89_AntlrPilar())) {
            s = 11;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index77_3);
          if (s >= 0) return s;
          break;
        case 1:
          int LA77_4 = input.LA(1);

          int index77_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred89_AntlrPilar())) {
            s = 11;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index77_4);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          77, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA79_eotS = "\45\uffff";
  static final String DFA79_eofS = "\45\uffff";
  static final String DFA79_minS = "\1\115\2\0\1\uffff\32\0\7\uffff";
  static final String DFA79_maxS = "\1\u00df\2\0\1\uffff\32\0\7\uffff";
  static final String DFA79_acceptS = "\3\uffff\1\5\32\uffff\1\7\1\1\1\2\1\3\1\4\1\6\1\10";
  static final String DFA79_specialS = "\1\uffff\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"
      + "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"
      + "\1\30\1\31\1\32\1\33\7\uffff}>";
  static final String[] DFA79_transitionS = {
      "\1\15\1\17\1\16\56\uffff\1\26\1\uffff\1\27\13\uffff\1\5\1\6"
          + "\1\4\1\14\1\23\1\24\1\25\1\20\1\21\1\22\23\uffff\1\10\7\uffff"
          + "\1\32\23\uffff\1\1\1\2\1\3\1\uffff\1\36\2\uffff\1\35\3\uffff"
          + "\1\34\6\uffff\1\7\1\uffff\1\30\1\11\1\12\1\13\1\31\1\uffff\1"
          + "\33", "\1\uffff", "\1\uffff", "", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "", "", "", "", "", "", "" };

  static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
  static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
  static final char[] DFA79_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA79_minS);
  static final char[] DFA79_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA79_maxS);
  static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
  static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
  static final short[][] DFA79_transition;

  static {
    int numStates = DFA79_transitionS.length;
    DFA79_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
    }
  }

  class DFA79 extends DFA {

    public DFA79(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 79;
      this.eot = DFA79_eot;
      this.eof = DFA79_eof;
      this.min = DFA79_min;
      this.max = DFA79_max;
      this.accept = DFA79_accept;
      this.special = DFA79_special;
      this.transition = DFA79_transition;
    }

    public String getDescription() {
      return "491:1: action : (t= 'assert' '(' e1= exp ',' e2= exp ')' annotationList ';' -> ^( ASSERTM[$t] $e1 $e2 annotationList ) | t= 'assert' exp annotationList ';' -> ^( ASSERT[$t] exp annotationList ) | t= 'assume' '(' e1= exp ',' e2= exp ')' annotationList ';' -> ^( ASSUMEM[$t] $e1 $e2 annotationList ) | t= 'assume' exp annotationList ';' -> ^( ASSUME[$t] exp annotationList ) | t= 'throw' exp annotationList ';' -> ^( THROW[$t] exp annotationList ) | assignment | startThread | extCall );";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA79_1 = input.LA(1);

          int index79_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred91_AntlrPilar())) {
            s = 31;
          }

          else if ((synpred92_AntlrPilar())) {
            s = 32;
          }

          input.seek(index79_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA79_2 = input.LA(1);

          int index79_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred93_AntlrPilar())) {
            s = 33;
          }

          else if ((synpred94_AntlrPilar())) {
            s = 34;
          }

          input.seek(index79_2);
          if (s >= 0) return s;
          break;
        case 2:
          int LA79_4 = input.LA(1);

          int index79_4 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_4);
          if (s >= 0) return s;
          break;
        case 3:
          int LA79_5 = input.LA(1);

          int index79_5 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_5);
          if (s >= 0) return s;
          break;
        case 4:
          int LA79_6 = input.LA(1);

          int index79_6 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_6);
          if (s >= 0) return s;
          break;
        case 5:
          int LA79_7 = input.LA(1);

          int index79_7 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_7);
          if (s >= 0) return s;
          break;
        case 6:
          int LA79_8 = input.LA(1);

          int index79_8 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_8);
          if (s >= 0) return s;
          break;
        case 7:
          int LA79_9 = input.LA(1);

          int index79_9 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_9);
          if (s >= 0) return s;
          break;
        case 8:
          int LA79_10 = input.LA(1);

          int index79_10 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_10);
          if (s >= 0) return s;
          break;
        case 9:
          int LA79_11 = input.LA(1);

          int index79_11 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_11);
          if (s >= 0) return s;
          break;
        case 10:
          int LA79_12 = input.LA(1);

          int index79_12 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_12);
          if (s >= 0) return s;
          break;
        case 11:
          int LA79_13 = input.LA(1);

          int index79_13 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_13);
          if (s >= 0) return s;
          break;
        case 12:
          int LA79_14 = input.LA(1);

          int index79_14 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_14);
          if (s >= 0) return s;
          break;
        case 13:
          int LA79_15 = input.LA(1);

          int index79_15 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_15);
          if (s >= 0) return s;
          break;
        case 14:
          int LA79_16 = input.LA(1);

          int index79_16 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_16);
          if (s >= 0) return s;
          break;
        case 15:
          int LA79_17 = input.LA(1);

          int index79_17 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_17);
          if (s >= 0) return s;
          break;
        case 16:
          int LA79_18 = input.LA(1);

          int index79_18 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_18);
          if (s >= 0) return s;
          break;
        case 17:
          int LA79_19 = input.LA(1);

          int index79_19 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_19);
          if (s >= 0) return s;
          break;
        case 18:
          int LA79_20 = input.LA(1);

          int index79_20 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_20);
          if (s >= 0) return s;
          break;
        case 19:
          int LA79_21 = input.LA(1);

          int index79_21 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_21);
          if (s >= 0) return s;
          break;
        case 20:
          int LA79_22 = input.LA(1);

          int index79_22 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_22);
          if (s >= 0) return s;
          break;
        case 21:
          int LA79_23 = input.LA(1);

          int index79_23 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_23);
          if (s >= 0) return s;
          break;
        case 22:
          int LA79_24 = input.LA(1);

          int index79_24 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_24);
          if (s >= 0) return s;
          break;
        case 23:
          int LA79_25 = input.LA(1);

          int index79_25 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_25);
          if (s >= 0) return s;
          break;
        case 24:
          int LA79_26 = input.LA(1);

          int index79_26 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_26);
          if (s >= 0) return s;
          break;
        case 25:
          int LA79_27 = input.LA(1);

          int index79_27 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_27);
          if (s >= 0) return s;
          break;
        case 26:
          int LA79_28 = input.LA(1);

          int index79_28 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_28);
          if (s >= 0) return s;
          break;
        case 27:
          int LA79_29 = input.LA(1);

          int index79_29 = input.index();
          input.rewind();
          s = -1;
          if ((synpred96_AntlrPilar())) {
            s = 35;
          }

          else if ((true)) {
            s = 36;
          }

          input.seek(index79_29);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          79, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA89_eotS = "\6\uffff";
  static final String DFA89_eofS = "\6\uffff";
  static final String DFA89_minS = "\3\115\1\uffff\1\176\1\uffff";
  static final String DFA89_maxS = "\1\u00df\1\u00e1\1\u00df\1\uffff\1\u0080\1\uffff";
  static final String DFA89_acceptS = "\3\uffff\1\2\1\uffff\1\1";
  static final String DFA89_specialS = "\6\uffff}>";
  static final String[] DFA89_transitionS = {
      "\3\3\56\uffff\1\1\1\uffff\1\2\13\uffff\12\3\23\uffff\1\3\7\uffff"
          + "\1\3\32\uffff\1\3\3\uffff\1\3\6\uffff\1\3\1\uffff\5\3\1\uffff"
          + "\1\3",
      "\3\3\56\uffff\1\3\1\uffff\1\3\2\uffff\13\3\1\uffff\7\3\21\uffff"
          + "\3\3\1\uffff\1\3\1\5\2\uffff\1\3\1\uffff\1\3\26\uffff\1\5\1"
          + "\uffff\1\3\12\uffff\11\3\1\uffff\1\3\1\uffff\1\4",
      "\3\3\56\uffff\1\3\1\uffff\1\3\2\uffff\13\3\1\uffff\7\3\21\uffff"
          + "\3\3\1\uffff\1\3\1\5\2\uffff\1\3\1\uffff\1\3\26\uffff\1\5\1"
          + "\uffff\1\3\12\uffff\11\3\1\uffff\1\3", "", "\1\1\1\uffff\1\2", "" };

  static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
  static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
  static final char[] DFA89_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA89_minS);
  static final char[] DFA89_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA89_maxS);
  static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
  static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
  static final short[][] DFA89_transition;

  static {
    int numStates = DFA89_transitionS.length;
    DFA89_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
    }
  }

  class DFA89 extends DFA {

    public DFA89(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 89;
      this.eot = DFA89_eot;
      this.eof = DFA89_eof;
      this.min = DFA89_min;
      this.max = DFA89_max;
      this.accept = DFA89_accept;
      this.special = DFA89_special;
      this.transition = DFA89_transition;
    }

    public String getDescription() {
      return "538:4: ( nameExp ( ',' nameExp )* ':=' )?";
    }
  }

  static final String DFA112_eotS = "\26\uffff";
  static final String DFA112_eofS = "\26\uffff";
  static final String DFA112_minS = "\1\115\1\0\24\uffff";
  static final String DFA112_maxS = "\1\u00df\1\0\24\uffff";
  static final String DFA112_acceptS = "\2\uffff\1\2\22\uffff\1\1";
  static final String DFA112_specialS = "\1\uffff\1\0\24\uffff}>";
  static final String[] DFA112_transitionS = {
      "\3\2\56\uffff\1\2\1\uffff\1\2\16\uffff\7\2\23\uffff\1\1\7\uffff"
          + "\1\2\47\uffff\5\2\1\uffff\1\2", "\1\uffff", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
  static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
  static final char[] DFA112_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA112_minS);
  static final char[] DFA112_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA112_maxS);
  static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
  static final short[] DFA112_special = DFA
      .unpackEncodedString(DFA112_specialS);
  static final short[][] DFA112_transition;

  static {
    int numStates = DFA112_transitionS.length;
    DFA112_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
    }
  }

  class DFA112 extends DFA {

    public DFA112(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 112;
      this.eot = DFA112_eot;
      this.eof = DFA112_eof;
      this.min = DFA112_min;
      this.max = DFA112_max;
      this.accept = DFA112_accept;
      this.special = DFA112_special;
      this.transition = DFA112_transition;
    }

    public String getDescription() {
      return "694:1: castExp : (t= '(' type ')' primaryExp -> ^( CAST[$t] type primaryExp ) | primaryExp );";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA112_1 = input.LA(1);

          int index112_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred141_AntlrPilar())) {
            s = 21;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index112_1);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          112, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA113_eotS = "\126\uffff";
  static final String DFA113_eofS = "\1\1\125\uffff";
  static final String DFA113_minS = "\1\115\35\uffff\1\0\6\uffff\2\0\6\uffff\21\0\22\uffff\2\0\4\uffff";
  static final String DFA113_maxS = "\1\u00e2\35\uffff\1\0\6\uffff\2\0\6\uffff\21\0\22\uffff\2\0\4\uffff";
  static final String DFA113_acceptS = "\1\uffff\1\4\121\uffff\1\3\1\1\1\2";
  static final String DFA113_specialS = "\36\uffff\1\0\6\uffff\1\1\1\2\6\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1"
      + "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\22\uffff\1"
      + "\24\1\25\4\uffff}>";
  static final String[] DFA113_transitionS = {
      "\1\61\1\63\1\62\56\uffff\1\45\1\1\1\72\16\1\1\60\1\67\1\70\1"
          + "\71\1\64\1\65\1\66\21\uffff\2\1\1\46\7\1\1\36\13\1\5\uffff\10"
          + "\1\1\120\15\1\1\121\1\73\1\55\1\56\1\57\1\74\1\1\1\75\1\1\1"
          + "\uffff\1\1", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "\1\uffff", "", "", "", "", "", "", "\1\uffff", "\1\uffff", "", "", "",
      "", "", "", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "\1\uffff", "\1\uffff", "", "", "", "" };

  static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
  static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
  static final char[] DFA113_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA113_minS);
  static final char[] DFA113_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA113_maxS);
  static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
  static final short[] DFA113_special = DFA
      .unpackEncodedString(DFA113_specialS);
  static final short[][] DFA113_transition;

  static {
    int numStates = DFA113_transitionS.length;
    DFA113_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
    }
  }

  class DFA113 extends DFA {

    public DFA113(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 113;
      this.eot = DFA113_eot;
      this.eof = DFA113_eof;
      this.min = DFA113_min;
      this.max = DFA113_max;
      this.accept = DFA113_accept;
      this.special = DFA113_special;
      this.transition = DFA113_transition;
    }

    public String getDescription() {
      return "()* loopback of 701:6: (t= '[' expList ']' -> ^( INDEXING[$t] $primaryExp expList ) | t= '.' ID -> ^( ACCESS[$t] $primaryExp ID ) | callArg -> ^( CALL $primaryExp callArg ) )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA113_30 = input.LA(1);

          int index113_30 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_30);
          if (s >= 0) return s;
          break;
        case 1:
          int LA113_37 = input.LA(1);

          int index113_37 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_37);
          if (s >= 0) return s;
          break;
        case 2:
          int LA113_38 = input.LA(1);

          int index113_38 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_38);
          if (s >= 0) return s;
          break;
        case 3:
          int LA113_45 = input.LA(1);

          int index113_45 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_45);
          if (s >= 0) return s;
          break;
        case 4:
          int LA113_46 = input.LA(1);

          int index113_46 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_46);
          if (s >= 0) return s;
          break;
        case 5:
          int LA113_47 = input.LA(1);

          int index113_47 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_47);
          if (s >= 0) return s;
          break;
        case 6:
          int LA113_48 = input.LA(1);

          int index113_48 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_48);
          if (s >= 0) return s;
          break;
        case 7:
          int LA113_49 = input.LA(1);

          int index113_49 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_49);
          if (s >= 0) return s;
          break;
        case 8:
          int LA113_50 = input.LA(1);

          int index113_50 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_50);
          if (s >= 0) return s;
          break;
        case 9:
          int LA113_51 = input.LA(1);

          int index113_51 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_51);
          if (s >= 0) return s;
          break;
        case 10:
          int LA113_52 = input.LA(1);

          int index113_52 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_52);
          if (s >= 0) return s;
          break;
        case 11:
          int LA113_53 = input.LA(1);

          int index113_53 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_53);
          if (s >= 0) return s;
          break;
        case 12:
          int LA113_54 = input.LA(1);

          int index113_54 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_54);
          if (s >= 0) return s;
          break;
        case 13:
          int LA113_55 = input.LA(1);

          int index113_55 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_55);
          if (s >= 0) return s;
          break;
        case 14:
          int LA113_56 = input.LA(1);

          int index113_56 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_56);
          if (s >= 0) return s;
          break;
        case 15:
          int LA113_57 = input.LA(1);

          int index113_57 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_57);
          if (s >= 0) return s;
          break;
        case 16:
          int LA113_58 = input.LA(1);

          int index113_58 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_58);
          if (s >= 0) return s;
          break;
        case 17:
          int LA113_59 = input.LA(1);

          int index113_59 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_59);
          if (s >= 0) return s;
          break;
        case 18:
          int LA113_60 = input.LA(1);

          int index113_60 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_60);
          if (s >= 0) return s;
          break;
        case 19:
          int LA113_61 = input.LA(1);

          int index113_61 = input.index();
          input.rewind();
          s = -1;
          if ((synpred144_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_61);
          if (s >= 0) return s;
          break;
        case 20:
          int LA113_80 = input.LA(1);

          int index113_80 = input.index();
          input.rewind();
          s = -1;
          if ((synpred142_AntlrPilar())) {
            s = 84;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_80);
          if (s >= 0) return s;
          break;
        case 21:
          int LA113_81 = input.LA(1);

          int index113_81 = input.index();
          input.rewind();
          s = -1;
          if ((synpred143_AntlrPilar())) {
            s = 85;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index113_81);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          113, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA116_eotS = "\34\uffff";
  static final String DFA116_eofS = "\34\uffff";
  static final String DFA116_minS = "\1\115\20\uffff\1\0\12\uffff";
  static final String DFA116_maxS = "\1\u00df\20\uffff\1\0\12\uffff";
  static final String DFA116_acceptS = "\1\uffff\1\1\14\uffff\1\2\1\3\2\uffff\1\13\1\14\1\15\1\4\1\5\1\6"
      + "\1\7\1\10\1\11\1\12";
  static final String DFA116_specialS = "\21\uffff\1\0\12\uffff}>";
  static final String[] DFA116_transitionS = {
      "\3\1\56\uffff\1\17\1\uffff\1\17\16\uffff\7\1\23\uffff\1\16\7"
          + "\uffff\1\23\47\uffff\1\21\3\1\1\22\1\uffff\1\24", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "\1\uffff", "", "", "",
      "", "", "", "", "", "", "" };

  static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
  static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
  static final char[] DFA116_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA116_minS);
  static final char[] DFA116_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA116_maxS);
  static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
  static final short[] DFA116_special = DFA
      .unpackEncodedString(DFA116_specialS);
  static final short[][] DFA116_transition;

  static {
    int numStates = DFA116_transitionS.length;
    DFA116_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
    }
  }

  class DFA116 extends DFA {

    public DFA116(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 116;
      this.eot = DFA116_eot;
      this.eof = DFA116_eof;
      this.min = DFA116_min;
      this.max = DFA116_max;
      this.accept = DFA116_accept;
      this.special = DFA116_special;
      this.transition = DFA116_transition;
    }

    public String getDescription() {
      return "718:1: primary : ( literal | tuple | nameExp | newListRanged | newList | newMultiArray | newRecord | newSet | newFunction | t= '`' type -> ^( TYPE_EXP[$t] type ) | newExp | funExp | letExp );";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA116_17 = input.LA(1);

          int index116_17 = input.index();
          input.rewind();
          s = -1;
          if ((synpred151_AntlrPilar())) {
            s = 21;
          }

          else if ((synpred152_AntlrPilar())) {
            s = 22;
          }

          else if ((synpred153_AntlrPilar())) {
            s = 23;
          }

          else if ((synpred154_AntlrPilar())) {
            s = 24;
          }

          else if ((synpred155_AntlrPilar())) {
            s = 25;
          }

          else if ((synpred156_AntlrPilar())) {
            s = 26;
          }

          else if ((synpred157_AntlrPilar())) {
            s = 27;
          }

          input.seek(index116_17);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          116, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA117_eotS = "\5\uffff";
  static final String DFA117_eofS = "\1\uffff\1\4\3\uffff";
  static final String DFA117_minS = "\1\176\1\115\1\uffff\1\176\1\uffff";
  static final String DFA117_maxS = "\1\u0080\1\u00e2\1\uffff\1\u0080\1\uffff";
  static final String DFA117_acceptS = "\2\uffff\1\2\1\uffff\1\1";
  static final String DFA117_specialS = "\5\uffff}>";
  static final String[] DFA117_transitionS = { "\1\1\1\uffff\1\2",
      "\3\4\56\uffff\30\4\21\uffff\26\4\5\uffff\37\4\1\3\1\4", "",
      "\1\1\1\uffff\1\2", "" };

  static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
  static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
  static final char[] DFA117_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA117_minS);
  static final char[] DFA117_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA117_maxS);
  static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
  static final short[] DFA117_special = DFA
      .unpackEncodedString(DFA117_specialS);
  static final short[][] DFA117_transition;

  static {
    int numStates = DFA117_transitionS.length;
    DFA117_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
    }
  }

  class DFA117 extends DFA {

    public DFA117(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 117;
      this.eot = DFA117_eot;
      this.eof = DFA117_eof;
      this.min = DFA117_min;
      this.max = DFA117_max;
      this.accept = DFA117_accept;
      this.special = DFA117_special;
      this.transition = DFA117_transition;
    }

    public String getDescription() {
      return "734:1: nameExp : ( name -> ^( NAME_EXP name ) | globalName -> ^( NAME_EXP globalName ) );";
    }
  }

  static final String DFA123_eotS = "\124\uffff";
  static final String DFA123_eofS = "\1\1\123\uffff";
  static final String DFA123_minS = "\1\115\1\uffff\1\0\121\uffff";
  static final String DFA123_maxS = "\1\u00e2\1\uffff\1\0\121\uffff";
  static final String DFA123_acceptS = "\1\uffff\1\2\121\uffff\1\1";
  static final String DFA123_specialS = "\2\uffff\1\0\121\uffff}>";
  static final String[] DFA123_transitionS = {
      "\3\1\56\uffff\30\1\21\uffff\26\1\5\uffff\10\1\1\2\26\1\1\uffff" + "\1\1",
      "", "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
  static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
  static final char[] DFA123_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA123_minS);
  static final char[] DFA123_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA123_maxS);
  static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
  static final short[] DFA123_special = DFA
      .unpackEncodedString(DFA123_specialS);
  static final short[][] DFA123_transition;

  static {
    int numStates = DFA123_transitionS.length;
    DFA123_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
    }
  }

  class DFA123 extends DFA {

    public DFA123(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 123;
      this.eot = DFA123_eot;
      this.eof = DFA123_eof;
      this.min = DFA123_min;
      this.max = DFA123_max;
      this.accept = DFA123_accept;
      this.special = DFA123_special;
      this.transition = DFA123_transition;
    }

    public String getDescription() {
      return "()* loopback of 774:4: ( newMultiArrayTypeFragment )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA123_2 = input.LA(1);

          int index123_2 = input.index();
          input.rewind();
          s = -1;
          if ((synpred175_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index123_2);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          123, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA124_eotS = "\124\uffff";
  static final String DFA124_eofS = "\1\2\123\uffff";
  static final String DFA124_minS = "\1\115\1\0\23\uffff\1\0\2\uffff\1\0\73\uffff";
  static final String DFA124_maxS = "\1\u00e2\1\0\23\uffff\1\0\2\uffff\1\0\73\uffff";
  static final String DFA124_acceptS = "\2\uffff\1\2\120\uffff\1\1";
  static final String DFA124_specialS = "\1\uffff\1\0\23\uffff\1\1\2\uffff\1\2\73\uffff}>";
  static final String[] DFA124_transitionS = {
      "\3\2\56\uffff\30\2\21\uffff\12\2\1\25\13\2\5\uffff\10\2\1\1"
          + "\14\2\1\30\11\2\1\uffff\1\2", "\1\uffff", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "\1\uffff", "", "",
      "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "" };

  static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
  static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
  static final char[] DFA124_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA124_minS);
  static final char[] DFA124_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA124_maxS);
  static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
  static final short[] DFA124_special = DFA
      .unpackEncodedString(DFA124_specialS);
  static final short[][] DFA124_transition;

  static {
    int numStates = DFA124_transitionS.length;
    DFA124_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
    }
  }

  class DFA124 extends DFA {

    public DFA124(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 124;
      this.eot = DFA124_eot;
      this.eof = DFA124_eof;
      this.min = DFA124_min;
      this.max = DFA124_max;
      this.accept = DFA124_accept;
      this.special = DFA124_special;
      this.transition = DFA124_transition;
    }

    public String getDescription() {
      return "()* loopback of 775:4: ( typeFragment )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA124_1 = input.LA(1);

          int index124_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred176_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index124_1);
          if (s >= 0) return s;
          break;
        case 1:
          int LA124_21 = input.LA(1);

          int index124_21 = input.index();
          input.rewind();
          s = -1;
          if ((synpred176_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index124_21);
          if (s >= 0) return s;
          break;
        case 2:
          int LA124_24 = input.LA(1);

          int index124_24 = input.index();
          input.rewind();
          s = -1;
          if ((synpred176_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index124_24);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          124, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA146_eotS = "\124\uffff";
  static final String DFA146_eofS = "\1\1\123\uffff";
  static final String DFA146_minS = "\1\115\7\uffff\1\0\3\uffff\1\0\22\uffff\1\0\64\uffff";
  static final String DFA146_maxS = "\1\u00e2\7\uffff\1\0\3\uffff\1\0\22\uffff\1\0\64\uffff";
  static final String DFA146_acceptS = "\1\uffff\1\2\121\uffff\1\1";
  static final String DFA146_specialS = "\10\uffff\1\0\3\uffff\1\1\22\uffff\1\2\64\uffff}>";
  static final String[] DFA146_transitionS = {
      "\3\1\56\uffff\30\1\21\uffff\12\1\1\10\13\1\5\uffff\10\1\1\14"
          + "\14\1\1\37\11\1\1\uffff\1\1", "", "", "", "", "", "", "",
      "\1\uffff", "", "", "", "\1\uffff", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "\1\uffff", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
  static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
  static final char[] DFA146_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA146_minS);
  static final char[] DFA146_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA146_maxS);
  static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
  static final short[] DFA146_special = DFA
      .unpackEncodedString(DFA146_specialS);
  static final short[][] DFA146_transition;

  static {
    int numStates = DFA146_transitionS.length;
    DFA146_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
    }
  }

  class DFA146 extends DFA {

    public DFA146(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 146;
      this.eot = DFA146_eot;
      this.eof = DFA146_eof;
      this.min = DFA146_min;
      this.max = DFA146_max;
      this.accept = DFA146_accept;
      this.special = DFA146_special;
      this.transition = DFA146_transition;
    }

    public String getDescription() {
      return "()* loopback of 857:13: ( typeFragment )*";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA146_8 = input.LA(1);

          int index146_8 = input.index();
          input.rewind();
          s = -1;
          if ((synpred198_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index146_8);
          if (s >= 0) return s;
          break;
        case 1:
          int LA146_12 = input.LA(1);

          int index146_12 = input.index();
          input.rewind();
          s = -1;
          if ((synpred198_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index146_12);
          if (s >= 0) return s;
          break;
        case 2:
          int LA146_31 = input.LA(1);

          int index146_31 = input.index();
          input.rewind();
          s = -1;
          if ((synpred198_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 1;
          }

          input.seek(index146_31);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          146, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  static final String DFA150_eotS = "\124\uffff";
  static final String DFA150_eofS = "\1\2\123\uffff";
  static final String DFA150_minS = "\1\115\1\0\122\uffff";
  static final String DFA150_maxS = "\1\u00e2\1\0\122\uffff";
  static final String DFA150_acceptS = "\2\uffff\1\2\120\uffff\1\1";
  static final String DFA150_specialS = "\1\uffff\1\0\122\uffff}>";
  static final String[] DFA150_transitionS = {
      "\3\2\56\uffff\30\2\21\uffff\1\1\25\2\5\uffff\37\2\1\uffff\1" + "\2",
      "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "" };

  static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
  static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
  static final char[] DFA150_min = DFA
      .unpackEncodedStringToUnsignedChars(DFA150_minS);
  static final char[] DFA150_max = DFA
      .unpackEncodedStringToUnsignedChars(DFA150_maxS);
  static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
  static final short[] DFA150_special = DFA
      .unpackEncodedString(DFA150_specialS);
  static final short[][] DFA150_transition;

  static {
    int numStates = DFA150_transitionS.length;
    DFA150_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
    }
  }

  class DFA150 extends DFA {

    public DFA150(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 150;
      this.eot = DFA150_eot;
      this.eof = DFA150_eof;
      this.min = DFA150_min;
      this.max = DFA150_max;
      this.accept = DFA150_accept;
      this.special = DFA150_special;
      this.transition = DFA150_transition;
    }

    public String getDescription() {
      return "869:20: ( typeTuple )?";
    }

    public int specialStateTransition(int s, IntStream _input)
        throws NoViableAltException {
      TokenStream input = (TokenStream) _input;
      int _s = s;
      switch (s) {
        case 0:
          int LA150_1 = input.LA(1);

          int index150_1 = input.index();
          input.rewind();
          s = -1;
          if ((synpred205_AntlrPilar())) {
            s = 83;
          }

          else if ((true)) {
            s = 2;
          }

          input.seek(index150_1);
          if (s >= 0) return s;
          break;
      }
      if (state.backtracking > 0) {
        state.failed = true;
        return -1;
      }
      NoViableAltException nvae = new NoViableAltException(getDescription(),
          150, _s, input);
      error(nvae);
      throw nvae;
    }
  }

  public static final BitSet FOLLOW_model_in_modelFile668 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_modelFile670 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotation_in_annotationFile712 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_annotationFile714 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_packageDeclaration_in_packageDeclarationFile755 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_packageDeclarationFile757 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_packageElement_in_packageElementFile786 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_packageElementFile788 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_location_in_locationFile821 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_locationFile823 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_transformation_in_transformationFile862 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_transformationFile864 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_action_in_actionFile897 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_actionFile899 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_jump_in_jumpFile940 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_jumpFile942 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_expFile985 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_expFile987 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_typeFile1031 = new BitSet(
      new long[] { 0x0000000000000000L });
  public static final BitSet FOLLOW_EOF_in_typeFile1033 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotationList_in_model1076 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x1DB9400000000000L });
  public static final BitSet FOLLOW_packageElement_in_model1081 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x1DB9400000000000L });
  public static final BitSet FOLLOW_packageDeclaration_in_model1087 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000400000000000L });
  public static final BitSet FOLLOW_EOF_in_model1111 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotation_in_annotationList1223 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_167_in_angleGroupedAnnotationList1315 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000090000000000L });
  public static final BitSet FOLLOW_annotation_in_angleGroupedAnnotationList1317 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000090000000000L });
  public static final BitSet FOLLOW_168_in_angleGroupedAnnotationList1320 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_169_in_parenGroupedAnnotationList1403 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x00000C0000000000L });
  public static final BitSet FOLLOW_annotation_in_parenGroupedAnnotationList1405 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x00000C0000000000L });
  public static final BitSet FOLLOW_170_in_parenGroupedAnnotationList1408 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_171_in_annotation1447 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_annotation1449 = new BitSet(
      new long[] { 0x0000000000000002L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_annotationParams_in_annotation1451 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_169_in_annotationParams1495 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_annotationParam_in_annotationParams1497 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000140000000000L });
  public static final BitSet FOLLOW_172_in_annotationParams1508 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_annotationParam_in_annotationParams1510 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000140000000000L });
  public static final BitSet FOLLOW_170_in_annotationParams1515 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_annotationParams1534 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000100000000000L });
  public static final BitSet FOLLOW_172_in_annotationParams1538 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_annotationParams1540 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000100000000000L });
  public static final BitSet FOLLOW_ID_in_annotationParam1586 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_annotationParam1588 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_annotation_in_annotationParam1592 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_annotationParam1596 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotation_in_annotationParam1630 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_annotationParam1673 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_174_in_packageDeclaration1731 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_name_in_packageDeclaration1733 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_packageDeclaration1735 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_packageDeclaration1737 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x1DB9000000000000L });
  public static final BitSet FOLLOW_packageElement_in_packageDeclaration1742 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x1DB9000000000000L });
  public static final BitSet FOLLOW_constDeclaration_in_packageElement1794 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_enumDeclaration_in_packageElement1799 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typealiasDeclaration_in_packageElement1804 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_recordDeclaration_in_packageElement1809 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_globalVarsDeclaration_in_packageElement1814 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procedureDeclaration_in_packageElement1819 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_virtualSetDeclaration_in_packageElement1824 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_funexpDeclaration_in_packageElement1829 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extDeclaration_in_packageElement1834 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_176_in_constDeclaration1847 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_constDeclaration1849 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002080000000000L });
  public static final BitSet FOLLOW_annotationList_in_constDeclaration1851 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002000000000000L });
  public static final BitSet FOLLOW_177_in_constDeclaration1856 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_constElement_in_constDeclaration1858 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0x0004000000000000L });
  public static final BitSet FOLLOW_178_in_constDeclaration1861 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_constElement1907 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_constElement1909 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_constElement1914 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_constElement1916 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_constElement1918 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_179_in_enumDeclaration1959 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_enumDeclaration1961 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002080000000000L });
  public static final BitSet FOLLOW_annotationList_in_enumDeclaration1963 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002000000000000L });
  public static final BitSet FOLLOW_177_in_enumDeclaration1968 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_enumElement_in_enumDeclaration1970 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004100000000000L });
  public static final BitSet FOLLOW_172_in_enumDeclaration1977 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_enumElement_in_enumDeclaration1979 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004100000000000L });
  public static final BitSet FOLLOW_178_in_enumDeclaration1984 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_enumElement2027 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_enumElement2029 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_180_in_typealiasDeclaration2070 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_type_in_typealiasDeclaration2072 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_typealiasDeclaration2074 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_typealiasDeclaration2082 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_typealiasDeclaration2084 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_181_in_recordDeclaration2127 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_recordDeclaration2132 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0042088000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_recordDeclaration2134 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0042080000000000L });
  public static final BitSet FOLLOW_annotationList_in_recordDeclaration2137 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0042000000000000L });
  public static final BitSet FOLLOW_extendClause_in_recordDeclaration2142 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002000000000000L });
  public static final BitSet FOLLOW_177_in_recordDeclaration2148 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0006020000000000L });
  public static final BitSet FOLLOW_attribute_in_recordDeclaration2150 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0006020000000000L });
  public static final BitSet FOLLOW_178_in_recordDeclaration2153 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_167_in_typeVarTuple2217 = new BitSet(
      new long[] { 0x0000000000000000L, 0x8000000000000000L });
  public static final BitSet FOLLOW_typeVar_in_typeVarTuple2219 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000110000000000L });
  public static final BitSet FOLLOW_172_in_typeVarTuple2223 = new BitSet(
      new long[] { 0x0000000000000000L, 0x8000000000000000L });
  public static final BitSet FOLLOW_typeVar_in_typeVarTuple2225 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000110000000000L });
  public static final BitSet FOLLOW_168_in_typeVarTuple2230 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_TYPEVARID_in_typeVar2259 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_typeVar2261 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_182_in_extendClause2295 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_extendClauseElement_in_extendClause2297 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000100000000000L });
  public static final BitSet FOLLOW_172_in_extendClause2304 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_extendClauseElement_in_extendClause2306 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000100000000000L });
  public static final BitSet FOLLOW_name_in_extendClauseElement2338 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000088000000000L });
  public static final BitSet FOLLOW_typeTuple_in_extendClauseElement2340 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_extendClauseElement2343 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_167_in_typeTuple2380 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_type_in_typeTuple2382 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000110000000000L });
  public static final BitSet FOLLOW_172_in_typeTuple2386 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_type_in_typeTuple2388 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000110000000000L });
  public static final BitSet FOLLOW_168_in_typeTuple2393 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_attribute2426 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_attributeFragment_in_attribute2429 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000900000000000L });
  public static final BitSet FOLLOW_172_in_attribute2436 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_attributeFragment_in_attribute2438 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000900000000000L });
  public static final BitSet FOLLOW_175_in_attribute2443 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_attributeFragment2482 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000280000000000L });
  public static final BitSet FOLLOW_annotationList_in_attributeFragment2484 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_attributeFragment2488 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_name_in_attributeFragment2490 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_183_in_globalVarsDeclaration2525 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000001L });
  public static final BitSet FOLLOW_globalVarDeclaration_in_globalVarsDeclaration2527 = new BitSet(
      new long[] { 0x0000000000000002L, 0xC000000000000000L,
          0x0002020000000001L });
  public static final BitSet FOLLOW_type_in_globalVarDeclaration2550 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000001L });
  public static final BitSet FOLLOW_globalVarFragment_in_globalVarDeclaration2553 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000900000000000L });
  public static final BitSet FOLLOW_172_in_globalVarDeclaration2560 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000001L });
  public static final BitSet FOLLOW_globalVarFragment_in_globalVarDeclaration2562 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000900000000000L });
  public static final BitSet FOLLOW_175_in_globalVarDeclaration2567 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_GLOBALID_in_globalVarFragment2606 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_globalVarFragment2608 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_184_in_procedureDeclaration2644 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002028000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_procedureDeclaration2646 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_type_in_procedureDeclaration2652 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_procedureDeclaration2661 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x00020A0000000000L });
  public static final BitSet FOLLOW_169_in_procedureDeclaration2668 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002060000000000L });
  public static final BitSet FOLLOW_paramVariable_in_procedureDeclaration2678 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_paramList_in_procedureDeclaration2689 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000140000000000L });
  public static final BitSet FOLLOW_172_in_procedureDeclaration2705 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_paramVariable_in_procedureDeclaration2707 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_procedureDeclaration2727 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x00020A0000000000L });
  public static final BitSet FOLLOW_annotationList_in_procedureDeclaration2736 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x00020A0000000000L });
  public static final BitSet FOLLOW_body_in_procedureDeclaration2741 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_param_in_paramList2823 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000100000000000L });
  public static final BitSet FOLLOW_172_in_paramList2827 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_param_in_paramList2829 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000100000000000L });
  public static final BitSet FOLLOW_type_in_param2864 = new BitSet(new long[] {
      0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_param2867 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_param2869 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_paramVariable2910 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_paramVariable2913 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0200000000000000L });
  public static final BitSet FOLLOW_185_in_paramVariable2915 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_paramVariable2917 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_186_in_virtualSetDeclaration2955 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_virtualSetDeclaration2957 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002080000000000L });
  public static final BitSet FOLLOW_annotationList_in_virtualSetDeclaration2959 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002000000000000L });
  public static final BitSet FOLLOW_177_in_virtualSetDeclaration2964 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_vsetElement_in_virtualSetDeclaration2969 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004100000000000L });
  public static final BitSet FOLLOW_172_in_virtualSetDeclaration2973 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_vsetElement_in_virtualSetDeclaration2975 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004100000000000L });
  public static final BitSet FOLLOW_178_in_virtualSetDeclaration2983 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_name_in_vsetElement3045 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_vsetElement3047 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_187_in_funexpDeclaration3087 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_funexpDeclaration3089 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000280000000000L });
  public static final BitSet FOLLOW_annotationList_in_funexpDeclaration3091 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_funexpDeclaration3093 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002000000000000L });
  public static final BitSet FOLLOW_funExp_in_funexpDeclaration3098 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_188_in_extDeclaration3154 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0x0000008000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_extDeclaration3156 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_extDeclaration3162 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002080000000000L });
  public static final BitSet FOLLOW_annotationList_in_extDeclaration3164 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002000000000000L });
  public static final BitSet FOLLOW_177_in_extDeclaration3169 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0xE000000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_extElement_in_extDeclaration3171 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0xE004000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_178_in_extDeclaration3174 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typeExtension_in_extElement3228 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_actionExtension_in_extElement3234 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_expExtension_in_extElement3240 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procExtension_in_extElement3245 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_189_in_typeExtension3258 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0x0000008000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_typeExtension3260 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_typeExtension3266 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0042880000000000L });
  public static final BitSet FOLLOW_annotationList_in_typeExtension3268 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0042800000000000L });
  public static final BitSet FOLLOW_175_in_typeExtension3275 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extendClause_in_typeExtension3282 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002000000000000L });
  public static final BitSet FOLLOW_177_in_typeExtension3290 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0xE004000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_typeExtensionMember_in_typeExtension3292 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0xE004000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_178_in_typeExtension3295 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typeExtensionAttributeBinding_in_typeExtensionMember3346 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_actionExtension_in_typeExtensionMember3351 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_expExtension_in_typeExtensionMember3356 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procExtension_in_typeExtensionMember3361 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_typeExtensionAttributeBinding3374 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_typeExtensionAttributeBinding3376 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_typeExtensionAttributeBinding3380 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_typeExtensionAttributeBinding3385 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_typeExtensionAttributeBinding3387 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_190_in_actionExtension3433 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0x0000008000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_actionExtension3435 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_actionExtension3438 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x00008A0000000000L });
  public static final BitSet FOLLOW_169_in_actionExtension3445 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x02020A0000000000L });
  public static final BitSet FOLLOW_extParamList_in_actionExtension3447 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_actionExtension3449 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_actionExtension3457 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_actionExtension3459 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_191_in_expExtension3515 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002028000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_expExtension3517 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_type_in_expExtension3520 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_expExtension3523 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x00008A0000000000L });
  public static final BitSet FOLLOW_169_in_expExtension3531 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x02020A0000000000L });
  public static final BitSet FOLLOW_extParamList_in_expExtension3533 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_expExtension3535 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_expExtension3543 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_expExtension3545 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_192_in_procExtension3608 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002028000000000L });
  public static final BitSet FOLLOW_typeVarTuple_in_procExtension3610 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_type_in_procExtension3613 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_procExtension3616 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x00008A0000000000L });
  public static final BitSet FOLLOW_169_in_procExtension3623 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x02020A0000000000L });
  public static final BitSet FOLLOW_extParamList_in_procExtension3625 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_procExtension3627 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_procExtension3635 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_procExtension3637 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extParamVariable_in_extParamList3699 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extParam_in_extParamList3733 = new BitSet(
      new long[] { 0x0000000000000002L, 0xC000000000000000L,
          0x0202120000000000L });
  public static final BitSet FOLLOW_172_in_extParamList3737 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x02020A0000000000L });
  public static final BitSet FOLLOW_extParam_in_extParamList3739 = new BitSet(
      new long[] { 0x0000000000000002L, 0xC000000000000000L,
          0x0202120000000000L });
  public static final BitSet FOLLOW_extParamVariable_in_extParamList3747 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_extParam3790 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_ID_in_extParam3793 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_extParam3796 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_extParamVariable3841 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0x0200000000000000L });
  public static final BitSet FOLLOW_ID_in_extParamVariable3844 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0200000000000000L });
  public static final BitSet FOLLOW_185_in_extParamVariable3851 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_extParamVariable3853 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_177_in_body3905 = new BitSet(new long[] {
      0x0000000000000000L, 0xC000000000000000L, 0x0002020000000002L,
      0x0000000000000002L });
  public static final BitSet FOLLOW_localVarsDeclaration_in_body3907 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000002L, 0x0000000000000002L });
  public static final BitSet FOLLOW_location_in_body3914 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0006020000000002L, 0x0000000000080002L });
  public static final BitSet FOLLOW_catchClause_in_body3921 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004000000000000L, 0x0000000000080000L });
  public static final BitSet FOLLOW_178_in_body3924 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_193_in_localVarsDeclaration3985 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L, 0x0000000000000002L });
  public static final BitSet FOLLOW_localVarDeclaration_in_localVarsDeclaration3988 = new BitSet(
      new long[] { 0x0000000000000002L, 0xC000000000000000L,
          0x0002020000000000L, 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_localVarDeclaration4014 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L, 0x0000000000000002L });
  public static final BitSet FOLLOW_localVarFragment_in_localVarDeclaration4017 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000900000000000L });
  public static final BitSet FOLLOW_172_in_localVarDeclaration4025 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L, 0x0000000000000002L });
  public static final BitSet FOLLOW_localVarFragment_in_localVarDeclaration4027 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000900000000000L });
  public static final BitSet FOLLOW_175_in_localVarDeclaration4032 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_localVarFragment4072 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_localVarFragment4074 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_LOCID_in_location4124 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020280003FF001L, 0x00000000BE81F2F0L });
  public static final BitSet FOLLOW_angleGroupedAnnotationList_in_location4126 = new BitSet(
      new long[] { 0x0000000000000002L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE81F2F0L });
  public static final BitSet FOLLOW_transformation_in_location4134 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_194_in_location4144 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE81F2F0L });
  public static final BitSet FOLLOW_transformation_in_location4146 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_parenGroupedAnnotationList_in_transformation4231 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE81F2F0L });
  public static final BitSet FOLLOW_guard_in_transformation4233 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE81F2E0L });
  public static final BitSet FOLLOW_seqTransformation_in_transformation4240 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_guard4288 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000080000000000L,
      0x0000000000000008L });
  public static final BitSet FOLLOW_annotationList_in_guard4290 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000008L });
  public static final BitSet FOLLOW_195_in_guard4292 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_196_in_guard4322 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_guard4324 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_lhs_in_lhsList4357 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000100000000000L });
  public static final BitSet FOLLOW_172_in_lhsList4361 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_lhs_in_lhsList4363 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000100000000000L });
  public static final BitSet FOLLOW_exp_in_lhs4406 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_lhs4408 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_action_in_seqTransformation4448 = new BitSet(
      new long[] { 0x0000000000000002L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE81F2E0L });
  public static final BitSet FOLLOW_jump_in_seqTransformation4451 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_197_in_action4505 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000020000000000L });
  public static final BitSet FOLLOW_169_in_action4507 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_action4511 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000100000000000L });
  public static final BitSet FOLLOW_172_in_action4513 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_action4517 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_action4519 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_action4524 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_action4526 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_197_in_action4566 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_action4568 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_action4570 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_action4572 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_198_in_action4593 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000020000000000L });
  public static final BitSet FOLLOW_169_in_action4595 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_action4599 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000100000000000L });
  public static final BitSet FOLLOW_172_in_action4601 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_action4605 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_action4607 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_action4612 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_action4614 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_198_in_action4654 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_action4656 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_action4658 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_action4660 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_199_in_action4681 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_action4683 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_action4685 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_action4687 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_assignment_in_action4707 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_startThread_in_action4713 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extCall_in_action4718 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_lhsList_in_assignment4729 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000004L, 0x0000000000000100L });
  public static final BitSet FOLLOW_200_in_assignment4739 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_ACTION_EXT_OP_in_assignment4749 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_rhs_in_assignment4755 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000980000000000L });
  public static final BitSet FOLLOW_172_in_assignment4759 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_rhs_in_assignment4761 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000980000000000L });
  public static final BitSet FOLLOW_annotationList_in_assignment4769 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_assignment4771 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotationList_in_rhs4820 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_rhs4822 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_201_in_startThread4863 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_name_in_startThread4865 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00028A00003FF001L, 0x00000000BE811400L });
  public static final BitSet FOLLOW_202_in_startThread4872 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_startThread4876 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_startThread4878 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00028A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_startThread4889 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_startThread4897 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_startThread4899 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_extCall4956 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_extCall4958 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_extCall4960 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_gotoJump_in_jump4995 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_returnJump_in_jump5000 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ifThenJump_in_jump5005 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L, 0x0000000000000010L });
  public static final BitSet FOLLOW_196_in_jump5012 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000000010000L });
  public static final BitSet FOLLOW_ifThenJump_in_jump5014 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L, 0x0000000000000010L });
  public static final BitSet FOLLOW_ifElseJump_in_jump5022 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_jump5029 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_jump5031 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_204_in_jump5078 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_jump5080 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000000000004L });
  public static final BitSet FOLLOW_switchCaseJump_in_jump5082 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_switchDefaultJump_in_jump5094 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_jump5100 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_jump5102 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_205_in_jump5152 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_nameExp_in_jump5159 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000000000100L });
  public static final BitSet FOLLOW_172_in_jump5163 = new BitSet(new long[] {
      0x0000000000000000L, 0x4000000000000000L, 0x0000000000000001L });
  public static final BitSet FOLLOW_nameExp_in_jump5165 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000000000100L });
  public static final BitSet FOLLOW_200_in_jump5170 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_jump5178 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_jump5180 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_jump5182 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000000004000L });
  public static final BitSet FOLLOW_gotoJump_in_jump5189 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_206_in_gotoJump5254 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_gotoJump5256 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_gotoJump5258 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_gotoJump5260 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_207_in_returnJump5290 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00028A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_returnJump5292 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_returnJump5295 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_returnJump5297 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_208_in_ifThenJump5328 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_ifThenJump5330 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000020000L });
  public static final BitSet FOLLOW_209_in_ifThenJump5332 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L, 0x0000000000004000L });
  public static final BitSet FOLLOW_annotationList_in_ifThenJump5334 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000004000L });
  public static final BitSet FOLLOW_206_in_ifThenJump5340 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_ifThenJump5342 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_196_in_ifElseJump5395 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L, 0x0000000000004000L });
  public static final BitSet FOLLOW_annotationList_in_ifElseJump5397 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000004000L });
  public static final BitSet FOLLOW_206_in_ifElseJump5399 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_ifElseJump5401 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_194_in_switchCaseJump5428 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_switchCaseJump5430 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000040000L });
  public static final BitSet FOLLOW_210_in_switchCaseJump5437 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L, 0x0000000000004000L });
  public static final BitSet FOLLOW_annotationList_in_switchCaseJump5439 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000004000L });
  public static final BitSet FOLLOW_206_in_switchCaseJump5441 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_switchCaseJump5443 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_194_in_switchDefaultJump5476 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000040000L });
  public static final BitSet FOLLOW_210_in_switchDefaultJump5478 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L, 0x0000000000004000L });
  public static final BitSet FOLLOW_annotationList_in_switchDefaultJump5480 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000004000L });
  public static final BitSet FOLLOW_206_in_switchDefaultJump5482 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_switchDefaultJump5484 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_211_in_catchClause5509 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x00020A0000000000L });
  public static final BitSet FOLLOW_annotationList_in_catchClause5511 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x00020A0000000000L });
  public static final BitSet FOLLOW_type_in_catchClause5516 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_ID_in_catchClause5522 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_171_in_catchClause5529 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000400L });
  public static final BitSet FOLLOW_202_in_catchClause5531 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_catchClause5535 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000100000L });
  public static final BitSet FOLLOW_212_in_catchClause5537 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_catchClause5544 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_catchClause5546 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x000000000001F000L });
  public static final BitSet FOLLOW_jump_in_catchClause5551 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_conditionalExp_in_exp5628 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_conditionalImplyExp_in_conditionalExp5641 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ifThenExp_in_conditionalExp5646 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000010L });
  public static final BitSet FOLLOW_196_in_conditionalExp5652 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000010000L });
  public static final BitSet FOLLOW_ifThenExp_in_conditionalExp5654 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000010L });
  public static final BitSet FOLLOW_ifElseExp_in_conditionalExp5661 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_204_in_conditionalExp5708 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_conditionalExp5710 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_switchCaseExp_in_conditionalExp5712 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_switchDefaultExp_in_conditionalExp5728 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_208_in_ifThenExp5783 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_ifThenExp5787 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000020000L });
  public static final BitSet FOLLOW_209_in_ifThenExp5789 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_annotationList_in_ifThenExp5791 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_ifThenExp5802 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_196_in_ifElseExp5857 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_annotationList_in_ifElseExp5859 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_ifElseExp5861 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_194_in_switchCaseExp5895 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_switchCaseExp5899 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000040000L });
  public static final BitSet FOLLOW_210_in_switchCaseExp5901 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_annotationList_in_switchCaseExp5906 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_switchCaseExp5910 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_194_in_switchDefaultExp5953 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000040000L });
  public static final BitSet FOLLOW_210_in_switchDefaultExp5955 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_annotationList_in_switchDefaultExp5957 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_switchDefaultExp5959 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_conditionalOrExp_in_conditionalImplyExp5992 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000600000L });
  public static final BitSet FOLLOW_213_in_conditionalImplyExp6023 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_conditionalOrExp_in_conditionalImplyExp6027 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000600000L });
  public static final BitSet FOLLOW_214_in_conditionalImplyExp6058 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_conditionalOrExp_in_conditionalImplyExp6062 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000600000L });
  public static final BitSet FOLLOW_conditionalAndExp_in_conditionalOrExp6106 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000008L });
  public static final BitSet FOLLOW_COND_OR_OP_in_conditionalOrExp6137 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_conditionalAndExp_in_conditionalOrExp6149 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000008L });
  public static final BitSet FOLLOW_inclusiveOrExp_in_conditionalAndExp6199 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000010L });
  public static final BitSet FOLLOW_COND_AND_OP_in_conditionalAndExp6232 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_inclusiveOrExp_in_conditionalAndExp6236 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000010L });
  public static final BitSet FOLLOW_exclusiveOrExp_in_inclusiveOrExp6275 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000020L });
  public static final BitSet FOLLOW_OR_OP_in_inclusiveOrExp6308 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_exclusiveOrExp_in_inclusiveOrExp6312 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000020L });
  public static final BitSet FOLLOW_andExp_in_exclusiveOrExp6358 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000040L });
  public static final BitSet FOLLOW_XOR_OP_in_exclusiveOrExp6399 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_andExp_in_exclusiveOrExp6403 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000040L });
  public static final BitSet FOLLOW_equalityExp_in_andExp6455 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000080L });
  public static final BitSet FOLLOW_AND_OP_in_andExp6491 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_equalityExp_in_andExp6495 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000080L });
  public static final BitSet FOLLOW_typeTestExp_in_equalityExp6542 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000100L });
  public static final BitSet FOLLOW_EQ_OP_in_equalityExp6578 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_typeTestExp_in_equalityExp6582 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000100L });
  public static final BitSet FOLLOW_relationalExp_in_typeTestExp6632 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000200L });
  public static final BitSet FOLLOW_COLON_OP_in_typeTestExp6666 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_relationalExp_in_typeTestExp6670 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000200L });
  public static final BitSet FOLLOW_shiftExp_in_relationalExp6714 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000018000000400L });
  public static final BitSet FOLLOW_REL_OP_in_relationalExp6753 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_shiftExp_in_relationalExp6757 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000018000000400L });
  public static final BitSet FOLLOW_167_in_relationalExp6795 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_shiftExp_in_relationalExp6799 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000018000000400L });
  public static final BitSet FOLLOW_168_in_relationalExp6840 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_shiftExp_in_relationalExp6844 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000018000000400L });
  public static final BitSet FOLLOW_additiveExp_in_shiftExp6897 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000800L });
  public static final BitSet FOLLOW_SHIFT_OP_in_shiftExp6933 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_additiveExp_in_shiftExp6937 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000800L });
  public static final BitSet FOLLOW_multiplicativeExp_in_additiveExp6982 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000001000L });
  public static final BitSet FOLLOW_ADD_OP_in_additiveExp7012 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_multiplicativeExp_in_additiveExp7016 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000001000L });
  public static final BitSet FOLLOW_unaryExp_in_multiplicativeExp7058 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000002000L, 0x0000000000800000L });
  public static final BitSet FOLLOW_MUL_OP_in_multiplicativeExp7098 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_unaryExp_in_multiplicativeExp7102 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000002000L, 0x0000000000800000L });
  public static final BitSet FOLLOW_215_in_multiplicativeExp7140 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_unaryExp_in_multiplicativeExp7144 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000002000L, 0x0000000000800000L });
  public static final BitSet FOLLOW_UN_OP_in_unaryExp7203 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_unaryExp_in_unaryExp7205 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ADD_OP_in_unaryExp7243 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_unaryExp_in_unaryExp7245 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_MUL_OP_in_unaryExp7282 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_unaryExp_in_unaryExp7284 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_215_in_unaryExp7321 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_unaryExp_in_unaryExp7323 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_castExp_in_unaryExp7361 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_169_in_castExp7374 = new BitSet(new long[] {
      0x0000000000000000L, 0xC000000000000000L, 0x0002020000000000L });
  public static final BitSet FOLLOW_type_in_castExp7376 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_castExp7378 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE800000L });
  public static final BitSet FOLLOW_primaryExp_in_castExp7380 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_primaryExp_in_castExp7407 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_primary_in_primaryExp7423 = new BitSet(
      new long[] { 0x0000000000000002L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BF800400L });
  public static final BitSet FOLLOW_202_in_primaryExp7463 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_expList_in_primaryExp7465 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_primaryExp7467 = new BitSet(
      new long[] { 0x0000000000000002L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BF800400L });
  public static final BitSet FOLLOW_216_in_primaryExp7505 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_primaryExp7507 = new BitSet(
      new long[] { 0x0000000000000002L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BF800400L });
  public static final BitSet FOLLOW_callArg_in_primaryExp7552 = new BitSet(
      new long[] { 0x0000000000000002L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BF800400L });
  public static final BitSet FOLLOW_exp_in_expList7607 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000100000000000L });
  public static final BitSet FOLLOW_172_in_expList7611 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_expList7613 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000100000000000L });
  public static final BitSet FOLLOW_primary_in_callArg7660 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000001000400L });
  public static final BitSet FOLLOW_202_in_callArg7700 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_expList_in_callArg7702 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_callArg7704 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000001000400L });
  public static final BitSet FOLLOW_216_in_callArg7742 = new BitSet(new long[] {
      0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_callArg7744 = new BitSet(new long[] {
      0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000001000400L });
  public static final BitSet FOLLOW_literal_in_primary7801 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_tuple_in_primary7806 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_nameExp_in_primary7811 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newListRanged_in_primary7816 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newList_in_primary7821 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newMultiArray_in_primary7826 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newRecord_in_primary7831 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newSet_in_primary7836 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newFunction_in_primary7841 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_217_in_primary7849 = new BitSet(new long[] {
      0x0000000000000000L, 0xC000000000000000L, 0x0002020000000000L });
  public static final BitSet FOLLOW_type_in_primary7851 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newExp_in_primary7891 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_funExp_in_primary7896 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_letExp_in_primary7901 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_name_in_nameExp7912 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_globalName_in_nameExp7957 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_218_in_literal8006 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_219_in_literal8048 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_220_in_literal8089 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_CHAR_LIT_in_literal8131 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_intLiteral_in_literal8172 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_realLiteral_in_literal8177 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_STRING_LIT_in_literal8184 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_SYMBOL_LIT_in_literal8225 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_RAW_LIT_in_literal8266 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_HEX_LIT_in_intLiteral8316 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_OCT_LIT_in_intLiteral8361 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_DEC_LIT_in_intLiteral8405 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_BIN_LIT_in_intLiteral8449 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_FLOAT_LIT_in_realLiteral8499 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_RATIONAL_LIT_in_realLiteral8541 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_169_in_tuple8587 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020600003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_annotatedExp_in_tuple8591 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000140000000000L });
  public static final BitSet FOLLOW_172_in_tuple8602 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_annotatedExp_in_tuple8604 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000140000000000L });
  public static final BitSet FOLLOW_170_in_tuple8612 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_annotatedExp8643 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_annotatedExp8645 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_221_in_newExp8686 = new BitSet(new long[] {
      0x0000000000000000L, 0xC000000000000000L, 0x0002020000000000L });
  public static final BitSet FOLLOW_baseType_in_newExp8688 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0002000000000000L, 0x0000000000800400L });
  public static final BitSet FOLLOW_newMultiArrayTypeFragment_in_newExp8693 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0002000000000000L, 0x0000000000800400L });
  public static final BitSet FOLLOW_typeFragment_in_newExp8699 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0002000000000000L, 0x0000000000800400L });
  public static final BitSet FOLLOW_202_in_newMultiArrayTypeFragment8763 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_newMultiArrayTypeFragment8765 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_172_in_newMultiArrayTypeFragment8769 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_newMultiArrayTypeFragment8771 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_newMultiArrayTypeFragment8776 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_217_in_newListRanged8813 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000400L });
  public static final BitSet FOLLOW_202_in_newListRanged8815 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_newListRanged8817 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000100000L });
  public static final BitSet FOLLOW_212_in_newListRanged8819 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_newListRanged8821 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_newListRanged8823 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_217_in_newMultiArray8856 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000400L });
  public static final BitSet FOLLOW_202_in_newMultiArray8858 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811C00L });
  public static final BitSet FOLLOW_newMultiArrayFragment_in_newMultiArray8866 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_172_in_newMultiArray8876 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811400L });
  public static final BitSet FOLLOW_newMultiArrayFragment_in_newMultiArray8878 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_newMultiArray8890 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_202_in_newMultiArrayFragment8947 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811C00L });
  public static final BitSet FOLLOW_newMultiArrayFragment_in_newMultiArrayFragment8951 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_172_in_newMultiArrayFragment8965 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811400L });
  public static final BitSet FOLLOW_newMultiArrayFragment_in_newMultiArrayFragment8967 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_newMultiArrayFragment8998 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_newMultiArrayFragment9003 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_217_in_newList9016 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000000000400L });
  public static final BitSet FOLLOW_202_in_newList9018 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811800L });
  public static final BitSet FOLLOW_exp_in_newList9022 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000100000000000L,
      0x0000000000000800L });
  public static final BitSet FOLLOW_172_in_newList9026 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_newList9028 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000100000000000L,
      0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_newList9036 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_217_in_newSet9064 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0002000000000000L });
  public static final BitSet FOLLOW_177_in_newSet9066 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00060200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_newSet9070 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0004100000000000L });
  public static final BitSet FOLLOW_172_in_newSet9074 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_newSet9076 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0004100000000000L });
  public static final BitSet FOLLOW_178_in_newSet9084 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_217_in_newRecord9112 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_name_in_newRecord9114 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002008000000000L });
  public static final BitSet FOLLOW_typeTuple_in_newRecord9116 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002000000000000L });
  public static final BitSet FOLLOW_177_in_newRecord9122 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0x0004000000000000L });
  public static final BitSet FOLLOW_attrInit_in_newRecord9126 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004100000000000L });
  public static final BitSet FOLLOW_172_in_newRecord9130 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_attrInit_in_newRecord9132 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004100000000000L });
  public static final BitSet FOLLOW_178_in_newRecord9143 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_attrInit9220 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000200000000000L });
  public static final BitSet FOLLOW_173_in_attrInit9222 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_attrInit9224 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_217_in_newFunction9272 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0002000000000000L });
  public static final BitSet FOLLOW_177_in_newFunction9274 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000FE811000L });
  public static final BitSet FOLLOW_222_in_newFunction9278 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004000000000000L });
  public static final BitSet FOLLOW_mapping_in_newFunction9320 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004100000000000L });
  public static final BitSet FOLLOW_172_in_newFunction9324 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000FE811000L });
  public static final BitSet FOLLOW_mapping_in_newFunction9326 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004100000000000L });
  public static final BitSet FOLLOW_178_in_newFunction9364 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_exp_in_mapping9377 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000040000000L });
  public static final BitSet FOLLOW_222_in_mapping9379 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_mapping9383 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_177_in_funExp9427 = new BitSet(new long[] {
      0x0000000000000000L, 0xC000000000000000L, 0x0002020000000000L,
      0x0000000000040000L });
  public static final BitSet FOLLOW_matching_in_funExp9429 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004000000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_194_in_funExp9440 = new BitSet(new long[] {
      0x0000000000000000L, 0xC000000000000000L, 0x0002020000000000L,
      0x0000000000040000L });
  public static final BitSet FOLLOW_matching_in_funExp9442 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004000000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_178_in_funExp9447 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_210_in_matching9485 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_matching9487 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_paramList_in_matching9531 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000040000L });
  public static final BitSet FOLLOW_210_in_matching9533 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_matching9535 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_223_in_letExp9584 = new BitSet(new long[] {
      0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_binding_in_letExp9586 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000100000000L });
  public static final BitSet FOLLOW_172_in_letExp9598 = new BitSet(new long[] {
      0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_binding_in_letExp9600 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000100000000L });
  public static final BitSet FOLLOW_224_in_letExp9614 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_letExp9616 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_binding9668 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000300000000000L });
  public static final BitSet FOLLOW_172_in_binding9672 = new BitSet(new long[] {
      0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_binding9674 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000300000000000L });
  public static final BitSet FOLLOW_173_in_binding9679 = new BitSet(new long[] {
      0x0000000000000000L, 0x400000000000E000L, 0x00020200003FF001L,
      0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_binding9681 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_name9723 = new BitSet(new long[] {
      0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
      0x0000000200000000L });
  public static final BitSet FOLLOW_225_in_name9725 = new BitSet(new long[] {
      0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_name9732 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_globalName9778 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000200000000L });
  public static final BitSet FOLLOW_225_in_globalName9780 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0x0000000000000001L });
  public static final BitSet FOLLOW_GLOBALID_in_globalName9787 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_baseType_in_type9831 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0002000000000000L, 0x0000000000800400L });
  public static final BitSet FOLLOW_typeFragment_in_type9833 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0002000000000000L, 0x0000000000800400L });
  public static final BitSet FOLLOW_215_in_typeFragment9877 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_202_in_typeFragment9922 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_typeFragment9924 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_202_in_typeFragment9965 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L });
  public static final BitSet FOLLOW_172_in_typeFragment9967 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_typeFragment9970 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_177_in_typeFragment10013 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004000000000000L });
  public static final BitSet FOLLOW_178_in_typeFragment10015 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_TYPEVARID_in_baseType10062 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_name_in_baseType10102 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000008000000000L, 0x0000000001000000L });
  public static final BitSet FOLLOW_216_in_baseType10106 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_baseType10108 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000008000000000L });
  public static final BitSet FOLLOW_typeTuple_in_baseType10112 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procedureType_in_baseType10150 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_tupleType_in_baseType10155 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_functionType_in_baseType10160 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_relationType_in_baseType10165 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_169_in_procedureType10178 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L, 0x0000000440000000L });
  public static final BitSet FOLLOW_procedureTypeParamVariable_in_procedureType10189 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000440000000L });
  public static final BitSet FOLLOW_typeParam_in_procedureType10199 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000440000000L });
  public static final BitSet FOLLOW_172_in_procedureType10212 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_typeParam_in_procedureType10214 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000440000000L });
  public static final BitSet FOLLOW_172_in_procedureType10230 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_procedureTypeParamVariable_in_procedureType10232 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000440000000L });
  public static final BitSet FOLLOW_222_in_procedureType10266 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002060000000000L });
  public static final BitSet FOLLOW_annotatedType_in_procedureType10268 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_procedureType10271 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_226_in_procedureType10313 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002060000000000L });
  public static final BitSet FOLLOW_annotatedType_in_procedureType10315 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_procedureType10318 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_typeParam10368 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_ID_in_typeParam10370 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_typeParam10373 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_annotatedType10414 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_annotatedType10416 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_procedureTypeParamVariable10455 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L,
          0x0200000000000000L });
  public static final BitSet FOLLOW_ID_in_procedureTypeParamVariable10457 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0200000000000000L });
  public static final BitSet FOLLOW_185_in_procedureTypeParamVariable10460 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000080000000000L });
  public static final BitSet FOLLOW_annotationList_in_procedureTypeParamVariable10462 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_169_in_tupleType10499 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_typeParam_in_tupleType10501 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000140000000000L });
  public static final BitSet FOLLOW_172_in_tupleType10513 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_typeParam_in_tupleType10515 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000140000000000L });
  public static final BitSet FOLLOW_170_in_tupleType10519 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_177_in_functionType10557 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_typeParam_in_functionType10561 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000040000000L });
  public static final BitSet FOLLOW_172_in_functionType10573 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_typeParam_in_functionType10577 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L, 0x0000000040000000L });
  public static final BitSet FOLLOW_222_in_functionType10582 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_annotatedType_in_functionType10594 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004000000000000L });
  public static final BitSet FOLLOW_178_in_functionType10596 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_177_in_relationType10649 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_typeParam_in_relationType10651 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L });
  public static final BitSet FOLLOW_172_in_relationType10663 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_typeParam_in_relationType10665 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0004100000000000L });
  public static final BitSet FOLLOW_178_in_relationType10670 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_annotationParams_in_synpred9_AntlrPilar1451 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_169_in_synpred11_AntlrPilar1495 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_annotationParam_in_synpred11_AntlrPilar1497 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000140000000000L });
  public static final BitSet FOLLOW_172_in_synpred11_AntlrPilar1508 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020A00003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_annotationParam_in_synpred11_AntlrPilar1510 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000140000000000L });
  public static final BitSet FOLLOW_170_in_synpred11_AntlrPilar1515 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_172_in_synpred12_AntlrPilar1538 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_synpred12_AntlrPilar1540 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_paramVariable_in_synpred42_AntlrPilar2678 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_172_in_synpred46_AntlrPilar2827 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_param_in_synpred46_AntlrPilar2829 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_extParamVariable_in_synpred70_AntlrPilar3699 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_synpred73_AntlrPilar3790 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ID_in_synpred74_AntlrPilar3793 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_synpred75_AntlrPilar3841 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_transformation_in_synpred85_AntlrPilar4134 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_194_in_synpred85_AntlrPilar4144 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE81F2F0L });
  public static final BitSet FOLLOW_transformation_in_synpred85_AntlrPilar4146 = new BitSet(
      new long[] { 0x0000000000000002L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000004L });
  public static final BitSet FOLLOW_guard_in_synpred86_AntlrPilar4233 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_action_in_synpred89_AntlrPilar4448 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_197_in_synpred91_AntlrPilar4505 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000020000000000L });
  public static final BitSet FOLLOW_169_in_synpred91_AntlrPilar4507 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_synpred91_AntlrPilar4511 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L });
  public static final BitSet FOLLOW_172_in_synpred91_AntlrPilar4513 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_synpred91_AntlrPilar4517 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_synpred91_AntlrPilar4519 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_synpred91_AntlrPilar4524 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_synpred91_AntlrPilar4526 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_197_in_synpred92_AntlrPilar4566 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_synpred92_AntlrPilar4568 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_synpred92_AntlrPilar4570 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_synpred92_AntlrPilar4572 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_198_in_synpred93_AntlrPilar4593 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000020000000000L });
  public static final BitSet FOLLOW_169_in_synpred93_AntlrPilar4595 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_synpred93_AntlrPilar4599 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000100000000000L });
  public static final BitSet FOLLOW_172_in_synpred93_AntlrPilar4601 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_synpred93_AntlrPilar4605 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_synpred93_AntlrPilar4607 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_synpred93_AntlrPilar4612 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_synpred93_AntlrPilar4614 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_198_in_synpred94_AntlrPilar4654 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_exp_in_synpred94_AntlrPilar4656 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000880000000000L });
  public static final BitSet FOLLOW_annotationList_in_synpred94_AntlrPilar4658 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000800000000000L });
  public static final BitSet FOLLOW_175_in_synpred94_AntlrPilar4660 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_assignment_in_synpred96_AntlrPilar4707 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_type_in_synpred114_AntlrPilar5516 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_196_in_synpred117_AntlrPilar5652 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000010000L });
  public static final BitSet FOLLOW_ifThenExp_in_synpred117_AntlrPilar5654 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_switchCaseExp_in_synpred119_AntlrPilar5712 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_switchDefaultExp_in_synpred120_AntlrPilar5728 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_213_in_synpred121_AntlrPilar6023 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_conditionalOrExp_in_synpred121_AntlrPilar6027 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_214_in_synpred122_AntlrPilar6058 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_conditionalOrExp_in_synpred122_AntlrPilar6062 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_COND_OR_OP_in_synpred123_AntlrPilar6137 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_conditionalAndExp_in_synpred123_AntlrPilar6149 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_COND_AND_OP_in_synpred124_AntlrPilar6232 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_inclusiveOrExp_in_synpred124_AntlrPilar6236 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_OR_OP_in_synpred125_AntlrPilar6308 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_exclusiveOrExp_in_synpred125_AntlrPilar6312 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_XOR_OP_in_synpred126_AntlrPilar6399 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_andExp_in_synpred126_AntlrPilar6403 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_AND_OP_in_synpred127_AntlrPilar6491 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_equalityExp_in_synpred127_AntlrPilar6495 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_EQ_OP_in_synpred128_AntlrPilar6578 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_typeTestExp_in_synpred128_AntlrPilar6582 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_COLON_OP_in_synpred129_AntlrPilar6666 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_relationalExp_in_synpred129_AntlrPilar6670 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_REL_OP_in_synpred130_AntlrPilar6753 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_shiftExp_in_synpred130_AntlrPilar6757 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_167_in_synpred131_AntlrPilar6795 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_shiftExp_in_synpred131_AntlrPilar6799 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_168_in_synpred132_AntlrPilar6840 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_shiftExp_in_synpred132_AntlrPilar6844 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_SHIFT_OP_in_synpred133_AntlrPilar6933 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_additiveExp_in_synpred133_AntlrPilar6937 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_ADD_OP_in_synpred134_AntlrPilar7012 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_multiplicativeExp_in_synpred134_AntlrPilar7016 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_MUL_OP_in_synpred135_AntlrPilar7098 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_unaryExp_in_synpred135_AntlrPilar7102 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_215_in_synpred136_AntlrPilar7140 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_unaryExp_in_synpred136_AntlrPilar7144 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_169_in_synpred141_AntlrPilar7374 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_type_in_synpred141_AntlrPilar7376 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000040000000000L });
  public static final BitSet FOLLOW_170_in_synpred141_AntlrPilar7378 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE800000L });
  public static final BitSet FOLLOW_primaryExp_in_synpred141_AntlrPilar7380 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_202_in_synpred142_AntlrPilar7463 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_expList_in_synpred142_AntlrPilar7465 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_synpred142_AntlrPilar7467 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_216_in_synpred143_AntlrPilar7505 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_synpred143_AntlrPilar7507 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_callArg_in_synpred144_AntlrPilar7552 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_202_in_synpred146_AntlrPilar7700 = new BitSet(
      new long[] { 0x0000000000000000L, 0x400000000000E000L,
          0x00020200003FF001L, 0x00000000BE811000L });
  public static final BitSet FOLLOW_expList_in_synpred146_AntlrPilar7702 = new BitSet(
      new long[] { 0x0000000000000000L, 0x0000000000000000L,
          0x0000000000000000L, 0x0000000000000800L });
  public static final BitSet FOLLOW_203_in_synpred146_AntlrPilar7704 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_216_in_synpred147_AntlrPilar7742 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_synpred147_AntlrPilar7744 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newListRanged_in_synpred151_AntlrPilar7816 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newList_in_synpred152_AntlrPilar7821 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newMultiArray_in_synpred153_AntlrPilar7826 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newRecord_in_synpred154_AntlrPilar7831 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newSet_in_synpred155_AntlrPilar7836 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newFunction_in_synpred156_AntlrPilar7841 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_217_in_synpred157_AntlrPilar7849 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_type_in_synpred157_AntlrPilar7851 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_newMultiArrayTypeFragment_in_synpred175_AntlrPilar8693 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typeFragment_in_synpred176_AntlrPilar8699 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typeFragment_in_synpred198_AntlrPilar9833 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_216_in_synpred204_AntlrPilar10106 = new BitSet(
      new long[] { 0x0000000000000000L, 0x4000000000000000L });
  public static final BitSet FOLLOW_ID_in_synpred204_AntlrPilar10108 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_typeTuple_in_synpred205_AntlrPilar10112 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procedureType_in_synpred207_AntlrPilar10150 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_tupleType_in_synpred208_AntlrPilar10155 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_functionType_in_synpred209_AntlrPilar10160 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_procedureTypeParamVariable_in_synpred210_AntlrPilar10189 = new BitSet(
      new long[] { 0x0000000000000002L });
  public static final BitSet FOLLOW_172_in_synpred211_AntlrPilar10212 = new BitSet(
      new long[] { 0x0000000000000000L, 0xC000000000000000L,
          0x0002020000000000L });
  public static final BitSet FOLLOW_typeParam_in_synpred211_AntlrPilar10214 = new BitSet(
      new long[] { 0x0000000000000002L });

}
